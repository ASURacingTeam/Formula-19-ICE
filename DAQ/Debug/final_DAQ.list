
final_DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004204  08004204  00014204  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004fc  20000010  08004284  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2000050c  08004284  0002050c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000238f4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000454d  00000000  00000000  00043929  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000af3d  00000000  00000000  00047e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000db8  00000000  00000000  00052db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001328  00000000  00000000  00053b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009ff1  00000000  00000000  00054e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000501c  00000000  00000000  0005ee89  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00063ea5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002af8  00000000  00000000  00063f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080041ec 	.word	0x080041ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080041ec 	.word	0x080041ec

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <__aeabi_frsub>:
 8000924:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000928:	e002      	b.n	8000930 <__addsf3>
 800092a:	bf00      	nop

0800092c <__aeabi_fsub>:
 800092c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000930 <__addsf3>:
 8000930:	0042      	lsls	r2, r0, #1
 8000932:	bf1f      	itttt	ne
 8000934:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000938:	ea92 0f03 	teqne	r2, r3
 800093c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000940:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000944:	d06a      	beq.n	8000a1c <__addsf3+0xec>
 8000946:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800094a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800094e:	bfc1      	itttt	gt
 8000950:	18d2      	addgt	r2, r2, r3
 8000952:	4041      	eorgt	r1, r0
 8000954:	4048      	eorgt	r0, r1
 8000956:	4041      	eorgt	r1, r0
 8000958:	bfb8      	it	lt
 800095a:	425b      	neglt	r3, r3
 800095c:	2b19      	cmp	r3, #25
 800095e:	bf88      	it	hi
 8000960:	4770      	bxhi	lr
 8000962:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000966:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800096a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800096e:	bf18      	it	ne
 8000970:	4240      	negne	r0, r0
 8000972:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000976:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800097a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800097e:	bf18      	it	ne
 8000980:	4249      	negne	r1, r1
 8000982:	ea92 0f03 	teq	r2, r3
 8000986:	d03f      	beq.n	8000a08 <__addsf3+0xd8>
 8000988:	f1a2 0201 	sub.w	r2, r2, #1
 800098c:	fa41 fc03 	asr.w	ip, r1, r3
 8000990:	eb10 000c 	adds.w	r0, r0, ip
 8000994:	f1c3 0320 	rsb	r3, r3, #32
 8000998:	fa01 f103 	lsl.w	r1, r1, r3
 800099c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a0:	d502      	bpl.n	80009a8 <__addsf3+0x78>
 80009a2:	4249      	negs	r1, r1
 80009a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009ac:	d313      	bcc.n	80009d6 <__addsf3+0xa6>
 80009ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009b2:	d306      	bcc.n	80009c2 <__addsf3+0x92>
 80009b4:	0840      	lsrs	r0, r0, #1
 80009b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ba:	f102 0201 	add.w	r2, r2, #1
 80009be:	2afe      	cmp	r2, #254	; 0xfe
 80009c0:	d251      	bcs.n	8000a66 <__addsf3+0x136>
 80009c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ca:	bf08      	it	eq
 80009cc:	f020 0001 	biceq.w	r0, r0, #1
 80009d0:	ea40 0003 	orr.w	r0, r0, r3
 80009d4:	4770      	bx	lr
 80009d6:	0049      	lsls	r1, r1, #1
 80009d8:	eb40 0000 	adc.w	r0, r0, r0
 80009dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009e0:	f1a2 0201 	sub.w	r2, r2, #1
 80009e4:	d1ed      	bne.n	80009c2 <__addsf3+0x92>
 80009e6:	fab0 fc80 	clz	ip, r0
 80009ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80009ee:	ebb2 020c 	subs.w	r2, r2, ip
 80009f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80009f6:	bfaa      	itet	ge
 80009f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009fc:	4252      	neglt	r2, r2
 80009fe:	4318      	orrge	r0, r3
 8000a00:	bfbc      	itt	lt
 8000a02:	40d0      	lsrlt	r0, r2
 8000a04:	4318      	orrlt	r0, r3
 8000a06:	4770      	bx	lr
 8000a08:	f092 0f00 	teq	r2, #0
 8000a0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a10:	bf06      	itte	eq
 8000a12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a16:	3201      	addeq	r2, #1
 8000a18:	3b01      	subne	r3, #1
 8000a1a:	e7b5      	b.n	8000988 <__addsf3+0x58>
 8000a1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2a:	d021      	beq.n	8000a70 <__addsf3+0x140>
 8000a2c:	ea92 0f03 	teq	r2, r3
 8000a30:	d004      	beq.n	8000a3c <__addsf3+0x10c>
 8000a32:	f092 0f00 	teq	r2, #0
 8000a36:	bf08      	it	eq
 8000a38:	4608      	moveq	r0, r1
 8000a3a:	4770      	bx	lr
 8000a3c:	ea90 0f01 	teq	r0, r1
 8000a40:	bf1c      	itt	ne
 8000a42:	2000      	movne	r0, #0
 8000a44:	4770      	bxne	lr
 8000a46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a4a:	d104      	bne.n	8000a56 <__addsf3+0x126>
 8000a4c:	0040      	lsls	r0, r0, #1
 8000a4e:	bf28      	it	cs
 8000a50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a54:	4770      	bx	lr
 8000a56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a5a:	bf3c      	itt	cc
 8000a5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bxcc	lr
 8000a62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	4770      	bx	lr
 8000a70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a74:	bf16      	itet	ne
 8000a76:	4608      	movne	r0, r1
 8000a78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a7c:	4601      	movne	r1, r0
 8000a7e:	0242      	lsls	r2, r0, #9
 8000a80:	bf06      	itte	eq
 8000a82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a86:	ea90 0f01 	teqeq	r0, r1
 8000a8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_ui2f>:
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	e004      	b.n	8000aa0 <__aeabi_i2f+0x8>
 8000a96:	bf00      	nop

08000a98 <__aeabi_i2f>:
 8000a98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a9c:	bf48      	it	mi
 8000a9e:	4240      	negmi	r0, r0
 8000aa0:	ea5f 0c00 	movs.w	ip, r0
 8000aa4:	bf08      	it	eq
 8000aa6:	4770      	bxeq	lr
 8000aa8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000aac:	4601      	mov	r1, r0
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	e01c      	b.n	8000aee <__aeabi_l2f+0x2a>

08000ab4 <__aeabi_ul2f>:
 8000ab4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e00a      	b.n	8000ad8 <__aeabi_l2f+0x14>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_l2f>:
 8000ac4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac8:	bf08      	it	eq
 8000aca:	4770      	bxeq	lr
 8000acc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__aeabi_l2f+0x14>
 8000ad2:	4240      	negs	r0, r0
 8000ad4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad8:	ea5f 0c01 	movs.w	ip, r1
 8000adc:	bf02      	ittt	eq
 8000ade:	4684      	moveq	ip, r0
 8000ae0:	4601      	moveq	r1, r0
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ae8:	bf08      	it	eq
 8000aea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000aee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000af2:	fabc f28c 	clz	r2, ip
 8000af6:	3a08      	subs	r2, #8
 8000af8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000afc:	db10      	blt.n	8000b20 <__aeabi_l2f+0x5c>
 8000afe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b02:	4463      	add	r3, ip
 8000b04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b08:	f1c2 0220 	rsb	r2, r2, #32
 8000b0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b10:	fa20 f202 	lsr.w	r2, r0, r2
 8000b14:	eb43 0002 	adc.w	r0, r3, r2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f102 0220 	add.w	r2, r2, #32
 8000b24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b28:	f1c2 0220 	rsb	r2, r2, #32
 8000b2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b30:	fa21 f202 	lsr.w	r2, r1, r2
 8000b34:	eb43 0002 	adc.w	r0, r3, r2
 8000b38:	bf08      	it	eq
 8000b3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fmul>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d06f      	beq.n	8000c38 <__aeabi_fmul+0xf8>
 8000b58:	441a      	add	r2, r3
 8000b5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b5e:	0240      	lsls	r0, r0, #9
 8000b60:	bf18      	it	ne
 8000b62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b66:	d01e      	beq.n	8000ba6 <__aeabi_fmul+0x66>
 8000b68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b74:	fba0 3101 	umull	r3, r1, r0, r1
 8000b78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b80:	bf3e      	ittt	cc
 8000b82:	0049      	lslcc	r1, r1, #1
 8000b84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b88:	005b      	lslcc	r3, r3, #1
 8000b8a:	ea40 0001 	orr.w	r0, r0, r1
 8000b8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b92:	2afd      	cmp	r2, #253	; 0xfd
 8000b94:	d81d      	bhi.n	8000bd2 <__aeabi_fmul+0x92>
 8000b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9e:	bf08      	it	eq
 8000ba0:	f020 0001 	biceq.w	r0, r0, #1
 8000ba4:	4770      	bx	lr
 8000ba6:	f090 0f00 	teq	r0, #0
 8000baa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bae:	bf08      	it	eq
 8000bb0:	0249      	lsleq	r1, r1, #9
 8000bb2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bb6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bba:	3a7f      	subs	r2, #127	; 0x7f
 8000bbc:	bfc2      	ittt	gt
 8000bbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bc6:	4770      	bxgt	lr
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	dc5d      	bgt.n	8000c90 <__aeabi_fmul+0x150>
 8000bd4:	f112 0f19 	cmn.w	r2, #25
 8000bd8:	bfdc      	itt	le
 8000bda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bde:	4770      	bxle	lr
 8000be0:	f1c2 0200 	rsb	r2, r2, #0
 8000be4:	0041      	lsls	r1, r0, #1
 8000be6:	fa21 f102 	lsr.w	r1, r1, r2
 8000bea:	f1c2 0220 	rsb	r2, r2, #32
 8000bee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bf6:	f140 0000 	adc.w	r0, r0, #0
 8000bfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bfe:	bf08      	it	eq
 8000c00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c04:	4770      	bx	lr
 8000c06:	f092 0f00 	teq	r2, #0
 8000c0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0040      	lsleq	r0, r0, #1
 8000c12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c16:	3a01      	subeq	r2, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xce>
 8000c1a:	ea40 000c 	orr.w	r0, r0, ip
 8000c1e:	f093 0f00 	teq	r3, #0
 8000c22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0049      	lsleq	r1, r1, #1
 8000c2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c2e:	3b01      	subeq	r3, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xe6>
 8000c32:	ea41 010c 	orr.w	r1, r1, ip
 8000c36:	e78f      	b.n	8000b58 <__aeabi_fmul+0x18>
 8000c38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c3c:	ea92 0f0c 	teq	r2, ip
 8000c40:	bf18      	it	ne
 8000c42:	ea93 0f0c 	teqne	r3, ip
 8000c46:	d00a      	beq.n	8000c5e <__aeabi_fmul+0x11e>
 8000c48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c4c:	bf18      	it	ne
 8000c4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c52:	d1d8      	bne.n	8000c06 <__aeabi_fmul+0xc6>
 8000c54:	ea80 0001 	eor.w	r0, r0, r1
 8000c58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	bf17      	itett	ne
 8000c64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c68:	4608      	moveq	r0, r1
 8000c6a:	f091 0f00 	teqne	r1, #0
 8000c6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c72:	d014      	beq.n	8000c9e <__aeabi_fmul+0x15e>
 8000c74:	ea92 0f0c 	teq	r2, ip
 8000c78:	d101      	bne.n	8000c7e <__aeabi_fmul+0x13e>
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	d10f      	bne.n	8000c9e <__aeabi_fmul+0x15e>
 8000c7e:	ea93 0f0c 	teq	r3, ip
 8000c82:	d103      	bne.n	8000c8c <__aeabi_fmul+0x14c>
 8000c84:	024b      	lsls	r3, r1, #9
 8000c86:	bf18      	it	ne
 8000c88:	4608      	movne	r0, r1
 8000c8a:	d108      	bne.n	8000c9e <__aeabi_fmul+0x15e>
 8000c8c:	ea80 0001 	eor.w	r0, r0, r1
 8000c90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_fdiv>:
 8000ca8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb6:	ea92 0f0c 	teqne	r2, ip
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d069      	beq.n	8000d94 <__aeabi_fdiv+0xec>
 8000cc0:	eba2 0203 	sub.w	r2, r2, r3
 8000cc4:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc8:	0249      	lsls	r1, r1, #9
 8000cca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cce:	d037      	beq.n	8000d40 <__aeabi_fdiv+0x98>
 8000cd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cd4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cd8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	bf38      	it	cc
 8000ce4:	005b      	lslcc	r3, r3, #1
 8000ce6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	bf24      	itt	cs
 8000cf2:	1a5b      	subcs	r3, r3, r1
 8000cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cf8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cfc:	bf24      	itt	cs
 8000cfe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d0a:	bf24      	itt	cs
 8000d0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d18:	bf24      	itt	cs
 8000d1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	bf18      	it	ne
 8000d26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d2a:	d1e0      	bne.n	8000cee <__aeabi_fdiv+0x46>
 8000d2c:	2afd      	cmp	r2, #253	; 0xfd
 8000d2e:	f63f af50 	bhi.w	8000bd2 <__aeabi_fmul+0x92>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d48:	327f      	adds	r2, #127	; 0x7f
 8000d4a:	bfc2      	ittt	gt
 8000d4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d54:	4770      	bxgt	lr
 8000d56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5a:	f04f 0300 	mov.w	r3, #0
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	e737      	b.n	8000bd2 <__aeabi_fmul+0x92>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0040      	lsleq	r0, r0, #1
 8000d6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d72:	3a01      	subeq	r2, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xc2>
 8000d76:	ea40 000c 	orr.w	r0, r0, ip
 8000d7a:	f093 0f00 	teq	r3, #0
 8000d7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0049      	lsleq	r1, r1, #1
 8000d86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8a:	3b01      	subeq	r3, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xda>
 8000d8e:	ea41 010c 	orr.w	r1, r1, ip
 8000d92:	e795      	b.n	8000cc0 <__aeabi_fdiv+0x18>
 8000d94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d98:	ea92 0f0c 	teq	r2, ip
 8000d9c:	d108      	bne.n	8000db0 <__aeabi_fdiv+0x108>
 8000d9e:	0242      	lsls	r2, r0, #9
 8000da0:	f47f af7d 	bne.w	8000c9e <__aeabi_fmul+0x15e>
 8000da4:	ea93 0f0c 	teq	r3, ip
 8000da8:	f47f af70 	bne.w	8000c8c <__aeabi_fmul+0x14c>
 8000dac:	4608      	mov	r0, r1
 8000dae:	e776      	b.n	8000c9e <__aeabi_fmul+0x15e>
 8000db0:	ea93 0f0c 	teq	r3, ip
 8000db4:	d104      	bne.n	8000dc0 <__aeabi_fdiv+0x118>
 8000db6:	024b      	lsls	r3, r1, #9
 8000db8:	f43f af4c 	beq.w	8000c54 <__aeabi_fmul+0x114>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e76e      	b.n	8000c9e <__aeabi_fmul+0x15e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1ca      	bne.n	8000d62 <__aeabi_fdiv+0xba>
 8000dcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd0:	f47f af5c 	bne.w	8000c8c <__aeabi_fmul+0x14c>
 8000dd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dd8:	f47f af3c 	bne.w	8000c54 <__aeabi_fmul+0x114>
 8000ddc:	e75f      	b.n	8000c9e <__aeabi_fmul+0x15e>
 8000dde:	bf00      	nop

08000de0 <__aeabi_f2uiz>:
 8000de0:	0042      	lsls	r2, r0, #1
 8000de2:	d20e      	bcs.n	8000e02 <__aeabi_f2uiz+0x22>
 8000de4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000de8:	d30b      	bcc.n	8000e02 <__aeabi_f2uiz+0x22>
 8000dea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000df2:	d409      	bmi.n	8000e08 <__aeabi_f2uiz+0x28>
 8000df4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000df8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dfc:	fa23 f002 	lsr.w	r0, r3, r2
 8000e00:	4770      	bx	lr
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	4770      	bx	lr
 8000e08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_f2uiz+0x32>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d102      	bne.n	8000e18 <__aeabi_f2uiz+0x38>
 8000e12:	f04f 30ff 	mov.w	r0, #4294967295
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_InitTick+0x3c>)
{
 8000e24:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e26:	7818      	ldrb	r0, [r3, #0]
 8000e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_InitTick+0x40>)
 8000e32:	6810      	ldr	r0, [r2, #0]
 8000e34:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e38:	f000 fc9a 	bl	8001770 <HAL_SYSTICK_Config>
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	b958      	cbnz	r0, 8000e58 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	2d0f      	cmp	r5, #15
 8000e42:	d809      	bhi.n	8000e58 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	4602      	mov	r2, r0
 8000e46:	4629      	mov	r1, r5
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 fc50 	bl	80016f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <HAL_InitTick+0x44>)
 8000e52:	4620      	mov	r0, r4
 8000e54:	601d      	str	r5, [r3, #0]
 8000e56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e58:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x20>)
{
 8000e6a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e76:	f000 fc29 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff ffd0 	bl	8000e20 <HAL_InitTick>
  HAL_MspInit();
 8000e80:	f002 ff56 	bl	8003d30 <HAL_MspInit>
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	bd08      	pop	{r3, pc}
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e8c:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <HAL_IncTick+0x10>)
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_IncTick+0x14>)
 8000e90:	6811      	ldr	r1, [r2, #0]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	440b      	add	r3, r1
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200000b0 	.word	0x200000b0
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ea4:	4b01      	ldr	r3, [pc, #4]	; (8000eac <HAL_GetTick+0x8>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200000b0 	.word	0x200000b0

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff fff6 	bl	8000ea4 <HAL_GetTick>
 8000eb8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	4b04      	ldrne	r3, [pc, #16]	; (8000ed0 <HAL_Delay+0x20>)
 8000ec0:	781b      	ldrbne	r3, [r3, #0]
 8000ec2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	4284      	cmp	r4, r0
 8000ecc:	d8fa      	bhi.n	8000ec4 <HAL_Delay+0x14>
  {
  }
}
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ed4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000ed6:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eda:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000ede:	d11b      	bne.n	8000f18 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	6892      	ldr	r2, [r2, #8]
 8000eec:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000ef0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000ef4:	d10c      	bne.n	8000f10 <ADC_DMAConvCplt+0x3c>
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	b952      	cbnz	r2, 8000f10 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f04:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f06:	bf5e      	ittt	pl
 8000f08:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000f0a:	f042 0201 	orrpl.w	r2, r2, #1
 8000f0e:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fab5 	bl	8003480 <HAL_ADC_ConvCpltCallback>
 8000f16:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f18:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4718      	bx	r3

08000f22 <HAL_ADC_ConvHalfCpltCallback>:
 8000f22:	4770      	bx	lr

08000f24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f24:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000f26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f28:	f7ff fffb 	bl	8000f22 <HAL_ADC_ConvHalfCpltCallback>
 8000f2c:	bd08      	pop	{r3, pc}

08000f2e <HAL_ADC_LevelOutOfWindowCallback>:
 8000f2e:	4770      	bx	lr

08000f30 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f30:	6803      	ldr	r3, [r0, #0]
{
 8000f32:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f34:	685a      	ldr	r2, [r3, #4]
{
 8000f36:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f38:	0690      	lsls	r0, r2, #26
 8000f3a:	d527      	bpl.n	8000f8c <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	0791      	lsls	r1, r2, #30
 8000f40:	d524      	bpl.n	8000f8c <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f44:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f46:	bf5e      	ittt	pl
 8000f48:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000f4a:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000f4e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f56:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000f5a:	d110      	bne.n	8000f7e <HAL_ADC_IRQHandler+0x4e>
 8000f5c:	68e2      	ldr	r2, [r4, #12]
 8000f5e:	b972      	cbnz	r2, 8000f7e <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	f022 0220 	bic.w	r2, r2, #32
 8000f66:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f6e:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f72:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f74:	bf5e      	ittt	pl
 8000f76:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000f78:	f043 0301 	orrpl.w	r3, r3, #1
 8000f7c:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f002 fa7e 	bl	8003480 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f84:	f06f 0212 	mvn.w	r2, #18
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	0610      	lsls	r0, r2, #24
 8000f92:	d530      	bpl.n	8000ff6 <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	0751      	lsls	r1, r2, #29
 8000f98:	d52d      	bpl.n	8000ff6 <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f9c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f9e:	bf5e      	ittt	pl
 8000fa0:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000fa2:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000fa6:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000fae:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000fb2:	d00a      	beq.n	8000fca <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fb4:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fb6:	0550      	lsls	r0, r2, #21
 8000fb8:	d416      	bmi.n	8000fe8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fc0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000fc4:	d110      	bne.n	8000fe8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fc6:	68e2      	ldr	r2, [r4, #12]
 8000fc8:	b972      	cbnz	r2, 8000fe8 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fd8:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fdc:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fde:	bf5e      	ittt	pl
 8000fe0:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000fe2:	f043 0301 	orrpl.w	r3, r3, #1
 8000fe6:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f000 fa11 	bl	8001410 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fee:	f06f 020c 	mvn.w	r2, #12
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	0652      	lsls	r2, r2, #25
 8000ffc:	d50d      	bpl.n	800101a <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	07db      	lsls	r3, r3, #31
 8001002:	d50a      	bpl.n	800101a <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001004:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001006:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800100e:	f7ff ff8e 	bl	8000f2e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001012:	f06f 0201 	mvn.w	r2, #1
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	bd10      	pop	{r4, pc}

0800101c <HAL_ADC_ErrorCallback>:
{
 800101c:	4770      	bx	lr

0800101e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800101e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001020:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001022:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800102a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001032:	f7ff fff3 	bl	800101c <HAL_ADC_ErrorCallback>
 8001036:	bd08      	pop	{r3, pc}

08001038 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001038:	2300      	movs	r3, #0
{ 
 800103a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800103c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800103e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001042:	2b01      	cmp	r3, #1
 8001044:	d074      	beq.n	8001130 <HAL_ADC_ConfigChannel+0xf8>
 8001046:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001048:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800104a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800104e:	2d06      	cmp	r5, #6
 8001050:	6802      	ldr	r2, [r0, #0]
 8001052:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001056:	680c      	ldr	r4, [r1, #0]
 8001058:	d825      	bhi.n	80010a6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800105a:	442b      	add	r3, r5
 800105c:	251f      	movs	r5, #31
 800105e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001060:	3b05      	subs	r3, #5
 8001062:	409d      	lsls	r5, r3
 8001064:	ea26 0505 	bic.w	r5, r6, r5
 8001068:	fa04 f303 	lsl.w	r3, r4, r3
 800106c:	432b      	orrs	r3, r5
 800106e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001070:	2c09      	cmp	r4, #9
 8001072:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001076:	688d      	ldr	r5, [r1, #8]
 8001078:	d92f      	bls.n	80010da <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800107a:	2607      	movs	r6, #7
 800107c:	4423      	add	r3, r4
 800107e:	68d1      	ldr	r1, [r2, #12]
 8001080:	3b1e      	subs	r3, #30
 8001082:	409e      	lsls	r6, r3
 8001084:	ea21 0106 	bic.w	r1, r1, r6
 8001088:	fa05 f303 	lsl.w	r3, r5, r3
 800108c:	430b      	orrs	r3, r1
 800108e:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001090:	f1a4 0310 	sub.w	r3, r4, #16
 8001094:	2b01      	cmp	r3, #1
 8001096:	d92b      	bls.n	80010f0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800109a:	2200      	movs	r2, #0
 800109c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	b002      	add	sp, #8
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80010a6:	2d0c      	cmp	r5, #12
 80010a8:	d80b      	bhi.n	80010c2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010aa:	442b      	add	r3, r5
 80010ac:	251f      	movs	r5, #31
 80010ae:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80010b0:	3b23      	subs	r3, #35	; 0x23
 80010b2:	409d      	lsls	r5, r3
 80010b4:	ea26 0505 	bic.w	r5, r6, r5
 80010b8:	fa04 f303 	lsl.w	r3, r4, r3
 80010bc:	432b      	orrs	r3, r5
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	e7d6      	b.n	8001070 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010c2:	442b      	add	r3, r5
 80010c4:	251f      	movs	r5, #31
 80010c6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80010c8:	3b41      	subs	r3, #65	; 0x41
 80010ca:	409d      	lsls	r5, r3
 80010cc:	ea26 0505 	bic.w	r5, r6, r5
 80010d0:	fa04 f303 	lsl.w	r3, r4, r3
 80010d4:	432b      	orrs	r3, r5
 80010d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010d8:	e7ca      	b.n	8001070 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010da:	2607      	movs	r6, #7
 80010dc:	6911      	ldr	r1, [r2, #16]
 80010de:	4423      	add	r3, r4
 80010e0:	409e      	lsls	r6, r3
 80010e2:	ea21 0106 	bic.w	r1, r1, r6
 80010e6:	fa05 f303 	lsl.w	r3, r5, r3
 80010ea:	430b      	orrs	r3, r1
 80010ec:	6113      	str	r3, [r2, #16]
 80010ee:	e7cf      	b.n	8001090 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_ADC_ConfigChannel+0xfc>)
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d116      	bne.n	8001124 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010f6:	6893      	ldr	r3, [r2, #8]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	d4cd      	bmi.n	8001098 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010fc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010fe:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001104:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001106:	d1c7      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_ADC_ConfigChannel+0x100>)
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_ADC_ConfigChannel+0x104>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001112:	230a      	movs	r3, #10
 8001114:	4353      	muls	r3, r2
            wait_loop_index--;
 8001116:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0bc      	beq.n	8001098 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800111e:	9b01      	ldr	r3, [sp, #4]
 8001120:	3b01      	subs	r3, #1
 8001122:	e7f8      	b.n	8001116 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001124:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e7b4      	b.n	800109a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001130:	2302      	movs	r3, #2
 8001132:	e7b5      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x68>
 8001134:	40012400 	.word	0x40012400
 8001138:	20000008 	.word	0x20000008
 800113c:	000f4240 	.word	0x000f4240

08001140 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001140:	2300      	movs	r3, #0
{
 8001142:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001144:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001146:	6803      	ldr	r3, [r0, #0]
{
 8001148:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	07d2      	lsls	r2, r2, #31
 800114e:	d502      	bpl.n	8001156 <ADC_Enable+0x16>
  return HAL_OK;
 8001150:	2000      	movs	r0, #0
}
 8001152:	b002      	add	sp, #8
 8001154:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <ADC_Enable+0x68>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <ADC_Enable+0x6c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001168:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800116a:	9b01      	ldr	r3, [sp, #4]
 800116c:	b9c3      	cbnz	r3, 80011a0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800116e:	f7ff fe99 	bl	8000ea4 <HAL_GetTick>
 8001172:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	689d      	ldr	r5, [r3, #8]
 8001178:	f015 0501 	ands.w	r5, r5, #1
 800117c:	d1e8      	bne.n	8001150 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800117e:	f7ff fe91 	bl	8000ea4 <HAL_GetTick>
 8001182:	1b80      	subs	r0, r0, r6
 8001184:	2802      	cmp	r0, #2
 8001186:	d9f5      	bls.n	8001174 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800118a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001194:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001196:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800119e:	e7d8      	b.n	8001152 <ADC_Enable+0x12>
      wait_loop_index--;
 80011a0:	9b01      	ldr	r3, [sp, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	e7e0      	b.n	8001168 <ADC_Enable+0x28>
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	000f4240 	.word	0x000f4240

080011b0 <HAL_ADC_Start_DMA>:
{
 80011b0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80011b4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <HAL_ADC_Start_DMA+0x108>)
 80011b8:	6802      	ldr	r2, [r0, #0]
{
 80011ba:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011bc:	429a      	cmp	r2, r3
{
 80011be:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011c0:	d002      	beq.n	80011c8 <HAL_ADC_Start_DMA+0x18>
 80011c2:	493e      	ldr	r1, [pc, #248]	; (80012bc <HAL_ADC_Start_DMA+0x10c>)
 80011c4:	428a      	cmp	r2, r1
 80011c6:	d103      	bne.n	80011d0 <HAL_ADC_Start_DMA+0x20>
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80011ce:	d16e      	bne.n	80012ae <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80011d0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d06c      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x102>
 80011d8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80011da:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80011dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80011e0:	f7ff ffae 	bl	8001140 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80011e4:	4606      	mov	r6, r0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d15d      	bne.n	80012a6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80011ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ec:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80011ee:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80011f4:	f020 0001 	bic.w	r0, r0, #1
 80011f8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011fc:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80011fe:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001200:	d104      	bne.n	800120c <HAL_ADC_Start_DMA+0x5c>
 8001202:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <HAL_ADC_Start_DMA+0x108>)
 8001204:	6853      	ldr	r3, [r2, #4]
 8001206:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800120a:	d13e      	bne.n	800128a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800120c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800120e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001212:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001214:	684b      	ldr	r3, [r1, #4]
 8001216:	055a      	lsls	r2, r3, #21
 8001218:	d505      	bpl.n	8001226 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800121a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800121c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001228:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800122a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800122e:	bf18      	it	ne
 8001230:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001232:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001234:	bf18      	it	ne
 8001236:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800123a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800123c:	2300      	movs	r3, #0
 800123e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001244:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001246:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_ADC_Start_DMA+0x114>)
 800124a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_ADC_Start_DMA+0x118>)
 800124e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001250:	f06f 0302 	mvn.w	r3, #2
 8001254:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001258:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001264:	4643      	mov	r3, r8
 8001266:	f000 fadf 	bl	8001828 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001272:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	bf0c      	ite	eq
 800127a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800127e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001282:	609a      	str	r2, [r3, #8]
}
 8001284:	4630      	mov	r0, r6
 8001286:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800128a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800128c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001290:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001292:	6853      	ldr	r3, [r2, #4]
 8001294:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001296:	bf41      	itttt	mi
 8001298:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800129a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800129e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80012a2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80012a4:	e7bf      	b.n	8001226 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80012a6:	2300      	movs	r3, #0
 80012a8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80012ac:	e7ea      	b.n	8001284 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80012ae:	2601      	movs	r6, #1
 80012b0:	e7e8      	b.n	8001284 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80012b2:	2602      	movs	r6, #2
 80012b4:	e7e6      	b.n	8001284 <HAL_ADC_Start_DMA+0xd4>
 80012b6:	bf00      	nop
 80012b8:	40012400 	.word	0x40012400
 80012bc:	40012800 	.word	0x40012800
 80012c0:	08000ed5 	.word	0x08000ed5
 80012c4:	08000f25 	.word	0x08000f25
 80012c8:	0800101f 	.word	0x0800101f

080012cc <ADC_ConversionStop_Disable>:
{
 80012cc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012ce:	6803      	ldr	r3, [r0, #0]
{
 80012d0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	07d2      	lsls	r2, r2, #31
 80012d6:	d401      	bmi.n	80012dc <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
 80012da:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80012e4:	f7ff fdde 	bl	8000ea4 <HAL_GetTick>
 80012e8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	07db      	lsls	r3, r3, #31
 80012f0:	d5f2      	bpl.n	80012d8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012f2:	f7ff fdd7 	bl	8000ea4 <HAL_GetTick>
 80012f6:	1b40      	subs	r0, r0, r5
 80012f8:	2802      	cmp	r0, #2
 80012fa:	d9f6      	bls.n	80012ea <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001306:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800130e:	bd38      	pop	{r3, r4, r5, pc}

08001310 <HAL_ADC_Init>:
{
 8001310:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001312:	4604      	mov	r4, r0
 8001314:	2800      	cmp	r0, #0
 8001316:	d071      	beq.n	80013fc <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001318:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800131a:	b923      	cbnz	r3, 8001326 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800131c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800131e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001322:	f001 ff55 	bl	80031d0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff ffd0 	bl	80012cc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800132c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800132e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001334:	d164      	bne.n	8001400 <HAL_ADC_Init+0xf0>
 8001336:	2800      	cmp	r0, #0
 8001338:	d162      	bne.n	8001400 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800133a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001340:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	f023 0302 	bic.w	r3, r3, #2
 8001346:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800134a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800134c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800134e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001350:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001352:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001356:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800135a:	d038      	beq.n	80013ce <HAL_ADC_Init+0xbe>
 800135c:	2901      	cmp	r1, #1
 800135e:	bf14      	ite	ne
 8001360:	4606      	movne	r6, r0
 8001362:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001366:	6965      	ldr	r5, [r4, #20]
 8001368:	2d01      	cmp	r5, #1
 800136a:	d107      	bne.n	800137c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800136c:	2b00      	cmp	r3, #0
 800136e:	d130      	bne.n	80013d2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001370:	69a3      	ldr	r3, [r4, #24]
 8001372:	3b01      	subs	r3, #1
 8001374:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001378:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800137c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800137e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001382:	685d      	ldr	r5, [r3, #4]
 8001384:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001388:	ea45 0506 	orr.w	r5, r5, r6
 800138c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800138e:	689e      	ldr	r6, [r3, #8]
 8001390:	4d1d      	ldr	r5, [pc, #116]	; (8001408 <HAL_ADC_Init+0xf8>)
 8001392:	ea05 0506 	and.w	r5, r5, r6
 8001396:	ea45 0502 	orr.w	r5, r5, r2
 800139a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_Init+0x92>
 800139e:	2901      	cmp	r1, #1
 80013a0:	d120      	bne.n	80013e4 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013a2:	6921      	ldr	r1, [r4, #16]
 80013a4:	3901      	subs	r1, #1
 80013a6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80013a8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80013aa:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80013ae:	4329      	orrs	r1, r5
 80013b0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013b2:	6899      	ldr	r1, [r3, #8]
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_ADC_Init+0xfc>)
 80013b6:	400b      	ands	r3, r1
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d115      	bne.n	80013e8 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	2300      	movs	r3, #0
 80013be:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80013c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013c2:	f023 0303 	bic.w	r3, r3, #3
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013ce:	460e      	mov	r6, r1
 80013d0:	e7c9      	b.n	8001366 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013e2:	e7cb      	b.n	800137c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80013e4:	2100      	movs	r1, #0
 80013e6:	e7df      	b.n	80013a8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80013e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013ea:	f023 0312 	bic.w	r3, r3, #18
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80013fc:	2001      	movs	r0, #1
}
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001400:	f043 0310 	orr.w	r3, r3, #16
 8001404:	62a3      	str	r3, [r4, #40]	; 0x28
 8001406:	e7f9      	b.n	80013fc <HAL_ADC_Init+0xec>
 8001408:	ffe1f7fd 	.word	0xffe1f7fd
 800140c:	ff1f0efe 	.word	0xff1f0efe

08001410 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001410:	4770      	bx	lr

08001412 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8001412:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0U;
  uint32_t tmp_mcr = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8001414:	4604      	mov	r4, r0
 8001416:	2800      	cmp	r0, #0
 8001418:	d069      	beq.n	80014ee <HAL_CAN_Init+0xdc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 800141a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800141e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001422:	b91b      	cbnz	r3, 800142c <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8001424:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8001428:	f001 ff44 	bl	80032b4 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 800142c:	2302      	movs	r3, #2
 800142e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f022 0202 	bic.w	r2, r2, #2
 800143a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8001444:	f7ff fd2e 	bl	8000ea4 <HAL_GetTick>
 8001448:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800144a:	6822      	ldr	r2, [r4, #0]
 800144c:	6855      	ldr	r5, [r2, #4]
 800144e:	f015 0501 	ands.w	r5, r5, #1
 8001452:	d04e      	beq.n	80014f2 <HAL_CAN_Init+0xe0>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8001454:	6853      	ldr	r3, [r2, #4]
 8001456:	07d9      	lsls	r1, r3, #31
 8001458:	d546      	bpl.n	80014e8 <HAL_CAN_Init+0xd6>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 800145a:	69a3      	ldr	r3, [r4, #24]
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800145c:	69e1      	ldr	r1, [r4, #28]
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 800145e:	2b01      	cmp	r3, #1
 8001460:	bf0c      	ite	eq
 8001462:	2380      	moveq	r3, #128	; 0x80
 8001464:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 8001466:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8001468:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 800146a:	bf0c      	ite	eq
 800146c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 8001470:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 8001474:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8001476:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8001478:	bf0c      	ite	eq
 800147a:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 800147e:	f023 0320 	bicne.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 8001482:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8001484:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8001486:	bf0c      	ite	eq
 8001488:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 800148c:	f023 0310 	bicne.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 8001490:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8001492:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8001494:	bf0c      	ite	eq
 8001496:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 800149a:	f023 0308 	bicne.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 800149e:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 80014a0:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 80014a2:	bf0c      	ite	eq
 80014a4:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 80014a8:	f023 0304 	bicne.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 80014ac:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014b4:	68e1      	ldr	r1, [r4, #12]
 80014b6:	68a3      	ldr	r3, [r4, #8]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6921      	ldr	r1, [r4, #16]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6961      	ldr	r1, [r4, #20]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	6861      	ldr	r1, [r4, #4]
 80014c4:	3901      	subs	r1, #1
 80014c6:	430b      	orrs	r3, r1
 80014c8:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ca:	6813      	ldr	r3, [r2, #0]
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 80014d2:	f7ff fce7 	bl	8000ea4 <HAL_GetTick>
 80014d6:	4605      	mov	r5, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	07d2      	lsls	r2, r2, #31
 80014de:	d413      	bmi.n	8001508 <HAL_CAN_Init+0xf6>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80014e0:	6858      	ldr	r0, [r3, #4]
 80014e2:	f010 0001 	ands.w	r0, r0, #1
 80014e6:	d01b      	beq.n	8001520 <HAL_CAN_Init+0x10e>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80014e8:	2304      	movs	r3, #4
 80014ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80014f2:	f7ff fcd7 	bl	8000ea4 <HAL_GetTick>
 80014f6:	1b80      	subs	r0, r0, r6
 80014f8:	280a      	cmp	r0, #10
 80014fa:	d9a6      	bls.n	800144a <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 80014fe:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001502:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8001506:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff fccc 	bl	8000ea4 <HAL_GetTick>
 800150c:	1b40      	subs	r0, r0, r5
 800150e:	280a      	cmp	r0, #10
 8001510:	d9e2      	bls.n	80014d8 <HAL_CAN_Init+0xc6>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001512:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 8001514:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001516:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 800151a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800151e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8001520:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001522:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8001524:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
}
 8001528:	bd70      	pop	{r4, r5, r6, pc}
	...

0800152c <HAL_CAN_Transmit>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800152c:	6802      	ldr	r2, [r0, #0]
{
 800152e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8001532:	6893      	ldr	r3, [r2, #8]
{
 8001534:	4604      	mov	r4, r0
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8001536:	015b      	lsls	r3, r3, #5
{
 8001538:	460f      	mov	r7, r1
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800153a:	d406      	bmi.n	800154a <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 800153c:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800153e:	011d      	lsls	r5, r3, #4
 8001540:	d403      	bmi.n	800154a <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8001542:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8001544:	00d8      	lsls	r0, r3, #3
 8001546:	f140 80b1 	bpl.w	80016ac <HAL_CAN_Transmit+0x180>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 800154a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800154e:	2b01      	cmp	r3, #1
 8001550:	f000 80b2 	beq.w	80016b8 <HAL_CAN_Transmit+0x18c>
 8001554:	2301      	movs	r3, #1
 8001556:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

    /* Change CAN state */
    switch(hcan->State)
 800155a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b32      	cmp	r3, #50	; 0x32
 8001562:	d066      	beq.n	8001632 <HAL_CAN_Transmit+0x106>
 8001564:	2b62      	cmp	r3, #98	; 0x62
 8001566:	d066      	beq.n	8001636 <HAL_CAN_Transmit+0x10a>
 8001568:	2b22      	cmp	r3, #34	; 0x22
 800156a:	d166      	bne.n	800163a <HAL_CAN_Transmit+0x10e>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800156c:	2342      	movs	r3, #66	; 0x42
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 800156e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          break;
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8001572:	6893      	ldr	r3, [r2, #8]
 8001574:	0159      	lsls	r1, r3, #5
 8001576:	d462      	bmi.n	800163e <HAL_CAN_Transmit+0x112>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8001578:	6893      	ldr	r3, [r2, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 800157a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800157e:	bf14      	ite	ne
 8001580:	2601      	movne	r6, #1
 8001582:	2602      	moveq	r6, #2
 8001584:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 8001588:	eb02 030e 	add.w	r3, r2, lr
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800158c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800158e:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8001592:	6885      	ldr	r5, [r0, #8]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8001594:	f001 0101 	and.w	r1, r1, #1
 8001598:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 800159c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	d14e      	bne.n	8001642 <HAL_CAN_Transmit+0x116>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) |
 80015a4:	6805      	ldr	r5, [r0, #0]
 80015a6:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 80015aa:	ea4c 5545 	orr.w	r5, ip, r5, lsl #21
 80015ae:	430d      	orrs	r5, r1
                                                           hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 80015b0:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
                                                           hcan->pTxMsg->RTR);
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80015b4:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 80015b8:	6901      	ldr	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80015ba:	f025 050f 	bic.w	r5, r5, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 80015be:	f001 010f 	and.w	r1, r1, #15
 80015c2:	6101      	str	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80015c4:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80015c8:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 80015cc:	4472      	add	r2, lr
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80015ce:	4329      	orrs	r1, r5
 80015d0:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 80015d4:	6941      	ldr	r1, [r0, #20]

    /* Get tick */
    tickstart = HAL_GetTick();

    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80015d6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80016c4 <HAL_CAN_Transmit+0x198>
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 80015da:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) | 
 80015de:	6981      	ldr	r1, [r0, #24]
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80015e0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80016c8 <HAL_CAN_Transmit+0x19c>
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) | 
 80015e4:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015e8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();
 80015f4:	f7ff fc56 	bl	8000ea4 <HAL_GetTick>
 80015f8:	4605      	mov	r5, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80015fa:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <HAL_CAN_Transmit+0x194>)
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2e00      	cmp	r6, #0
 8001602:	d145      	bne.n	8001690 <HAL_CAN_Transmit+0x164>
 8001604:	ea32 0303 	bics.w	r3, r2, r3
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	bb13      	cbnz	r3, 8001656 <HAL_CAN_Transmit+0x12a>
          return HAL_TIMEOUT;
        }
      }
    }
    /* Change CAN state */
    switch(hcan->State)
 8001610:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b52      	cmp	r3, #82	; 0x52
 8001618:	d042      	beq.n	80016a0 <HAL_CAN_Transmit+0x174>
 800161a:	2b72      	cmp	r3, #114	; 0x72
 800161c:	d042      	beq.n	80016a4 <HAL_CAN_Transmit+0x178>
 800161e:	2b42      	cmp	r3, #66	; 0x42
 8001620:	d142      	bne.n	80016a8 <HAL_CAN_Transmit+0x17c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001622:	2322      	movs	r3, #34	; 0x22
          hcan->State = HAL_CAN_STATE_READY;
          break;
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8001624:	2000      	movs	r0, #0
          hcan->State = HAL_CAN_STATE_READY;
 8001626:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hcan);
 800162a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

    /* Return function status */
    return HAL_OK;
 800162e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001632:	2352      	movs	r3, #82	; 0x52
 8001634:	e79b      	b.n	800156e <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001636:	2372      	movs	r3, #114	; 0x72
 8001638:	e799      	b.n	800156e <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 800163a:	2312      	movs	r3, #18
 800163c:	e797      	b.n	800156e <HAL_CAN_Transmit+0x42>
      transmitmailbox = CAN_TXMAILBOX_0;
 800163e:	2600      	movs	r6, #0
 8001640:	e7a0      	b.n	8001584 <HAL_CAN_Transmit+0x58>
                                                           hcan->pTxMsg->IDE |
 8001642:	6841      	ldr	r1, [r0, #4]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 8001644:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
                                                           hcan->pTxMsg->IDE |
 8001648:	ea45 050c 	orr.w	r5, r5, ip
 800164c:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 8001650:	ea45 0508 	orr.w	r5, r5, r8
 8001654:	e7ac      	b.n	80015b0 <HAL_CAN_Transmit+0x84>
      if(Timeout != HAL_MAX_DELAY)
 8001656:	1c7b      	adds	r3, r7, #1
 8001658:	d0d0      	beq.n	80015fc <HAL_CAN_Transmit+0xd0>
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800165a:	b95f      	cbnz	r7, 8001674 <HAL_CAN_Transmit+0x148>
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001662:	6823      	ldr	r3, [r4, #0]
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8001664:	b166      	cbz	r6, 8001680 <HAL_CAN_Transmit+0x154>
 8001666:	2e01      	cmp	r6, #1
 8001668:	bf0c      	ite	eq
 800166a:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 800166e:	f44f 0200 	movne.w	r2, #8388608	; 0x800000
 8001672:	e006      	b.n	8001682 <HAL_CAN_Transmit+0x156>
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001674:	f7ff fc16 	bl	8000ea4 <HAL_GetTick>
 8001678:	1b40      	subs	r0, r0, r5
 800167a:	4287      	cmp	r7, r0
 800167c:	d2bd      	bcs.n	80015fa <HAL_CAN_Transmit+0xce>
 800167e:	e7ed      	b.n	800165c <HAL_CAN_Transmit+0x130>
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	609a      	str	r2, [r3, #8]
          __HAL_UNLOCK(hcan);
 8001684:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001686:	2003      	movs	r0, #3
          __HAL_UNLOCK(hcan);
 8001688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          return HAL_TIMEOUT;
 800168c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001690:	2e01      	cmp	r6, #1
 8001692:	d102      	bne.n	800169a <HAL_CAN_Transmit+0x16e>
 8001694:	ea39 0303 	bics.w	r3, r9, r3
 8001698:	e7b6      	b.n	8001608 <HAL_CAN_Transmit+0xdc>
 800169a:	ea38 0303 	bics.w	r3, r8, r3
 800169e:	e7b3      	b.n	8001608 <HAL_CAN_Transmit+0xdc>
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80016a0:	2332      	movs	r3, #50	; 0x32
 80016a2:	e7bf      	b.n	8001624 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80016a4:	2362      	movs	r3, #98	; 0x62
 80016a6:	e7bd      	b.n	8001624 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_READY;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e7bb      	b.n	8001624 <HAL_CAN_Transmit+0xf8>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80016ac:	2304      	movs	r3, #4

    /* Return function status */
    return HAL_ERROR;
 80016ae:	2001      	movs	r0, #1
    hcan->State = HAL_CAN_STATE_ERROR;
 80016b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80016b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcan);
 80016b8:	2002      	movs	r0, #2
  }
}
 80016ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016be:	bf00      	nop
 80016c0:	04000001 	.word	0x04000001
 80016c4:	10010000 	.word	0x10010000
 80016c8:	08000100 	.word	0x08000100

080016cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016ce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80016e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016e8:	60d3      	str	r3, [r2, #12]
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b530      	push	{r4, r5, lr}
 80016f4:	68dc      	ldr	r4, [r3, #12]
 80016f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	2b04      	cmp	r3, #4
 8001702:	bf28      	it	cs
 8001704:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170c:	bf98      	it	ls
 800170e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	fa05 f303 	lsl.w	r3, r5, r3
 8001714:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001718:	bf88      	it	hi
 800171a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4019      	ands	r1, r3
 800171e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	fa05 f404 	lsl.w	r4, r5, r4
 8001724:	3c01      	subs	r4, #1
 8001726:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001728:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172a:	ea42 0201 	orr.w	r2, r2, r1
 800172e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	bfaf      	iteee	ge
 8001734:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	4b06      	ldrlt	r3, [pc, #24]	; (8001754 <HAL_NVIC_SetPriority+0x64>)
 800173a:	f000 000f 	andlt.w	r0, r0, #15
 800173e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	bfa5      	ittet	ge
 8001742:	b2d2      	uxtbge	r2, r2
 8001744:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800174e:	bd30      	pop	{r4, r5, pc}
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	e000ed14 	.word	0xe000ed14

08001758 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001758:	2301      	movs	r3, #1
 800175a:	0942      	lsrs	r2, r0, #5
 800175c:	f000 001f 	and.w	r0, r0, #31
 8001760:	fa03 f000 	lsl.w	r0, r3, r0
 8001764:	4b01      	ldr	r3, [pc, #4]	; (800176c <HAL_NVIC_EnableIRQ+0x14>)
 8001766:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	3801      	subs	r0, #1
 8001772:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001776:	d20a      	bcs.n	800178e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	4a06      	ldr	r2, [pc, #24]	; (8001798 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800179e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	bf0c      	ite	eq
 80017a4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017a8:	f022 0204 	bicne.w	r2, r2, #4
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	4770      	bx	lr
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017b4:	4770      	bx	lr

080017b6 <HAL_SYSTICK_IRQHandler>:
{
 80017b6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80017b8:	f7ff fffc 	bl	80017b4 <HAL_SYSTICK_Callback>
 80017bc:	bd08      	pop	{r3, pc}
	...

080017c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017c2:	b350      	cbz	r0, 800181a <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017c4:	2214      	movs	r2, #20
 80017c6:	6801      	ldr	r1, [r0, #0]
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017ca:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 80017d8:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80017da:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80017dc:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017de:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80017e2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ea:	4323      	orrs	r3, r4
 80017ec:	6904      	ldr	r4, [r0, #16]
 80017ee:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	6944      	ldr	r4, [r0, #20]
 80017f2:	4323      	orrs	r3, r4
 80017f4:	6984      	ldr	r4, [r0, #24]
 80017f6:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f8:	69c4      	ldr	r4, [r0, #28]
 80017fa:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80017fc:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017fe:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001800:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001802:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001804:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8001808:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800180a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800180c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800180e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001810:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001812:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001816:	4618      	mov	r0, r3
 8001818:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
}
 800181c:	bd10      	pop	{r4, pc}
 800181e:	bf00      	nop
 8001820:	bffdfff8 	.word	0xbffdfff8
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800182a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800182e:	2c01      	cmp	r4, #1
 8001830:	d035      	beq.n	800189e <HAL_DMA_Start_IT+0x76>
 8001832:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001834:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001838:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800183c:	42a5      	cmp	r5, r4
 800183e:	f04f 0600 	mov.w	r6, #0
 8001842:	f04f 0402 	mov.w	r4, #2
 8001846:	d128      	bne.n	800189a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001848:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800184c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001850:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001852:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001854:	f026 0601 	bic.w	r6, r6, #1
 8001858:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800185a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800185c:	40bd      	lsls	r5, r7
 800185e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001860:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001862:	6843      	ldr	r3, [r0, #4]
 8001864:	6805      	ldr	r5, [r0, #0]
 8001866:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001868:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800186a:	bf0b      	itete	eq
 800186c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800186e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001870:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001872:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001874:	b14b      	cbz	r3, 800188a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800187c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800187e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001880:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	602b      	str	r3, [r5, #0]
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	f043 030a 	orr.w	r3, r3, #10
 8001898:	e7f0      	b.n	800187c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800189a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800189e:	2002      	movs	r0, #2
}
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080018a4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018a4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80018a8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	2304      	movs	r3, #4
 80018b0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80018b2:	2001      	movs	r0, #1
 80018b4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b6:	6803      	ldr	r3, [r0, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f022 020e 	bic.w	r2, r2, #14
 80018be:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_DMA_Abort_IT+0x88>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d01f      	beq.n	800190e <HAL_DMA_Abort_IT+0x6a>
 80018ce:	3214      	adds	r2, #20
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d01e      	beq.n	8001912 <HAL_DMA_Abort_IT+0x6e>
 80018d4:	3214      	adds	r2, #20
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01d      	beq.n	8001916 <HAL_DMA_Abort_IT+0x72>
 80018da:	3214      	adds	r2, #20
 80018dc:	4293      	cmp	r3, r2
 80018de:	d01d      	beq.n	800191c <HAL_DMA_Abort_IT+0x78>
 80018e0:	3214      	adds	r2, #20
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01d      	beq.n	8001922 <HAL_DMA_Abort_IT+0x7e>
 80018e6:	3214      	adds	r2, #20
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf0c      	ite	eq
 80018ec:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80018f0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80018f6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018f8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001900:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001902:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001906:	b17b      	cbz	r3, 8001928 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001908:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800190a:	4620      	mov	r0, r4
 800190c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800190e:	2301      	movs	r3, #1
 8001910:	e7f0      	b.n	80018f4 <HAL_DMA_Abort_IT+0x50>
 8001912:	2310      	movs	r3, #16
 8001914:	e7ee      	b.n	80018f4 <HAL_DMA_Abort_IT+0x50>
 8001916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191a:	e7eb      	b.n	80018f4 <HAL_DMA_Abort_IT+0x50>
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	e7e8      	b.n	80018f4 <HAL_DMA_Abort_IT+0x50>
 8001922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001926:	e7e5      	b.n	80018f4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	4618      	mov	r0, r3
}
 800192a:	bd10      	pop	{r4, pc}
 800192c:	40020008 	.word	0x40020008
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_DMA_IRQHandler>:
{
 8001934:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001936:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001938:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800193a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800193c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800193e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001940:	4095      	lsls	r5, r2
 8001942:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001944:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001946:	d032      	beq.n	80019ae <HAL_DMA_IRQHandler+0x7a>
 8001948:	074d      	lsls	r5, r1, #29
 800194a:	d530      	bpl.n	80019ae <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001950:	bf5e      	ittt	pl
 8001952:	681a      	ldrpl	r2, [r3, #0]
 8001954:	f022 0204 	bicpl.w	r2, r2, #4
 8001958:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800195a:	4a3e      	ldr	r2, [pc, #248]	; (8001a54 <HAL_DMA_IRQHandler+0x120>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d019      	beq.n	8001994 <HAL_DMA_IRQHandler+0x60>
 8001960:	3214      	adds	r2, #20
 8001962:	4293      	cmp	r3, r2
 8001964:	d018      	beq.n	8001998 <HAL_DMA_IRQHandler+0x64>
 8001966:	3214      	adds	r2, #20
 8001968:	4293      	cmp	r3, r2
 800196a:	d017      	beq.n	800199c <HAL_DMA_IRQHandler+0x68>
 800196c:	3214      	adds	r2, #20
 800196e:	4293      	cmp	r3, r2
 8001970:	d017      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x6e>
 8001972:	3214      	adds	r2, #20
 8001974:	4293      	cmp	r3, r2
 8001976:	d017      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x74>
 8001978:	3214      	adds	r2, #20
 800197a:	4293      	cmp	r3, r2
 800197c:	bf0c      	ite	eq
 800197e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001982:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001986:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <HAL_DMA_IRQHandler+0x124>)
 8001988:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800198a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800198c:	2b00      	cmp	r3, #0
 800198e:	d05e      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x11a>
}
 8001990:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001992:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001994:	2304      	movs	r3, #4
 8001996:	e7f6      	b.n	8001986 <HAL_DMA_IRQHandler+0x52>
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	e7f4      	b.n	8001986 <HAL_DMA_IRQHandler+0x52>
 800199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a0:	e7f1      	b.n	8001986 <HAL_DMA_IRQHandler+0x52>
 80019a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a6:	e7ee      	b.n	8001986 <HAL_DMA_IRQHandler+0x52>
 80019a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019ac:	e7eb      	b.n	8001986 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019ae:	2502      	movs	r5, #2
 80019b0:	4095      	lsls	r5, r2
 80019b2:	4225      	tst	r5, r4
 80019b4:	d035      	beq.n	8001a22 <HAL_DMA_IRQHandler+0xee>
 80019b6:	078d      	lsls	r5, r1, #30
 80019b8:	d533      	bpl.n	8001a22 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	0694      	lsls	r4, r2, #26
 80019be:	d406      	bmi.n	80019ce <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f022 020a 	bic.w	r2, r2, #10
 80019c6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80019c8:	2201      	movs	r2, #1
 80019ca:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <HAL_DMA_IRQHandler+0x120>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d019      	beq.n	8001a08 <HAL_DMA_IRQHandler+0xd4>
 80019d4:	3214      	adds	r2, #20
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d018      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xd8>
 80019da:	3214      	adds	r2, #20
 80019dc:	4293      	cmp	r3, r2
 80019de:	d017      	beq.n	8001a10 <HAL_DMA_IRQHandler+0xdc>
 80019e0:	3214      	adds	r2, #20
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d017      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xe2>
 80019e6:	3214      	adds	r2, #20
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d017      	beq.n	8001a1c <HAL_DMA_IRQHandler+0xe8>
 80019ec:	3214      	adds	r2, #20
 80019ee:	4293      	cmp	r3, r2
 80019f0:	bf0c      	ite	eq
 80019f2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80019f6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_DMA_IRQHandler+0x124>)
 80019fc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80019fe:	2300      	movs	r3, #0
 8001a00:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001a04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a06:	e7c1      	b.n	800198c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e7f6      	b.n	80019fa <HAL_DMA_IRQHandler+0xc6>
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	e7f4      	b.n	80019fa <HAL_DMA_IRQHandler+0xc6>
 8001a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a14:	e7f1      	b.n	80019fa <HAL_DMA_IRQHandler+0xc6>
 8001a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1a:	e7ee      	b.n	80019fa <HAL_DMA_IRQHandler+0xc6>
 8001a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a20:	e7eb      	b.n	80019fa <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a22:	2508      	movs	r5, #8
 8001a24:	4095      	lsls	r5, r2
 8001a26:	4225      	tst	r5, r4
 8001a28:	d011      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x11a>
 8001a2a:	0709      	lsls	r1, r1, #28
 8001a2c:	d50f      	bpl.n	8001a4e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	f021 010e 	bic.w	r1, r1, #14
 8001a34:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a36:	2301      	movs	r3, #1
 8001a38:	fa03 f202 	lsl.w	r2, r3, r2
 8001a3c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a3e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001a40:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001a44:	2300      	movs	r3, #0
 8001a46:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001a4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a4c:	e79e      	b.n	800198c <HAL_DMA_IRQHandler+0x58>
}
 8001a4e:	bc70      	pop	{r4, r5, r6}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40020008 	.word	0x40020008
 8001a58:	40020000 	.word	0x40020000

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001a60:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	4616      	mov	r6, r2
 8001a64:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a66:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001c0c <HAL_GPIO_Init+0x1b0>
 8001a6a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001c10 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001a6e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001a74:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a78:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001a7c:	45a0      	cmp	r8, r4
 8001a7e:	d17f      	bne.n	8001b80 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001a80:	684d      	ldr	r5, [r1, #4]
 8001a82:	2d12      	cmp	r5, #18
 8001a84:	f000 80af 	beq.w	8001be6 <HAL_GPIO_Init+0x18a>
 8001a88:	f200 8088 	bhi.w	8001b9c <HAL_GPIO_Init+0x140>
 8001a8c:	2d02      	cmp	r5, #2
 8001a8e:	f000 80a7 	beq.w	8001be0 <HAL_GPIO_Init+0x184>
 8001a92:	d87c      	bhi.n	8001b8e <HAL_GPIO_Init+0x132>
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	f000 808e 	beq.w	8001bb6 <HAL_GPIO_Init+0x15a>
 8001a9a:	2d01      	cmp	r5, #1
 8001a9c:	f000 809e 	beq.w	8001bdc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa4:	2cff      	cmp	r4, #255	; 0xff
 8001aa6:	bf93      	iteet	ls
 8001aa8:	4682      	movls	sl, r0
 8001aaa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001aae:	3d08      	subhi	r5, #8
 8001ab0:	f8d0 b000 	ldrls.w	fp, [r0]
 8001ab4:	bf92      	itee	ls
 8001ab6:	00b5      	lslls	r5, r6, #2
 8001ab8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001abc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001abe:	fa09 f805 	lsl.w	r8, r9, r5
 8001ac2:	ea2b 0808 	bic.w	r8, fp, r8
 8001ac6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aca:	bf88      	it	hi
 8001acc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad0:	ea48 0505 	orr.w	r5, r8, r5
 8001ad4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001adc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001ae0:	d04e      	beq.n	8001b80 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae2:	4d47      	ldr	r5, [pc, #284]	; (8001c00 <HAL_GPIO_Init+0x1a4>)
 8001ae4:	4f46      	ldr	r7, [pc, #280]	; (8001c00 <HAL_GPIO_Init+0x1a4>)
 8001ae6:	69ad      	ldr	r5, [r5, #24]
 8001ae8:	f026 0803 	bic.w	r8, r6, #3
 8001aec:	f045 0501 	orr.w	r5, r5, #1
 8001af0:	61bd      	str	r5, [r7, #24]
 8001af2:	69bd      	ldr	r5, [r7, #24]
 8001af4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001af8:	f005 0501 	and.w	r5, r5, #1
 8001afc:	9501      	str	r5, [sp, #4]
 8001afe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001b02:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b06:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001b08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001b0c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001b10:	fa09 f90b 	lsl.w	r9, r9, fp
 8001b14:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b18:	4d3a      	ldr	r5, [pc, #232]	; (8001c04 <HAL_GPIO_Init+0x1a8>)
 8001b1a:	42a8      	cmp	r0, r5
 8001b1c:	d068      	beq.n	8001bf0 <HAL_GPIO_Init+0x194>
 8001b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b22:	42a8      	cmp	r0, r5
 8001b24:	d066      	beq.n	8001bf4 <HAL_GPIO_Init+0x198>
 8001b26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b2a:	42a8      	cmp	r0, r5
 8001b2c:	d064      	beq.n	8001bf8 <HAL_GPIO_Init+0x19c>
 8001b2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b32:	42a8      	cmp	r0, r5
 8001b34:	bf0c      	ite	eq
 8001b36:	2503      	moveq	r5, #3
 8001b38:	2504      	movne	r5, #4
 8001b3a:	fa05 f50b 	lsl.w	r5, r5, fp
 8001b3e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001b42:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b46:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b48:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4c:	bf14      	ite	ne
 8001b4e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b50:	43a5      	biceq	r5, r4
 8001b52:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b54:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b56:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b5a:	bf14      	ite	ne
 8001b5c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5e:	43a5      	biceq	r5, r4
 8001b60:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b62:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b64:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b68:	bf14      	ite	ne
 8001b6a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6c:	43a5      	biceq	r5, r4
 8001b6e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b70:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b72:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b76:	bf14      	ite	ne
 8001b78:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b7a:	ea25 0404 	biceq.w	r4, r5, r4
 8001b7e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001b80:	3601      	adds	r6, #1
 8001b82:	2e10      	cmp	r6, #16
 8001b84:	f47f af73 	bne.w	8001a6e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001b88:	b003      	add	sp, #12
 8001b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001b8e:	2d03      	cmp	r5, #3
 8001b90:	d022      	beq.n	8001bd8 <HAL_GPIO_Init+0x17c>
 8001b92:	2d11      	cmp	r5, #17
 8001b94:	d184      	bne.n	8001aa0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b96:	68ca      	ldr	r2, [r1, #12]
 8001b98:	3204      	adds	r2, #4
          break;
 8001b9a:	e781      	b.n	8001aa0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001b9c:	4f1a      	ldr	r7, [pc, #104]	; (8001c08 <HAL_GPIO_Init+0x1ac>)
 8001b9e:	42bd      	cmp	r5, r7
 8001ba0:	d009      	beq.n	8001bb6 <HAL_GPIO_Init+0x15a>
 8001ba2:	d812      	bhi.n	8001bca <HAL_GPIO_Init+0x16e>
 8001ba4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001c14 <HAL_GPIO_Init+0x1b8>
 8001ba8:	454d      	cmp	r5, r9
 8001baa:	d004      	beq.n	8001bb6 <HAL_GPIO_Init+0x15a>
 8001bac:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001bb0:	454d      	cmp	r5, r9
 8001bb2:	f47f af75 	bne.w	8001aa0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bb6:	688a      	ldr	r2, [r1, #8]
 8001bb8:	b1c2      	cbz	r2, 8001bec <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bba:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001bbc:	bf0c      	ite	eq
 8001bbe:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001bc2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	e76a      	b.n	8001aa0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001bca:	4575      	cmp	r5, lr
 8001bcc:	d0f3      	beq.n	8001bb6 <HAL_GPIO_Init+0x15a>
 8001bce:	4565      	cmp	r5, ip
 8001bd0:	d0f1      	beq.n	8001bb6 <HAL_GPIO_Init+0x15a>
 8001bd2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001c18 <HAL_GPIO_Init+0x1bc>
 8001bd6:	e7eb      	b.n	8001bb0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bd8:	2200      	movs	r2, #0
 8001bda:	e761      	b.n	8001aa0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bdc:	68ca      	ldr	r2, [r1, #12]
          break;
 8001bde:	e75f      	b.n	8001aa0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be0:	68ca      	ldr	r2, [r1, #12]
 8001be2:	3208      	adds	r2, #8
          break;
 8001be4:	e75c      	b.n	8001aa0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be6:	68ca      	ldr	r2, [r1, #12]
 8001be8:	320c      	adds	r2, #12
          break;
 8001bea:	e759      	b.n	8001aa0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bec:	2204      	movs	r2, #4
 8001bee:	e757      	b.n	8001aa0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	e7a2      	b.n	8001b3a <HAL_GPIO_Init+0xde>
 8001bf4:	2501      	movs	r5, #1
 8001bf6:	e7a0      	b.n	8001b3a <HAL_GPIO_Init+0xde>
 8001bf8:	2502      	movs	r5, #2
 8001bfa:	e79e      	b.n	8001b3a <HAL_GPIO_Init+0xde>
 8001bfc:	40010400 	.word	0x40010400
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	10210000 	.word	0x10210000
 8001c0c:	10310000 	.word	0x10310000
 8001c10:	10320000 	.word	0x10320000
 8001c14:	10110000 	.word	0x10110000
 8001c18:	10220000 	.word	0x10220000

08001c1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c1c:	b10a      	cbz	r2, 8001c22 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1e:	6101      	str	r1, [r0, #16]
 8001c20:	4770      	bx	lr
 8001c22:	0409      	lsls	r1, r1, #16
 8001c24:	e7fb      	b.n	8001c1e <HAL_GPIO_WritePin+0x2>

08001c26 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c26:	6802      	ldr	r2, [r0, #0]
 8001c28:	6953      	ldr	r3, [r2, #20]
 8001c2a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001c2e:	d00d      	beq.n	8001c4c <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c30:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001c34:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c36:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001c38:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c3a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001c44:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001c48:	2001      	movs	r0, #1
 8001c4a:	4770      	bx	lr
  }
  return HAL_OK;
 8001c4c:	4618      	mov	r0, r3
}
 8001c4e:	4770      	bx	lr

08001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c54:	4604      	mov	r4, r0
 8001c56:	4617      	mov	r7, r2
 8001c58:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c5a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001c5e:	b28e      	uxth	r6, r1
 8001c60:	6825      	ldr	r5, [r4, #0]
 8001c62:	f1b8 0f01 	cmp.w	r8, #1
 8001c66:	bf0c      	ite	eq
 8001c68:	696b      	ldreq	r3, [r5, #20]
 8001c6a:	69ab      	ldrne	r3, [r5, #24]
 8001c6c:	ea36 0303 	bics.w	r3, r6, r3
 8001c70:	bf14      	ite	ne
 8001c72:	2001      	movne	r0, #1
 8001c74:	2000      	moveq	r0, #0
 8001c76:	b908      	cbnz	r0, 8001c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c7c:	696b      	ldr	r3, [r5, #20]
 8001c7e:	055a      	lsls	r2, r3, #21
 8001c80:	d512      	bpl.n	8001ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c82:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001c84:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c8c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001c90:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c92:	2304      	movs	r3, #4
 8001c94:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c96:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c9a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001c9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001ca0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ca8:	1c7b      	adds	r3, r7, #1
 8001caa:	d0d9      	beq.n	8001c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cac:	b94f      	cbnz	r7, 8001cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cae:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001cb0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cb2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001cb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001cb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cc2:	f7ff f8ef 	bl	8000ea4 <HAL_GetTick>
 8001cc6:	eba0 0009 	sub.w	r0, r0, r9
 8001cca:	4287      	cmp	r7, r0
 8001ccc:	d2c8      	bcs.n	8001c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001cce:	e7ee      	b.n	8001cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001cd0 <I2C_WaitOnFlagUntilTimeout>:
{
 8001cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	4690      	mov	r8, r2
 8001cd8:	461f      	mov	r7, r3
 8001cda:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001cdc:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001ce0:	b28d      	uxth	r5, r1
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f1b9 0f01 	cmp.w	r9, #1
 8001ce8:	bf0c      	ite	eq
 8001cea:	695b      	ldreq	r3, [r3, #20]
 8001cec:	699b      	ldrne	r3, [r3, #24]
 8001cee:	ea35 0303 	bics.w	r3, r5, r3
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	4543      	cmp	r3, r8
 8001cfa:	d002      	beq.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001cfc:	2000      	movs	r0, #0
}
 8001cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001d02:	1c7b      	adds	r3, r7, #1
 8001d04:	d0ed      	beq.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001d06:	b95f      	cbnz	r7, 8001d20 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d08:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001d0a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d0c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001d0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001d12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001d16:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001d20:	f7ff f8c0 	bl	8000ea4 <HAL_GetTick>
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	4287      	cmp	r7, r0
 8001d28:	d2db      	bcs.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001d2a:	e7ed      	b.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0x38>

08001d2c <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	4604      	mov	r4, r0
 8001d30:	460d      	mov	r5, r1
 8001d32:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	d501      	bpl.n	8001d40 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ff70 	bl	8001c26 <I2C_IsAcknowledgeFailed>
 8001d46:	b9a8      	cbnz	r0, 8001d74 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001d48:	1c6a      	adds	r2, r5, #1
 8001d4a:	d0f3      	beq.n	8001d34 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d4c:	b965      	cbnz	r5, 8001d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001d50:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d58:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001d5a:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d5c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001d5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001d62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d68:	f7ff f89c 	bl	8000ea4 <HAL_GetTick>
 8001d6c:	1b80      	subs	r0, r0, r6
 8001d6e:	4285      	cmp	r5, r0
 8001d70:	d2e0      	bcs.n	8001d34 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001d72:	e7ec      	b.n	8001d4e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001d74:	2001      	movs	r0, #1
}
 8001d76:	bd70      	pop	{r4, r5, r6, pc}

08001d78 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	460d      	mov	r5, r1
 8001d7e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d80:	6820      	ldr	r0, [r4, #0]
 8001d82:	6943      	ldr	r3, [r0, #20]
 8001d84:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001d88:	d001      	beq.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001d8a:	2000      	movs	r0, #0
}
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d8e:	6942      	ldr	r2, [r0, #20]
 8001d90:	06d2      	lsls	r2, r2, #27
 8001d92:	d50b      	bpl.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d94:	f06f 0210 	mvn.w	r2, #16
 8001d98:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001d9a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001d9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001da6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dac:	b95d      	cbnz	r5, 8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001db0:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db2:	f043 0320 	orr.w	r3, r3, #32
 8001db6:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001db8:	2320      	movs	r3, #32
 8001dba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dc6:	f7ff f86d 	bl	8000ea4 <HAL_GetTick>
 8001dca:	1b80      	subs	r0, r0, r6
 8001dcc:	4285      	cmp	r5, r0
 8001dce:	d2d7      	bcs.n	8001d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001dd0:	e7ed      	b.n	8001dae <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001dd2:	b570      	push	{r4, r5, r6, lr}
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	460d      	mov	r5, r1
 8001dd8:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	075b      	lsls	r3, r3, #29
 8001de0:	d501      	bpl.n	8001de6 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001de2:	2000      	movs	r0, #0
 8001de4:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff ff1d 	bl	8001c26 <I2C_IsAcknowledgeFailed>
 8001dec:	b9a8      	cbnz	r0, 8001e1a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001dee:	1c6a      	adds	r2, r5, #1
 8001df0:	d0f3      	beq.n	8001dda <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001df2:	b965      	cbnz	r5, 8001e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001df6:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001dfe:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001e00:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e02:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001e04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001e08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e0e:	f7ff f849 	bl	8000ea4 <HAL_GetTick>
 8001e12:	1b80      	subs	r0, r0, r6
 8001e14:	4285      	cmp	r5, r0
 8001e16:	d2e0      	bcs.n	8001dda <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001e18:	e7ec      	b.n	8001df4 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e20 <HAL_I2C_Init>:
{
 8001e20:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001e22:	4604      	mov	r4, r0
 8001e24:	b908      	cbnz	r0, 8001e2a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001e2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e32:	b91b      	cbnz	r3, 8001e3c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001e34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001e38:	f001 fae6 	bl	8003408 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001e3e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001e44:	6813      	ldr	r3, [r2, #0]
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e4c:	f000 fd32 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e50:	6863      	ldr	r3, [r4, #4]
 8001e52:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <HAL_I2C_Init+0xf0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d830      	bhi.n	8001eba <HAL_I2C_Init+0x9a>
 8001e58:	4a2e      	ldr	r2, [pc, #184]	; (8001f14 <HAL_I2C_Init+0xf4>)
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d9e3      	bls.n	8001e26 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5e:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001e60:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001e62:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001e66:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001e68:	3201      	adds	r2, #1
 8001e6a:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_I2C_Init+0xf0>)
 8001e6e:	3801      	subs	r0, #1
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d832      	bhi.n	8001eda <HAL_I2C_Init+0xba>
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e7a:	1c43      	adds	r3, r0, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	bf38      	it	cc
 8001e84:	2304      	movcc	r3, #4
 8001e86:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e88:	6a22      	ldr	r2, [r4, #32]
 8001e8a:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8c:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001e92:	68e2      	ldr	r2, [r4, #12]
 8001e94:	6923      	ldr	r3, [r4, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001e9a:	69a2      	ldr	r2, [r4, #24]
 8001e9c:	6963      	ldr	r3, [r4, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001ea2:	680b      	ldr	r3, [r1, #0]
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001eb8:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_I2C_Init+0xfc>)
 8001ebc:	4290      	cmp	r0, r2
 8001ebe:	d9b2      	bls.n	8001e26 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec0:	4d15      	ldr	r5, [pc, #84]	; (8001f18 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001eca:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ecc:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001ece:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ed0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001ed4:	fbb2 f2f5 	udiv	r2, r2, r5
 8001ed8:	e7c6      	b.n	8001e68 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001eda:	68a2      	ldr	r2, [r4, #8]
 8001edc:	b952      	cbnz	r2, 8001ef4 <HAL_I2C_Init+0xd4>
 8001ede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ee2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ee6:	1c43      	adds	r3, r0, #1
 8001ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eec:	b16b      	cbz	r3, 8001f0a <HAL_I2C_Init+0xea>
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef2:	e7c8      	b.n	8001e86 <HAL_I2C_Init+0x66>
 8001ef4:	2219      	movs	r2, #25
 8001ef6:	4353      	muls	r3, r2
 8001ef8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	b113      	cbz	r3, 8001f0a <HAL_I2C_Init+0xea>
 8001f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f08:	e7bd      	b.n	8001e86 <HAL_I2C_Init+0x66>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e7bb      	b.n	8001e86 <HAL_I2C_Init+0x66>
 8001f0e:	bf00      	nop
 8001f10:	000186a0 	.word	0x000186a0
 8001f14:	001e847f 	.word	0x001e847f
 8001f18:	000f4240 	.word	0x000f4240
 8001f1c:	003d08ff 	.word	0x003d08ff

08001f20 <HAL_I2C_Master_Transmit>:
{
 8001f20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001f24:	4604      	mov	r4, r0
 8001f26:	461f      	mov	r7, r3
 8001f28:	460d      	mov	r5, r1
 8001f2a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001f2c:	f7fe ffba 	bl	8000ea4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f30:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001f34:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d004      	beq.n	8001f44 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001f3a:	2502      	movs	r5, #2
}
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	b004      	add	sp, #16
 8001f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f44:	9000      	str	r0, [sp, #0]
 8001f46:	2319      	movs	r3, #25
 8001f48:	2201      	movs	r2, #1
 8001f4a:	495d      	ldr	r1, [pc, #372]	; (80020c0 <HAL_I2C_Master_Transmit+0x1a0>)
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f7ff febf 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	d1f1      	bne.n	8001f3a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001f56:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d0ed      	beq.n	8001f3a <HAL_I2C_Master_Transmit+0x1a>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001f6a:	bf5e      	ittt	pl
 8001f6c:	681a      	ldrpl	r2, [r3, #0]
 8001f6e:	f042 0201 	orrpl.w	r2, r2, #1
 8001f72:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f7c:	2221      	movs	r2, #33	; 0x21
 8001f7e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f82:	2210      	movs	r2, #16
 8001f84:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f88:	2200      	movs	r2, #0
 8001f8a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f8c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001f90:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f92:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001f94:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001f96:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001f9a:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f9e:	2a04      	cmp	r2, #4
 8001fa0:	d004      	beq.n	8001fac <HAL_I2C_Master_Transmit+0x8c>
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d002      	beq.n	8001fac <HAL_I2C_Master_Transmit+0x8c>
 8001fa6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001faa:	d104      	bne.n	8001fb6 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e002      	b.n	8001fbc <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fb8:	2a12      	cmp	r2, #18
 8001fba:	d0f7      	beq.n	8001fac <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fbc:	9600      	str	r6, [sp, #0]
 8001fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff fe82 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	bb28      	cbnz	r0, 800201a <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fce:	6923      	ldr	r3, [r4, #16]
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fd6:	d112      	bne.n	8001ffe <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fd8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001fdc:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fde:	4633      	mov	r3, r6
 8001fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fe2:	4938      	ldr	r1, [pc, #224]	; (80020c4 <HAL_I2C_Master_Transmit+0x1a4>)
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff fe33 	bl	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fea:	4605      	mov	r5, r0
 8001fec:	b9a0      	cbnz	r0, 8002018 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	9003      	str	r0, [sp, #12]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	9203      	str	r2, [sp, #12]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	9303      	str	r3, [sp, #12]
 8001ffa:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001ffc:	e050      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ffe:	11eb      	asrs	r3, r5, #7
 8002000:	f003 0306 	and.w	r3, r3, #6
 8002004:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002008:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800200a:	492f      	ldr	r1, [pc, #188]	; (80020c8 <HAL_I2C_Master_Transmit+0x1a8>)
 800200c:	4633      	mov	r3, r6
 800200e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff fe1d 	bl	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002016:	b148      	cbz	r0, 800202c <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002018:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800201c:	2b04      	cmp	r3, #4
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8002024:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002028:	2501      	movs	r5, #1
 800202a:	e787      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	b2ed      	uxtb	r5, r5
 8002030:	611d      	str	r5, [r3, #16]
 8002032:	e7d4      	b.n	8001fde <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8002034:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002038:	2503      	movs	r5, #3
 800203a:	e77f      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203c:	4632      	mov	r2, r6
 800203e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002040:	4620      	mov	r0, r4
 8002042:	f7ff fe73 	bl	8001d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002046:	b140      	cbz	r0, 800205a <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800204a:	2b04      	cmp	r3, #4
 800204c:	d1f4      	bne.n	8002038 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e7e6      	b.n	8002028 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800205a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800205c:	6820      	ldr	r0, [r4, #0]
 800205e:	1c4b      	adds	r3, r1, #1
 8002060:	6263      	str	r3, [r4, #36]	; 0x24
 8002062:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8002064:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002066:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8002068:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800206a:	3b01      	subs	r3, #1
 800206c:	b29b      	uxth	r3, r3
 800206e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002070:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8002072:	1e53      	subs	r3, r2, #1
 8002074:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002076:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002078:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800207a:	d50a      	bpl.n	8002092 <HAL_I2C_Master_Transmit+0x172>
 800207c:	b14b      	cbz	r3, 8002092 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800207e:	1c8b      	adds	r3, r1, #2
 8002080:	6263      	str	r3, [r4, #36]	; 0x24
 8002082:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8002084:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002086:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8002088:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800208a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800208c:	3b01      	subs	r3, #1
 800208e:	b29b      	uxth	r3, r3
 8002090:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002092:	4632      	mov	r2, r6
 8002094:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002096:	4620      	mov	r0, r4
 8002098:	f7ff fe9b 	bl	8001dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800209c:	2800      	cmp	r0, #0
 800209e:	d1d3      	bne.n	8002048 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80020a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ca      	bne.n	800203c <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020a6:	6821      	ldr	r1, [r4, #0]
 80020a8:	680a      	ldr	r2, [r1, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80020b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80020be:	e73d      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x1c>
 80020c0:	00100002 	.word	0x00100002
 80020c4:	00010002 	.word	0x00010002
 80020c8:	00010008 	.word	0x00010008

080020cc <HAL_I2C_Master_Receive>:
{
 80020cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020d0:	4604      	mov	r4, r0
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	4698      	mov	r8, r3
 80020d6:	460d      	mov	r5, r1
 80020d8:	4691      	mov	r9, r2
 80020da:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80020dc:	f7fe fee2 	bl	8000ea4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80020e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80020e4:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d004      	beq.n	80020f4 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80020ea:	2502      	movs	r5, #2
}
 80020ec:	4628      	mov	r0, r5
 80020ee:	b009      	add	sp, #36	; 0x24
 80020f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f4:	9000      	str	r0, [sp, #0]
 80020f6:	2319      	movs	r3, #25
 80020f8:	2201      	movs	r2, #1
 80020fa:	49a2      	ldr	r1, [pc, #648]	; (8002384 <HAL_I2C_Master_Receive+0x2b8>)
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff fde7 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8002102:	2800      	cmp	r0, #0
 8002104:	d1f1      	bne.n	80020ea <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8002106:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d0ed      	beq.n	80020ea <HAL_I2C_Master_Receive+0x1e>
 800210e:	2301      	movs	r3, #1
 8002110:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800211a:	bf5e      	ittt	pl
 800211c:	681a      	ldrpl	r2, [r3, #0]
 800211e:	f042 0201 	orrpl.w	r2, r2, #1
 8002122:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800212c:	2222      	movs	r2, #34	; 0x22
 800212e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002132:	2210      	movs	r2, #16
 8002134:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002138:	2200      	movs	r2, #0
 800213a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8002140:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002144:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002146:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002148:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800214c:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800214e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002150:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002152:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002154:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002158:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800215a:	d004      	beq.n	8002166 <HAL_I2C_Master_Receive+0x9a>
 800215c:	2a01      	cmp	r2, #1
 800215e:	d002      	beq.n	8002166 <HAL_I2C_Master_Receive+0x9a>
 8002160:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002164:	d104      	bne.n	8002170 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e002      	b.n	8002176 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002170:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002172:	2a11      	cmp	r2, #17
 8002174:	d0f7      	beq.n	8002166 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002176:	9600      	str	r6, [sp, #0]
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff fda5 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8002186:	2800      	cmp	r0, #0
 8002188:	d14d      	bne.n	8002226 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218a:	6923      	ldr	r3, [r4, #16]
 800218c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	d139      	bne.n	8002208 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002194:	f045 0501 	orr.w	r5, r5, #1
 8002198:	b2ed      	uxtb	r5, r5
 800219a:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800219c:	4633      	mov	r3, r6
 800219e:	463a      	mov	r2, r7
 80021a0:	4979      	ldr	r1, [pc, #484]	; (8002388 <HAL_I2C_Master_Receive+0x2bc>)
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff fd54 	bl	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a8:	4605      	mov	r5, r0
 80021aa:	2800      	cmp	r0, #0
 80021ac:	d13a      	bne.n	8002224 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80021ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d069      	beq.n	800228a <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80021b6:	2a01      	cmp	r2, #1
 80021b8:	d17a      	bne.n	80022b0 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	9504      	str	r5, [sp, #16]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	9204      	str	r2, [sp, #16]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	9204      	str	r2, [sp, #16]
 80021d0:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021da:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002390 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 80021e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d05b      	beq.n	800229e <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	f200 80d4 	bhi.w	8002394 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d17b      	bne.n	80022e8 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80021f0:	4632      	mov	r2, r6
 80021f2:	4639      	mov	r1, r7
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff fdbf 	bl	8001d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	f000 8093 	beq.w	8002326 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002202:	2b20      	cmp	r3, #32
 8002204:	d116      	bne.n	8002234 <HAL_I2C_Master_Receive+0x168>
 8002206:	e03e      	b.n	8002286 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002208:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800220c:	f008 0806 	and.w	r8, r8, #6
 8002210:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002214:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002216:	495d      	ldr	r1, [pc, #372]	; (800238c <HAL_I2C_Master_Receive+0x2c0>)
 8002218:	4633      	mov	r3, r6
 800221a:	463a      	mov	r2, r7
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff fd17 	bl	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002222:	b148      	cbz	r0, 8002238 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002224:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002228:	2b04      	cmp	r3, #4
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	d128      	bne.n	8002282 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8002230:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8002234:	2501      	movs	r5, #1
 8002236:	e759      	b.n	80020ec <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	b2ed      	uxtb	r5, r5
 800223c:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800223e:	463a      	mov	r2, r7
 8002240:	4633      	mov	r3, r6
 8002242:	4951      	ldr	r1, [pc, #324]	; (8002388 <HAL_I2C_Master_Receive+0x2bc>)
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff fd03 	bl	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800224a:	4602      	mov	r2, r0
 800224c:	2800      	cmp	r0, #0
 800224e:	d1e9      	bne.n	8002224 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	9007      	str	r0, [sp, #28]
 8002254:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002256:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002258:	9107      	str	r1, [sp, #28]
 800225a:	6999      	ldr	r1, [r3, #24]
 800225c:	9107      	str	r1, [sp, #28]
 800225e:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002266:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002268:	9600      	str	r6, [sp, #0]
 800226a:	463b      	mov	r3, r7
 800226c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002270:	f7ff fd2e 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8002274:	2800      	cmp	r0, #0
 8002276:	d1d6      	bne.n	8002226 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002278:	6822      	ldr	r2, [r4, #0]
 800227a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800227e:	6113      	str	r3, [r2, #16]
 8002280:	e78c      	b.n	800219c <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8002282:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8002286:	2503      	movs	r5, #3
 8002288:	e730      	b.n	80020ec <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228a:	9503      	str	r5, [sp, #12]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	9203      	str	r2, [sp, #12]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	9203      	str	r2, [sp, #12]
 8002294:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800229e:	2320      	movs	r3, #32
 80022a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80022aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80022ae:	e71d      	b.n	80020ec <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80022b0:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80022b2:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80022b4:	d10e      	bne.n	80022d4 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022bc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	9505      	str	r5, [sp, #20]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	9205      	str	r2, [sp, #20]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	9205      	str	r2, [sp, #20]
 80022ca:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d2:	e781      	b.n	80021d8 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80022d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022da:	9506      	str	r5, [sp, #24]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	9206      	str	r2, [sp, #24]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	9306      	str	r3, [sp, #24]
 80022e4:	9b06      	ldr	r3, [sp, #24]
 80022e6:	e779      	b.n	80021dc <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 80022e8:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022ea:	9600      	str	r6, [sp, #0]
 80022ec:	463b      	mov	r3, r7
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4641      	mov	r1, r8
 80022f4:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80022f6:	d124      	bne.n	8002342 <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f8:	f7ff fcea 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d1c2      	bne.n	8002286 <HAL_I2C_Master_Receive+0x1ba>
 8002300:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230a:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800230c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	1c51      	adds	r1, r2, #1
 8002312:	6261      	str	r1, [r4, #36]	; 0x24
 8002314:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002316:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002318:	3b01      	subs	r3, #1
 800231a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800231c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800231e:	3b01      	subs	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002324:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	6262      	str	r2, [r4, #36]	; 0x24
 800232c:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800232e:	6912      	ldr	r2, [r2, #16]
 8002330:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002332:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002334:	3b01      	subs	r3, #1
 8002336:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002338:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800233a:	3b01      	subs	r3, #1
 800233c:	b29b      	uxth	r3, r3
 800233e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002340:	e74e      	b.n	80021e0 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002342:	f7ff fcc5 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4602      	mov	r2, r0
 8002348:	2800      	cmp	r0, #0
 800234a:	d19c      	bne.n	8002286 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800234c:	6821      	ldr	r1, [r4, #0]
 800234e:	680b      	ldr	r3, [r1, #0]
 8002350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002354:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002356:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002358:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800235a:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800235c:	1c59      	adds	r1, r3, #1
 800235e:	6261      	str	r1, [r4, #36]	; 0x24
 8002360:	6821      	ldr	r1, [r4, #0]
 8002362:	6909      	ldr	r1, [r1, #16]
 8002364:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8002366:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002368:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800236a:	3b01      	subs	r3, #1
 800236c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800236e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002370:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8002372:	3b01      	subs	r3, #1
 8002374:	b29b      	uxth	r3, r3
 8002376:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002378:	463b      	mov	r3, r7
 800237a:	f7ff fca9 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 800237e:	2800      	cmp	r0, #0
 8002380:	d0bf      	beq.n	8002302 <HAL_I2C_Master_Receive+0x236>
 8002382:	e780      	b.n	8002286 <HAL_I2C_Master_Receive+0x1ba>
 8002384:	00100002 	.word	0x00100002
 8002388:	00010002 	.word	0x00010002
 800238c:	00010008 	.word	0x00010008
 8002390:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002394:	4632      	mov	r2, r6
 8002396:	4639      	mov	r1, r7
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff fced 	bl	8001d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800239e:	2800      	cmp	r0, #0
 80023a0:	f47f af2e 	bne.w	8002200 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	6262      	str	r2, [r4, #36]	; 0x24
 80023aa:	6822      	ldr	r2, [r4, #0]
 80023ac:	6912      	ldr	r2, [r2, #16]
 80023ae:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80023b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023b2:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80023b4:	3b01      	subs	r3, #1
 80023b6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80023b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023c0:	6953      	ldr	r3, [r2, #20]
 80023c2:	075b      	lsls	r3, r3, #29
 80023c4:	f57f af0c 	bpl.w	80021e0 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	6261      	str	r1, [r4, #36]	; 0x24
 80023ce:	e7ae      	b.n	800232e <HAL_I2C_Master_Receive+0x262>

080023d0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d0:	6803      	ldr	r3, [r0, #0]
{
 80023d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	07db      	lsls	r3, r3, #31
{
 80023d8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	d410      	bmi.n	80023fe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	079f      	lsls	r7, r3, #30
 80023e0:	d45e      	bmi.n	80024a0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e2:	682b      	ldr	r3, [r5, #0]
 80023e4:	0719      	lsls	r1, r3, #28
 80023e6:	f100 8095 	bmi.w	8002514 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	075a      	lsls	r2, r3, #29
 80023ee:	f100 80bf 	bmi.w	8002570 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f2:	69ea      	ldr	r2, [r5, #28]
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	f040 812d 	bne.w	8002654 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80023fa:	2000      	movs	r0, #0
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023fe:	4c90      	ldr	r4, [pc, #576]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 8002400:	6863      	ldr	r3, [r4, #4]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d007      	beq.n	800241a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800240a:	6863      	ldr	r3, [r4, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d10c      	bne.n	800242e <HAL_RCC_OscConfig+0x5e>
 8002414:	6863      	ldr	r3, [r4, #4]
 8002416:	03de      	lsls	r6, r3, #15
 8002418:	d509      	bpl.n	800242e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	039c      	lsls	r4, r3, #14
 800241e:	d5dd      	bpl.n	80023dc <HAL_RCC_OscConfig+0xc>
 8002420:	686b      	ldr	r3, [r5, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1da      	bne.n	80023dc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002426:	2001      	movs	r0, #1
}
 8002428:	b002      	add	sp, #8
 800242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242e:	686b      	ldr	r3, [r5, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d110      	bne.n	8002458 <HAL_RCC_OscConfig+0x88>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800243e:	f7fe fd31 	bl	8000ea4 <HAL_GetTick>
 8002442:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	0398      	lsls	r0, r3, #14
 8002448:	d4c8      	bmi.n	80023dc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244a:	f7fe fd2b 	bl	8000ea4 <HAL_GetTick>
 800244e:	1b80      	subs	r0, r0, r6
 8002450:	2864      	cmp	r0, #100	; 0x64
 8002452:	d9f7      	bls.n	8002444 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002454:	2003      	movs	r0, #3
 8002456:	e7e7      	b.n	8002428 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	b99b      	cbnz	r3, 8002482 <HAL_RCC_OscConfig+0xb2>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800246a:	f7fe fd1b 	bl	8000ea4 <HAL_GetTick>
 800246e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	0399      	lsls	r1, r3, #14
 8002474:	d5b2      	bpl.n	80023dc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002476:	f7fe fd15 	bl	8000ea4 <HAL_GetTick>
 800247a:	1b80      	subs	r0, r0, r6
 800247c:	2864      	cmp	r0, #100	; 0x64
 800247e:	d9f7      	bls.n	8002470 <HAL_RCC_OscConfig+0xa0>
 8002480:	e7e8      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	d103      	bne.n	8002492 <HAL_RCC_OscConfig+0xc2>
 800248a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800248e:	6023      	str	r3, [r4, #0]
 8002490:	e7d1      	b.n	8002436 <HAL_RCC_OscConfig+0x66>
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6023      	str	r3, [r4, #0]
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	e7cd      	b.n	800243c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024a0:	4c67      	ldr	r4, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	f013 0f0c 	tst.w	r3, #12
 80024a8:	d007      	beq.n	80024ba <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d110      	bne.n	80024d6 <HAL_RCC_OscConfig+0x106>
 80024b4:	6863      	ldr	r3, [r4, #4]
 80024b6:	03da      	lsls	r2, r3, #15
 80024b8:	d40d      	bmi.n	80024d6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	079b      	lsls	r3, r3, #30
 80024be:	d502      	bpl.n	80024c6 <HAL_RCC_OscConfig+0xf6>
 80024c0:	692b      	ldr	r3, [r5, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d1af      	bne.n	8002426 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	696a      	ldr	r2, [r5, #20]
 80024ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80024d2:	6023      	str	r3, [r4, #0]
 80024d4:	e785      	b.n	80023e2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d6:	692a      	ldr	r2, [r5, #16]
 80024d8:	4b5a      	ldr	r3, [pc, #360]	; (8002644 <HAL_RCC_OscConfig+0x274>)
 80024da:	b16a      	cbz	r2, 80024f8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024e0:	f7fe fce0 	bl	8000ea4 <HAL_GetTick>
 80024e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	079f      	lsls	r7, r3, #30
 80024ea:	d4ec      	bmi.n	80024c6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ec:	f7fe fcda 	bl	8000ea4 <HAL_GetTick>
 80024f0:	1b80      	subs	r0, r0, r6
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d9f7      	bls.n	80024e6 <HAL_RCC_OscConfig+0x116>
 80024f6:	e7ad      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80024f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024fa:	f7fe fcd3 	bl	8000ea4 <HAL_GetTick>
 80024fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	0798      	lsls	r0, r3, #30
 8002504:	f57f af6d 	bpl.w	80023e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002508:	f7fe fccc 	bl	8000ea4 <HAL_GetTick>
 800250c:	1b80      	subs	r0, r0, r6
 800250e:	2802      	cmp	r0, #2
 8002510:	d9f6      	bls.n	8002500 <HAL_RCC_OscConfig+0x130>
 8002512:	e79f      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002514:	69aa      	ldr	r2, [r5, #24]
 8002516:	4c4a      	ldr	r4, [pc, #296]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_RCC_OscConfig+0x278>)
 800251a:	b1da      	cbz	r2, 8002554 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002520:	f7fe fcc0 	bl	8000ea4 <HAL_GetTick>
 8002524:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002528:	079b      	lsls	r3, r3, #30
 800252a:	d50d      	bpl.n	8002548 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800252c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	fbb3 f3f2 	udiv	r3, r3, r2
 8002538:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800253a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	1e5a      	subs	r2, r3, #1
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <HAL_RCC_OscConfig+0x16a>
 8002546:	e750      	b.n	80023ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe fcac 	bl	8000ea4 <HAL_GetTick>
 800254c:	1b80      	subs	r0, r0, r6
 800254e:	2802      	cmp	r0, #2
 8002550:	d9e9      	bls.n	8002526 <HAL_RCC_OscConfig+0x156>
 8002552:	e77f      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002554:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002556:	f7fe fca5 	bl	8000ea4 <HAL_GetTick>
 800255a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800255e:	079f      	lsls	r7, r3, #30
 8002560:	f57f af43 	bpl.w	80023ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe fc9e 	bl	8000ea4 <HAL_GetTick>
 8002568:	1b80      	subs	r0, r0, r6
 800256a:	2802      	cmp	r0, #2
 800256c:	d9f6      	bls.n	800255c <HAL_RCC_OscConfig+0x18c>
 800256e:	e771      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002570:	4c33      	ldr	r4, [pc, #204]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 8002572:	69e3      	ldr	r3, [r4, #28]
 8002574:	00d8      	lsls	r0, r3, #3
 8002576:	d424      	bmi.n	80025c2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002578:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	69e3      	ldr	r3, [r4, #28]
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	61e3      	str	r3, [r4, #28]
 8002582:	69e3      	ldr	r3, [r4, #28]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4e30      	ldr	r6, [pc, #192]	; (8002650 <HAL_RCC_OscConfig+0x280>)
 800258e:	6833      	ldr	r3, [r6, #0]
 8002590:	05d9      	lsls	r1, r3, #23
 8002592:	d518      	bpl.n	80025c6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	68eb      	ldr	r3, [r5, #12]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d126      	bne.n	80025e8 <HAL_RCC_OscConfig+0x218>
 800259a:	6a23      	ldr	r3, [r4, #32]
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80025a2:	f7fe fc7f 	bl	8000ea4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025aa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	6a23      	ldr	r3, [r4, #32]
 80025ae:	079b      	lsls	r3, r3, #30
 80025b0:	d53f      	bpl.n	8002632 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80025b2:	2f00      	cmp	r7, #0
 80025b4:	f43f af1d 	beq.w	80023f2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	69e3      	ldr	r3, [r4, #28]
 80025ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025be:	61e3      	str	r3, [r4, #28]
 80025c0:	e717      	b.n	80023f2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2700      	movs	r7, #0
 80025c4:	e7e2      	b.n	800258c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	6833      	ldr	r3, [r6, #0]
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80025ce:	f7fe fc69 	bl	8000ea4 <HAL_GetTick>
 80025d2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	6833      	ldr	r3, [r6, #0]
 80025d6:	05da      	lsls	r2, r3, #23
 80025d8:	d4dc      	bmi.n	8002594 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7fe fc63 	bl	8000ea4 <HAL_GetTick>
 80025de:	eba0 0008 	sub.w	r0, r0, r8
 80025e2:	2864      	cmp	r0, #100	; 0x64
 80025e4:	d9f6      	bls.n	80025d4 <HAL_RCC_OscConfig+0x204>
 80025e6:	e735      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e8:	b9ab      	cbnz	r3, 8002616 <HAL_RCC_OscConfig+0x246>
 80025ea:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6223      	str	r3, [r4, #32]
 80025f6:	6a23      	ldr	r3, [r4, #32]
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80025fe:	f7fe fc51 	bl	8000ea4 <HAL_GetTick>
 8002602:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	6a23      	ldr	r3, [r4, #32]
 8002606:	0798      	lsls	r0, r3, #30
 8002608:	d5d3      	bpl.n	80025b2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fc4b 	bl	8000ea4 <HAL_GetTick>
 800260e:	1b80      	subs	r0, r0, r6
 8002610:	4540      	cmp	r0, r8
 8002612:	d9f7      	bls.n	8002604 <HAL_RCC_OscConfig+0x234>
 8002614:	e71e      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002616:	2b05      	cmp	r3, #5
 8002618:	6a23      	ldr	r3, [r4, #32]
 800261a:	d103      	bne.n	8002624 <HAL_RCC_OscConfig+0x254>
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	6223      	str	r3, [r4, #32]
 8002622:	e7ba      	b.n	800259a <HAL_RCC_OscConfig+0x1ca>
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6223      	str	r3, [r4, #32]
 800262a:	6a23      	ldr	r3, [r4, #32]
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	e7b6      	b.n	80025a0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fc37 	bl	8000ea4 <HAL_GetTick>
 8002636:	eba0 0008 	sub.w	r0, r0, r8
 800263a:	42b0      	cmp	r0, r6
 800263c:	d9b6      	bls.n	80025ac <HAL_RCC_OscConfig+0x1dc>
 800263e:	e709      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
 8002640:	40021000 	.word	0x40021000
 8002644:	42420000 	.word	0x42420000
 8002648:	42420480 	.word	0x42420480
 800264c:	20000008 	.word	0x20000008
 8002650:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4c22      	ldr	r4, [pc, #136]	; (80026e0 <HAL_RCC_OscConfig+0x310>)
 8002656:	6863      	ldr	r3, [r4, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	f43f aee2 	beq.w	8002426 <HAL_RCC_OscConfig+0x56>
 8002662:	2300      	movs	r3, #0
 8002664:	4e1f      	ldr	r6, [pc, #124]	; (80026e4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002668:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266a:	d12b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800266c:	f7fe fc1a 	bl	8000ea4 <HAL_GetTick>
 8002670:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	0199      	lsls	r1, r3, #6
 8002676:	d41f      	bmi.n	80026b8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002678:	6a2b      	ldr	r3, [r5, #32]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002680:	6862      	ldr	r2, [r4, #4]
 8002682:	68a9      	ldr	r1, [r5, #8]
 8002684:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002688:	430a      	orrs	r2, r1
 800268a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800268e:	6862      	ldr	r2, [r4, #4]
 8002690:	430b      	orrs	r3, r1
 8002692:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002696:	4313      	orrs	r3, r2
 8002698:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800269a:	2301      	movs	r3, #1
 800269c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800269e:	f7fe fc01 	bl	8000ea4 <HAL_GetTick>
 80026a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	019a      	lsls	r2, r3, #6
 80026a8:	f53f aea7 	bmi.w	80023fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fbfa 	bl	8000ea4 <HAL_GetTick>
 80026b0:	1b40      	subs	r0, r0, r5
 80026b2:	2802      	cmp	r0, #2
 80026b4:	d9f6      	bls.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
 80026b6:	e6cd      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fbf4 	bl	8000ea4 <HAL_GetTick>
 80026bc:	1bc0      	subs	r0, r0, r7
 80026be:	2802      	cmp	r0, #2
 80026c0:	d9d7      	bls.n	8002672 <HAL_RCC_OscConfig+0x2a2>
 80026c2:	e6c7      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80026c4:	f7fe fbee 	bl	8000ea4 <HAL_GetTick>
 80026c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	f57f ae94 	bpl.w	80023fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fbe7 	bl	8000ea4 <HAL_GetTick>
 80026d6:	1b40      	subs	r0, r0, r5
 80026d8:	2802      	cmp	r0, #2
 80026da:	d9f6      	bls.n	80026ca <HAL_RCC_OscConfig+0x2fa>
 80026dc:	e6ba      	b.n	8002454 <HAL_RCC_OscConfig+0x84>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	42420060 	.word	0x42420060

080026e8 <HAL_RCC_GetSysClockFreq>:
{
 80026e8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80026ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ee:	ac02      	add	r4, sp, #8
 80026f0:	f103 0510 	add.w	r5, r3, #16
 80026f4:	4622      	mov	r2, r4
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	3308      	adds	r3, #8
 80026fc:	c203      	stmia	r2!, {r0, r1}
 80026fe:	42ab      	cmp	r3, r5
 8002700:	4614      	mov	r4, r2
 8002702:	d1f7      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002704:	2301      	movs	r3, #1
 8002706:	f88d 3004 	strb.w	r3, [sp, #4]
 800270a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800270c:	4911      	ldr	r1, [pc, #68]	; (8002754 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800270e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002712:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002714:	f003 020c 	and.w	r2, r3, #12
 8002718:	2a08      	cmp	r2, #8
 800271a:	d117      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800271c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002720:	a806      	add	r0, sp, #24
 8002722:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002724:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002726:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800272a:	d50c      	bpl.n	8002746 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800272c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800272e:	480a      	ldr	r0, [pc, #40]	; (8002758 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002730:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002734:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002736:	aa06      	add	r2, sp, #24
 8002738:	4413      	add	r3, r2
 800273a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800273e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002742:	b007      	add	sp, #28
 8002744:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <HAL_RCC_GetSysClockFreq+0x74>)
 8002748:	4350      	muls	r0, r2
 800274a:	e7fa      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800274e:	e7f8      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x5a>
 8002750:	08004204 	.word	0x08004204
 8002754:	40021000 	.word	0x40021000
 8002758:	007a1200 	.word	0x007a1200
 800275c:	003d0900 	.word	0x003d0900

08002760 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002760:	4a4d      	ldr	r2, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x138>)
{
 8002762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002766:	6813      	ldr	r3, [r2, #0]
{
 8002768:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	428b      	cmp	r3, r1
{
 8002770:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002772:	d328      	bcc.n	80027c6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	682a      	ldr	r2, [r5, #0]
 8002776:	0791      	lsls	r1, r2, #30
 8002778:	d432      	bmi.n	80027e0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	07d2      	lsls	r2, r2, #31
 800277c:	d438      	bmi.n	80027f0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800277e:	4a46      	ldr	r2, [pc, #280]	; (8002898 <HAL_RCC_ClockConfig+0x138>)
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	429e      	cmp	r6, r3
 8002788:	d373      	bcc.n	8002872 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278a:	682a      	ldr	r2, [r5, #0]
 800278c:	4c43      	ldr	r4, [pc, #268]	; (800289c <HAL_RCC_ClockConfig+0x13c>)
 800278e:	f012 0f04 	tst.w	r2, #4
 8002792:	d179      	bne.n	8002888 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	0713      	lsls	r3, r2, #28
 8002796:	d506      	bpl.n	80027a6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002798:	6863      	ldr	r3, [r4, #4]
 800279a:	692a      	ldr	r2, [r5, #16]
 800279c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80027a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027a4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a6:	f7ff ff9f 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80027aa:	6863      	ldr	r3, [r4, #4]
 80027ac:	4a3c      	ldr	r2, [pc, #240]	; (80028a0 <HAL_RCC_ClockConfig+0x140>)
 80027ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	40d8      	lsrs	r0, r3
 80027b6:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <HAL_RCC_ClockConfig+0x144>)
 80027b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe fb30 	bl	8000e20 <HAL_InitTick>
  return HAL_OK;
 80027c0:	2000      	movs	r0, #0
}
 80027c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	f023 0307 	bic.w	r3, r3, #7
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	4299      	cmp	r1, r3
 80027d8:	d0cc      	beq.n	8002774 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80027da:	2001      	movs	r0, #1
 80027dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	492e      	ldr	r1, [pc, #184]	; (800289c <HAL_RCC_ClockConfig+0x13c>)
 80027e2:	68a8      	ldr	r0, [r5, #8]
 80027e4:	684b      	ldr	r3, [r1, #4]
 80027e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ea:	4303      	orrs	r3, r0
 80027ec:	604b      	str	r3, [r1, #4]
 80027ee:	e7c4      	b.n	800277a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f0:	686a      	ldr	r2, [r5, #4]
 80027f2:	4c2a      	ldr	r4, [pc, #168]	; (800289c <HAL_RCC_ClockConfig+0x13c>)
 80027f4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	d0ec      	beq.n	80027da <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002800:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002802:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	4313      	orrs	r3, r2
 800280c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800280e:	f7fe fb49 	bl	8000ea4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002814:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	2b01      	cmp	r3, #1
 8002818:	d114      	bne.n	8002844 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800281a:	6863      	ldr	r3, [r4, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d0ac      	beq.n	800277e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe fb3e 	bl	8000ea4 <HAL_GetTick>
 8002828:	1bc0      	subs	r0, r0, r7
 800282a:	4540      	cmp	r0, r8
 800282c:	d9f5      	bls.n	800281a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800282e:	2003      	movs	r0, #3
 8002830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002834:	2a02      	cmp	r2, #2
 8002836:	d102      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800283c:	e7df      	b.n	80027fe <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	f013 0f02 	tst.w	r3, #2
 8002842:	e7dc      	b.n	80027fe <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	2b02      	cmp	r3, #2
 8002846:	d10f      	bne.n	8002868 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002848:	6863      	ldr	r3, [r4, #4]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d095      	beq.n	800277e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002852:	f7fe fb27 	bl	8000ea4 <HAL_GetTick>
 8002856:	1bc0      	subs	r0, r0, r7
 8002858:	4540      	cmp	r0, r8
 800285a:	d9f5      	bls.n	8002848 <HAL_RCC_ClockConfig+0xe8>
 800285c:	e7e7      	b.n	800282e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285e:	f7fe fb21 	bl	8000ea4 <HAL_GetTick>
 8002862:	1bc0      	subs	r0, r0, r7
 8002864:	4540      	cmp	r0, r8
 8002866:	d8e2      	bhi.n	800282e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002868:	6863      	ldr	r3, [r4, #4]
 800286a:	f013 0f0c 	tst.w	r3, #12
 800286e:	d1f6      	bne.n	800285e <HAL_RCC_ClockConfig+0xfe>
 8002870:	e785      	b.n	800277e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	f023 0307 	bic.w	r3, r3, #7
 8002878:	4333      	orrs	r3, r6
 800287a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800287c:	6813      	ldr	r3, [r2, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	429e      	cmp	r6, r3
 8002884:	d1a9      	bne.n	80027da <HAL_RCC_ClockConfig+0x7a>
 8002886:	e780      	b.n	800278a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	6863      	ldr	r3, [r4, #4]
 800288a:	68e9      	ldr	r1, [r5, #12]
 800288c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002890:	430b      	orrs	r3, r1
 8002892:	6063      	str	r3, [r4, #4]
 8002894:	e77e      	b.n	8002794 <HAL_RCC_ClockConfig+0x34>
 8002896:	bf00      	nop
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	08004248 	.word	0x08004248
 80028a4:	20000008 	.word	0x20000008

080028a8 <HAL_RCC_GetHCLKFreq>:
}
 80028a8:	4b01      	ldr	r3, [pc, #4]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000008 	.word	0x20000008

080028b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028c2:	6810      	ldr	r0, [r2, #0]
}    
 80028c4:	40d8      	lsrs	r0, r3
 80028c6:	4770      	bx	lr
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08004258 	.word	0x08004258
 80028d0:	20000008 	.word	0x20000008

080028d4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028d4:	6803      	ldr	r3, [r0, #0]
{
 80028d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028da:	07d9      	lsls	r1, r3, #31
{
 80028dc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028de:	d520      	bpl.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e0:	4c35      	ldr	r4, [pc, #212]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028e2:	69e3      	ldr	r3, [r4, #28]
 80028e4:	00da      	lsls	r2, r3, #3
 80028e6:	d432      	bmi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80028e8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	69e3      	ldr	r3, [r4, #28]
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	61e3      	str	r3, [r4, #28]
 80028f2:	69e3      	ldr	r3, [r4, #28]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4e2f      	ldr	r6, [pc, #188]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028fe:	6833      	ldr	r3, [r6, #0]
 8002900:	05db      	lsls	r3, r3, #23
 8002902:	d526      	bpl.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002904:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002906:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800290a:	d136      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800290c:	6a23      	ldr	r3, [r4, #32]
 800290e:	686a      	ldr	r2, [r5, #4]
 8002910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002914:	4313      	orrs	r3, r2
 8002916:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002918:	b11f      	cbz	r7, 8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291a:	69e3      	ldr	r3, [r4, #28]
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002920:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002922:	6828      	ldr	r0, [r5, #0]
 8002924:	0783      	lsls	r3, r0, #30
 8002926:	d506      	bpl.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002928:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800292a:	68a9      	ldr	r1, [r5, #8]
 800292c:	6853      	ldr	r3, [r2, #4]
 800292e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002932:	430b      	orrs	r3, r1
 8002934:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002936:	f010 0010 	ands.w	r0, r0, #16
 800293a:	d01b      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800293e:	68e9      	ldr	r1, [r5, #12]
 8002940:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002942:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002944:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002948:	430b      	orrs	r3, r1
 800294a:	6053      	str	r3, [r2, #4]
 800294c:	e012      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2700      	movs	r7, #0
 8002950:	e7d4      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	6833      	ldr	r3, [r6, #0]
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800295a:	f7fe faa3 	bl	8000ea4 <HAL_GetTick>
 800295e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	6833      	ldr	r3, [r6, #0]
 8002962:	05d8      	lsls	r0, r3, #23
 8002964:	d4ce      	bmi.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fe fa9d 	bl	8000ea4 <HAL_GetTick>
 800296a:	eba0 0008 	sub.w	r0, r0, r8
 800296e:	2864      	cmp	r0, #100	; 0x64
 8002970:	d9f6      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002972:	2003      	movs	r0, #3
}
 8002974:	b002      	add	sp, #8
 8002976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297a:	686a      	ldr	r2, [r5, #4]
 800297c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002980:	4293      	cmp	r3, r2
 8002982:	d0c3      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002984:	2001      	movs	r0, #1
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002988:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800298a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800298c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002992:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002994:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002996:	07d9      	lsls	r1, r3, #31
 8002998:	d5b8      	bpl.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800299a:	f7fe fa83 	bl	8000ea4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80029a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	6a23      	ldr	r3, [r4, #32]
 80029a6:	079a      	lsls	r2, r3, #30
 80029a8:	d4b0      	bmi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fa7b 	bl	8000ea4 <HAL_GetTick>
 80029ae:	1b80      	subs	r0, r0, r6
 80029b0:	4540      	cmp	r0, r8
 80029b2:	d9f7      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80029b4:	e7dd      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
 80029c0:	42420440 	.word	0x42420440

080029c4 <HAL_SPI_ErrorCallback>:
 80029c4:	4770      	bx	lr
	...

080029c8 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80029c8:	6803      	ldr	r3, [r0, #0]
{
 80029ca:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80029cc:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80029ce:	689a      	ldr	r2, [r3, #8]
{
 80029d0:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80029d2:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80029d6:	2d01      	cmp	r5, #1
{
 80029d8:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80029da:	d105      	bne.n	80029e8 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80029dc:	064d      	lsls	r5, r1, #25
 80029de:	d503      	bpl.n	80029e8 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 80029e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 80029e2:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 80029e4:	b005      	add	sp, #20
 80029e6:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80029e8:	0790      	lsls	r0, r2, #30
 80029ea:	d504      	bpl.n	80029f6 <HAL_SPI_IRQHandler+0x2e>
 80029ec:	060d      	lsls	r5, r1, #24
 80029ee:	d502      	bpl.n	80029f6 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80029f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029f2:	4620      	mov	r0, r4
 80029f4:	e7f5      	b.n	80029e2 <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80029f6:	f012 0f60 	tst.w	r2, #96	; 0x60
 80029fa:	d0f3      	beq.n	80029e4 <HAL_SPI_IRQHandler+0x1c>
 80029fc:	0688      	lsls	r0, r1, #26
 80029fe:	d5f1      	bpl.n	80029e4 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002a00:	0655      	lsls	r5, r2, #25
 8002a02:	d50e      	bpl.n	8002a22 <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a04:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002a08:	2500      	movs	r5, #0
 8002a0a:	2803      	cmp	r0, #3
 8002a0c:	d036      	beq.n	8002a7c <HAL_SPI_IRQHandler+0xb4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a10:	f040 0004 	orr.w	r0, r0, #4
 8002a14:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a16:	9501      	str	r5, [sp, #4]
 8002a18:	68d8      	ldr	r0, [r3, #12]
 8002a1a:	9001      	str	r0, [sp, #4]
 8002a1c:	6898      	ldr	r0, [r3, #8]
 8002a1e:	9001      	str	r0, [sp, #4]
 8002a20:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002a22:	0690      	lsls	r0, r2, #26
 8002a24:	d50c      	bpl.n	8002a40 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a26:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	9203      	str	r2, [sp, #12]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	9203      	str	r2, [sp, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	d0ce      	beq.n	80029e4 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a4c:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a54:	078a      	lsls	r2, r1, #30
 8002a56:	d018      	beq.n	8002a8a <HAL_SPI_IRQHandler+0xc2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a58:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002a5a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a5c:	f022 0203 	bic.w	r2, r2, #3
 8002a60:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002a62:	b118      	cbz	r0, 8002a6c <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_SPI_IRQHandler+0xcc>)
 8002a66:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002a68:	f7fe ff1c 	bl	80018a4 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002a6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d0b8      	beq.n	80029e4 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_SPI_IRQHandler+0xcc>)
 8002a74:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002a76:	f7fe ff15 	bl	80018a4 <HAL_DMA_Abort_IT>
 8002a7a:	e7b3      	b.n	80029e4 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7c:	9502      	str	r5, [sp, #8]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	9202      	str	r2, [sp, #8]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	9b02      	ldr	r3, [sp, #8]
        return;
 8002a88:	e7ac      	b.n	80029e4 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7ff ff9a 	bl	80029c4 <HAL_SPI_ErrorCallback>
 8002a90:	e7a8      	b.n	80029e4 <HAL_SPI_IRQHandler+0x1c>
 8002a92:	bf00      	nop
 8002a94:	08002a99 	.word	0x08002a99

08002a98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a98:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hspi->RxXferCount = 0U;
 8002a9a:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8002a9e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002aa0:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8002aa2:	f7ff ff8f 	bl	80029c4 <HAL_SPI_ErrorCallback>
 8002aa6:	bd08      	pop	{r3, pc}

08002aa8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002aaa:	4604      	mov	r4, r0
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d034      	beq.n	8002b1a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002ab4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002ab8:	b90b      	cbnz	r3, 8002abe <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aba:	f001 f905 	bl	8003cc8 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002abe:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ac2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002ac6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ac8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ace:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ad0:	6863      	ldr	r3, [r4, #4]
 8002ad2:	69a2      	ldr	r2, [r4, #24]
 8002ad4:	4303      	orrs	r3, r0
 8002ad6:	68e0      	ldr	r0, [r4, #12]
 8002ad8:	4303      	orrs	r3, r0
 8002ada:	6920      	ldr	r0, [r4, #16]
 8002adc:	4303      	orrs	r3, r0
 8002ade:	6960      	ldr	r0, [r4, #20]
 8002ae0:	4303      	orrs	r3, r0
 8002ae2:	69e0      	ldr	r0, [r4, #28]
 8002ae4:	4303      	orrs	r3, r0
 8002ae6:	6a20      	ldr	r0, [r4, #32]
 8002ae8:	4303      	orrs	r3, r0
 8002aea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002aec:	4303      	orrs	r3, r0
 8002aee:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002af2:	4303      	orrs	r3, r0
 8002af4:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002af6:	0c12      	lsrs	r2, r2, #16
 8002af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002afa:	f002 0204 	and.w	r2, r2, #4
 8002afe:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002b00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b02:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002b04:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b06:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b08:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8002b10:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b12:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002b14:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8002b18:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b1a:	2001      	movs	r0, #1
}
 8002b1c:	bd10      	pop	{r4, pc}

08002b1e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b1e:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002b20:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIM_IC_MspInit>:
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002b3a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f04f 0302 	mov.w	r3, #2
 8002b42:	d01c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x48>
 8002b44:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8002b46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b4a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002b4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002b50:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b52:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b56:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b5c:	680a      	ldr	r2, [r1, #0]
 8002b5e:	2a40      	cmp	r2, #64	; 0x40
 8002b60:	d079      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x120>
 8002b62:	d819      	bhi.n	8002b98 <HAL_TIM_ConfigClockSource+0x62>
 8002b64:	2a10      	cmp	r2, #16
 8002b66:	f000 8093 	beq.w	8002c90 <HAL_TIM_ConfigClockSource+0x15a>
 8002b6a:	d80a      	bhi.n	8002b82 <HAL_TIM_ConfigClockSource+0x4c>
 8002b6c:	2a00      	cmp	r2, #0
 8002b6e:	f000 8089 	beq.w	8002c84 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002b7e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b82:	2a20      	cmp	r2, #32
 8002b84:	f000 808a 	beq.w	8002c9c <HAL_TIM_ConfigClockSource+0x166>
 8002b88:	2a30      	cmp	r2, #48	; 0x30
 8002b8a:	d1f2      	bne.n	8002b72 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b8c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b92:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002b96:	e036      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002b98:	2a70      	cmp	r2, #112	; 0x70
 8002b9a:	d036      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0xd4>
 8002b9c:	d81b      	bhi.n	8002bd6 <HAL_TIM_ConfigClockSource+0xa0>
 8002b9e:	2a50      	cmp	r2, #80	; 0x50
 8002ba0:	d042      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xf2>
 8002ba2:	2a60      	cmp	r2, #96	; 0x60
 8002ba4:	d1e5      	bne.n	8002b72 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba6:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002baa:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bbe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bc2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002bc6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc8:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002bca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002bcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bd0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002bd4:	e017      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002bd6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002bda:	d011      	beq.n	8002c00 <HAL_TIM_ConfigClockSource+0xca>
 8002bdc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002be0:	d1c7      	bne.n	8002b72 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be2:	688a      	ldr	r2, [r1, #8]
 8002be4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002be6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be8:	68c9      	ldr	r1, [r1, #12]
 8002bea:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bec:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bf4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bfe:	e002      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e7b3      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c0a:	688a      	ldr	r2, [r1, #8]
 8002c0c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002c0e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c10:	68c9      	ldr	r1, [r1, #12]
 8002c12:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c14:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c1c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002c1e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002c20:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c22:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002c26:	e7ee      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c28:	684c      	ldr	r4, [r1, #4]
 8002c2a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c2c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c30:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c34:	f025 0501 	bic.w	r5, r5, #1
 8002c38:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002c3c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c42:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c48:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002c4a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c50:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002c54:	e7d7      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	684c      	ldr	r4, [r1, #4]
 8002c58:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c5a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c5c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c5e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c62:	f025 0501 	bic.w	r5, r5, #1
 8002c66:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c68:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002c6a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c70:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c76:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002c78:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c7e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002c82:	e7c0      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002c84:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c8a:	f042 0207 	orr.w	r2, r2, #7
 8002c8e:	e7ba      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002c90:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c96:	f042 0217 	orr.w	r2, r2, #23
 8002c9a:	e7b4      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002c9c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ca2:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002ca6:	e7ae      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0xd0>

08002ca8 <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8002ca8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d01c      	beq.n	8002cea <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8002cb0:	290c      	cmp	r1, #12
 8002cb2:	d818      	bhi.n	8002ce6 <HAL_TIM_ReadCapturedValue+0x3e>
 8002cb4:	e8df f001 	tbb	[pc, r1]
 8002cb8:	17171707 	.word	0x17171707
 8002cbc:	1717170e 	.word	0x1717170e
 8002cc0:	17171711 	.word	0x17171711
 8002cc4:	14          	.byte	0x14
 8002cc5:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8002cc6:	6803      	ldr	r3, [r0, #0]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 8002cd8:	e7f7      	b.n	8002cca <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 8002cda:	6803      	ldr	r3, [r0, #0]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 8002cde:	e7f4      	b.n	8002cca <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 8002ce0:	6803      	ldr	r3, [r0, #0]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 8002ce4:	e7f1      	b.n	8002cca <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e7ef      	b.n	8002cca <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 8002cea:	2302      	movs	r3, #2
 8002cec:	e7f0      	b.n	8002cd0 <HAL_TIM_ReadCapturedValue+0x28>

08002cee <HAL_TIM_OC_DelayElapsedCallback>:
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_TriggerCallback>:
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf4:	6803      	ldr	r3, [r0, #0]
{
 8002cf6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf8:	691a      	ldr	r2, [r3, #16]
{
 8002cfa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cfc:	0791      	lsls	r1, r2, #30
 8002cfe:	d50e      	bpl.n	8002d1e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	0792      	lsls	r2, r2, #30
 8002d04:	d50b      	bpl.n	8002d1e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d06:	f06f 0202 	mvn.w	r2, #2
 8002d0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d0c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d0e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d10:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d12:	079b      	lsls	r3, r3, #30
 8002d14:	d077      	beq.n	8002e06 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	f000 fbcf 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	0750      	lsls	r0, r2, #29
 8002d24:	d510      	bpl.n	8002d48 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	0751      	lsls	r1, r2, #29
 8002d2a:	d50d      	bpl.n	8002d48 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d2c:	f06f 0204 	mvn.w	r2, #4
 8002d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d32:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d34:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d36:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d38:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d3e:	d068      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d40:	f000 fbba 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d44:	2300      	movs	r3, #0
 8002d46:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	0712      	lsls	r2, r2, #28
 8002d4e:	d50f      	bpl.n	8002d70 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	0710      	lsls	r0, r2, #28
 8002d54:	d50c      	bpl.n	8002d70 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d56:	f06f 0208 	mvn.w	r2, #8
 8002d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d60:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d62:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002d64:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d66:	d05a      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d68:	f000 fba6 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	06d2      	lsls	r2, r2, #27
 8002d76:	d510      	bpl.n	8002d9a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	06d0      	lsls	r0, r2, #27
 8002d7c:	d50d      	bpl.n	8002d9a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d7e:	f06f 0210 	mvn.w	r2, #16
 8002d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d84:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d88:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d90:	d04b      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	f000 fb91 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	2300      	movs	r3, #0
 8002d98:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	07d1      	lsls	r1, r2, #31
 8002da0:	d508      	bpl.n	8002db4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	07d2      	lsls	r2, r2, #31
 8002da6:	d505      	bpl.n	8002db4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002db0:	f000 fb4e 	bl	8003450 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	0610      	lsls	r0, r2, #24
 8002dba:	d508      	bpl.n	8002dce <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	0611      	lsls	r1, r2, #24
 8002dc0:	d505      	bpl.n	8002dce <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002dc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002dca:	f000 f9ae 	bl	800312a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	0652      	lsls	r2, r2, #25
 8002dd4:	d508      	bpl.n	8002de8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	0650      	lsls	r0, r2, #25
 8002dda:	d505      	bpl.n	8002de8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002de0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002de4:	f7ff ff85 	bl	8002cf2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	0691      	lsls	r1, r2, #26
 8002dee:	d522      	bpl.n	8002e36 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	0692      	lsls	r2, r2, #26
 8002df4:	d51f      	bpl.n	8002e36 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002dfa:	4620      	mov	r0, r4
}
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002e02:	f000 b991 	b.w	8003128 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	f7ff ff72 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff ff70 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e10:	e783      	b.n	8002d1a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	f7ff ff6c 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff ff6a 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e1c:	e792      	b.n	8002d44 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	f7ff ff66 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff ff64 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e28:	e7a0      	b.n	8002d6c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	f7ff ff60 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7ff ff5e 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e34:	e7af      	b.n	8002d96 <HAL_TIM_IRQHandler+0xa2>
 8002e36:	bd10      	pop	{r4, pc}

08002e38 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e38:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002e3a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e3c:	4290      	cmp	r0, r2
 8002e3e:	d00a      	beq.n	8002e56 <TIM_Base_SetConfig+0x1e>
 8002e40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e44:	d007      	beq.n	8002e56 <TIM_Base_SetConfig+0x1e>
 8002e46:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e4a:	4290      	cmp	r0, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_Base_SetConfig+0x1e>
 8002e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e52:	4290      	cmp	r0, r2
 8002e54:	d115      	bne.n	8002e82 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002e56:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e5c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <TIM_Base_SetConfig+0x6c>)
 8002e60:	4290      	cmp	r0, r2
 8002e62:	d00a      	beq.n	8002e7a <TIM_Base_SetConfig+0x42>
 8002e64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0x42>
 8002e6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e6e:	4290      	cmp	r0, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0x42>
 8002e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e76:	4290      	cmp	r0, r2
 8002e78:	d103      	bne.n	8002e82 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e80:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002e82:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002e88:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	688b      	ldr	r3, [r1, #8]
 8002e8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002e90:	680b      	ldr	r3, [r1, #0]
 8002e92:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <TIM_Base_SetConfig+0x6c>)
 8002e96:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002e98:	bf04      	itt	eq
 8002e9a:	690b      	ldreq	r3, [r1, #16]
 8002e9c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	6143      	str	r3, [r0, #20]
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00

08002ea8 <HAL_TIM_Base_Init>:
{
 8002ea8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002eaa:	4604      	mov	r4, r0
 8002eac:	b1a0      	cbz	r0, 8002ed8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002eae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eb6:	b91b      	cbnz	r3, 8002ec0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002eb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ebc:	f001 f8d8 	bl	8004070 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002ec0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002ec4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec8:	1d21      	adds	r1, r4, #4
 8002eca:	f7ff ffb5 	bl	8002e38 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002ece:	2301      	movs	r3, #1
  return HAL_OK;
 8002ed0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002ed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002ed6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
}
 8002eda:	bd10      	pop	{r4, pc}

08002edc <HAL_TIM_IC_Init>:
{
 8002edc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002ede:	4604      	mov	r4, r0
 8002ee0:	b1a0      	cbz	r0, 8002f0c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ee6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eea:	b91b      	cbnz	r3, 8002ef4 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002eec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002ef0:	f7ff fe20 	bl	8002b34 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002ef4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002ef8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efc:	1d21      	adds	r1, r4, #4
 8002efe:	f7ff ff9b 	bl	8002e38 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f02:	2301      	movs	r3, #1
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f0c:	2001      	movs	r0, #1
}
 8002f0e:	bd10      	pop	{r4, pc}

08002f10 <TIM_TI1_SetConfig>:
{
 8002f10:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f12:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f14:	4e12      	ldr	r6, [pc, #72]	; (8002f60 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f16:	f024 0401 	bic.w	r4, r4, #1
 8002f1a:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f1c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f20:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f22:	d00a      	beq.n	8002f3a <TIM_TI1_SetConfig+0x2a>
 8002f24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f28:	d007      	beq.n	8002f3a <TIM_TI1_SetConfig+0x2a>
 8002f2a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002f2e:	42b0      	cmp	r0, r6
 8002f30:	d003      	beq.n	8002f3a <TIM_TI1_SetConfig+0x2a>
 8002f32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002f36:	42b0      	cmp	r0, r6
 8002f38:	d10f      	bne.n	8002f5a <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f3a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002f3e:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f40:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f46:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f48:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f4c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f50:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f52:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002f54:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f56:	6201      	str	r1, [r0, #32]
}
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f5a:	f044 0201 	orr.w	r2, r4, #1
 8002f5e:	e7ef      	b.n	8002f40 <TIM_TI1_SetConfig+0x30>
 8002f60:	40012c00 	.word	0x40012c00

08002f64 <HAL_TIM_IC_ConfigChannel>:
{
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002f66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f6a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002f6c:	2b01      	cmp	r3, #1
{
 8002f6e:	460d      	mov	r5, r1
 8002f70:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002f74:	d019      	beq.n	8002faa <HAL_TIM_IC_ConfigChannel+0x46>
 8002f76:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002f7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002f80:	b9a2      	cbnz	r2, 8002fac <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002f82:	68cb      	ldr	r3, [r1, #12]
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	c906      	ldmia	r1, {r1, r2}
 8002f88:	f7ff ffc2 	bl	8002f10 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f8c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f8e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	f022 020c 	bic.w	r2, r2, #12
 8002f96:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002f9e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002fa0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002fa2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002fa6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002fac:	2a04      	cmp	r2, #4
 8002fae:	688e      	ldr	r6, [r1, #8]
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	c982      	ldmia	r1, {r1, r7}
 8002fb4:	68e8      	ldr	r0, [r5, #12]
 8002fb6:	d11f      	bne.n	8002ff8 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002fba:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fbc:	f022 0210 	bic.w	r2, r2, #16
 8002fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc2:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002fc4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002fc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002fca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002fce:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fd0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002fd4:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002fd6:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002fd8:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fdc:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002fe0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fec:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002ff4:	619e      	str	r6, [r3, #24]
 8002ff6:	e7d2      	b.n	8002f9e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002ff8:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002ffc:	d11c      	bne.n	8003038 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ffe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003002:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003004:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003006:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003008:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 800300c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 800300e:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003010:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003012:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003016:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003018:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800301a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800301e:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003022:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003024:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003026:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	f022 020c 	bic.w	r2, r2, #12
 800302e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003034:	61de      	str	r6, [r3, #28]
 8003036:	e7b2      	b.n	8002f9e <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003038:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800303c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800303e:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003040:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003042:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8003046:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003048:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800304c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003050:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003052:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003054:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003056:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 800305a:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800305e:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8003060:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003062:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800306a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8003072:	e7df      	b.n	8003034 <HAL_TIM_IC_ConfigChannel+0xd0>

08003074 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003074:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003076:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003078:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800307a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800307c:	ea23 0304 	bic.w	r3, r3, r4
 8003080:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003082:	6a03      	ldr	r3, [r0, #32]
 8003084:	408a      	lsls	r2, r1
 8003086:	431a      	orrs	r2, r3
 8003088:	6202      	str	r2, [r0, #32]
 800308a:	bd10      	pop	{r4, pc}

0800308c <HAL_TIM_IC_Start_IT>:
{
 800308c:	b510      	push	{r4, lr}
 800308e:	4604      	mov	r4, r0
  switch (Channel)
 8003090:	290c      	cmp	r1, #12
 8003092:	d80d      	bhi.n	80030b0 <HAL_TIM_IC_Start_IT+0x24>
 8003094:	e8df f001 	tbb	[pc, r1]
 8003098:	0c0c0c07 	.word	0x0c0c0c07
 800309c:	0c0c0c17 	.word	0x0c0c0c17
 80030a0:	0c0c0c1c 	.word	0x0c0c0c1c
 80030a4:	21          	.byte	0x21
 80030a5:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030a6:	6802      	ldr	r2, [r0, #0]
 80030a8:	68d3      	ldr	r3, [r2, #12]
 80030aa:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030ae:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b0:	6820      	ldr	r0, [r4, #0]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f7ff ffde 	bl	8003074 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80030b8:	6822      	ldr	r2, [r4, #0]
}
 80030ba:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030c6:	6802      	ldr	r2, [r0, #0]
 80030c8:	68d3      	ldr	r3, [r2, #12]
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	e7ee      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030d0:	6802      	ldr	r2, [r0, #0]
 80030d2:	68d3      	ldr	r3, [r2, #12]
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	e7e9      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030da:	6802      	ldr	r2, [r0, #0]
 80030dc:	68d3      	ldr	r3, [r2, #12]
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	e7e4      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x22>

080030e4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80030e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80030e8:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f04f 0302 	mov.w	r3, #2
 80030f0:	d018      	beq.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80030f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030f6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80030f8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030fa:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80030fc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003102:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4322      	orrs	r2, r4
 8003108:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003110:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003118:	2301      	movs	r3, #1
 800311a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800311e:	2300      	movs	r3, #0
 8003120:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003124:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003126:	bd10      	pop	{r4, pc}

08003128 <HAL_TIMEx_CommutationCallback>:
 8003128:	4770      	bx	lr

0800312a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800312a:	4770      	bx	lr

0800312c <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800312c:	4825      	ldr	r0, [pc, #148]	; (80031c4 <MX_ADC1_Init+0x98>)
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <MX_ADC1_Init+0x9c>)
{
 8003130:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8003132:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003138:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800313a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  hadc1.Init.ContinuousConvMode = DISABLE;
 800313e:	2400      	movs	r4, #0
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003140:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8003142:	2304      	movs	r3, #4
{
 8003144:	b085      	sub	sp, #20
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003146:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003148:	6144      	str	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800314a:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 800314c:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800314e:	f7fe f8df 	bl	8001310 <HAL_ADC_Init>
 8003152:	b118      	cbz	r0, 800315c <MX_ADC1_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003154:	2145      	movs	r1, #69	; 0x45
 8003156:	481d      	ldr	r0, [pc, #116]	; (80031cc <MX_ADC1_Init+0xa0>)
 8003158:	f000 fc5c 	bl	8003a14 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800315c:	2501      	movs	r5, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800315e:	a901      	add	r1, sp, #4
 8003160:	4818      	ldr	r0, [pc, #96]	; (80031c4 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_0;
 8003162:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003164:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003166:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003168:	f7fd ff66 	bl	8001038 <HAL_ADC_ConfigChannel>
 800316c:	b118      	cbz	r0, 8003176 <MX_ADC1_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800316e:	214f      	movs	r1, #79	; 0x4f
 8003170:	4816      	ldr	r0, [pc, #88]	; (80031cc <MX_ADC1_Init+0xa0>)
 8003172:	f000 fc4f 	bl	8003a14 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003176:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003178:	a901      	add	r1, sp, #4
 800317a:	4812      	ldr	r0, [pc, #72]	; (80031c4 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_1;
 800317c:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800317e:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003180:	f7fd ff5a 	bl	8001038 <HAL_ADC_ConfigChannel>
 8003184:	b118      	cbz	r0, 800318e <MX_ADC1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003186:	2158      	movs	r1, #88	; 0x58
 8003188:	4810      	ldr	r0, [pc, #64]	; (80031cc <MX_ADC1_Init+0xa0>)
 800318a:	f000 fc43 	bl	8003a14 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 800318e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003190:	2403      	movs	r4, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003192:	a901      	add	r1, sp, #4
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <MX_ADC1_Init+0x98>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003196:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003198:	f7fd ff4e 	bl	8001038 <HAL_ADC_ConfigChannel>
 800319c:	b118      	cbz	r0, 80031a6 <MX_ADC1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800319e:	2161      	movs	r1, #97	; 0x61
 80031a0:	480a      	ldr	r0, [pc, #40]	; (80031cc <MX_ADC1_Init+0xa0>)
 80031a2:	f000 fc37 	bl	8003a14 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80031a6:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031a8:	4806      	ldr	r0, [pc, #24]	; (80031c4 <MX_ADC1_Init+0x98>)
 80031aa:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Channel = ADC_CHANNEL_3;
 80031ae:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80031b0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b2:	f7fd ff41 	bl	8001038 <HAL_ADC_ConfigChannel>
 80031b6:	b118      	cbz	r0, 80031c0 <MX_ADC1_Init+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031b8:	216a      	movs	r1, #106	; 0x6a
 80031ba:	4804      	ldr	r0, [pc, #16]	; (80031cc <MX_ADC1_Init+0xa0>)
 80031bc:	f000 fc2a 	bl	8003a14 <_Error_Handler>
  }

}
 80031c0:	b005      	add	sp, #20
 80031c2:	bd30      	pop	{r4, r5, pc}
 80031c4:	200000b4 	.word	0x200000b4
 80031c8:	40012400 	.word	0x40012400
 80031cc:	08004214 	.word	0x08004214

080031d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80031d0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80031d2:	6802      	ldr	r2, [r0, #0]
 80031d4:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <HAL_ADC_MspInit+0x84>)
{
 80031d6:	b087      	sub	sp, #28
  if(adcHandle->Instance==ADC1)
 80031d8:	429a      	cmp	r2, r3
{
 80031da:	4605      	mov	r5, r0
  if(adcHandle->Instance==ADC1)
 80031dc:	d137      	bne.n	800324e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031de:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80031e2:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	481c      	ldr	r0, [pc, #112]	; (8003258 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	619a      	str	r2, [r3, #24]
 80031ec:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ee:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031f8:	230f      	movs	r3, #15
 80031fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031fc:	2303      	movs	r3, #3

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031fe:	4c17      	ldr	r4, [pc, #92]	; (800325c <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003200:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f7fe fc2b 	bl	8001a5c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003208:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 800320a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800320c:	2300      	movs	r3, #0
 800320e:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003210:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800321a:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800321c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003220:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003222:	2320      	movs	r3, #32
 8003224:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800322c:	f7fe fac8 	bl	80017c0 <HAL_DMA_Init>
 8003230:	b118      	cbz	r0, 800323a <HAL_ADC_MspInit+0x6a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003232:	2191      	movs	r1, #145	; 0x91
 8003234:	480b      	ldr	r0, [pc, #44]	; (8003264 <HAL_ADC_MspInit+0x94>)
 8003236:	f000 fbed 	bl	8003a14 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800323c:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800323e:	2012      	movs	r0, #18
 8003240:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003242:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003244:	f7fe fa54 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003248:	2012      	movs	r0, #18
 800324a:	f7fe fa85 	bl	8001758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800324e:	b007      	add	sp, #28
 8003250:	bd30      	pop	{r4, r5, pc}
 8003252:	bf00      	nop
 8003254:	40012400 	.word	0x40012400
 8003258:	40010800 	.word	0x40010800
 800325c:	200000e4 	.word	0x200000e4
 8003260:	40020008 	.word	0x40020008
 8003264:	08004214 	.word	0x08004214

08003268 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8003268:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 8;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SJW = CAN_SJW_1TQ;
  hcan.Init.BS1 = CAN_BS1_3TQ;
 800326a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hcan.Init.Prescaler = 8;
 800326e:	f04f 0e08 	mov.w	lr, #8
  hcan.Instance = CAN1;
 8003272:	480d      	ldr	r0, [pc, #52]	; (80032a8 <MX_CAN_Init+0x40>)
  hcan.Init.Prescaler = 8;
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <MX_CAN_Init+0x44>)
  hcan.Init.BS1 = CAN_BS1_3TQ;
 8003276:	6102      	str	r2, [r0, #16]
  hcan.Init.Prescaler = 8;
 8003278:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.BS2 = CAN_BS2_5TQ;
 800327c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003280:	2300      	movs	r3, #0
  hcan.Init.BS2 = CAN_BS2_5TQ;
 8003282:	6142      	str	r2, [r0, #20]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003284:	6083      	str	r3, [r0, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8003286:	60c3      	str	r3, [r0, #12]
  hcan.Init.TTCM = DISABLE;
 8003288:	6183      	str	r3, [r0, #24]
  hcan.Init.ABOM = DISABLE;
 800328a:	61c3      	str	r3, [r0, #28]
  hcan.Init.AWUM = DISABLE;
 800328c:	6203      	str	r3, [r0, #32]
  hcan.Init.NART = DISABLE;
 800328e:	6243      	str	r3, [r0, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8003290:	6283      	str	r3, [r0, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8003292:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003294:	f7fe f8bd 	bl	8001412 <HAL_CAN_Init>
 8003298:	b128      	cbz	r0, 80032a6 <MX_CAN_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800329a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800329e:	2145      	movs	r1, #69	; 0x45
 80032a0:	4803      	ldr	r0, [pc, #12]	; (80032b0 <MX_CAN_Init+0x48>)
 80032a2:	f000 bbb7 	b.w	8003a14 <_Error_Handler>
 80032a6:	bd08      	pop	{r3, pc}
 80032a8:	20000128 	.word	0x20000128
 80032ac:	40006400 	.word	0x40006400
 80032b0:	08004221 	.word	0x08004221

080032b4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80032b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80032b6:	6802      	ldr	r2, [r0, #0]
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_CAN_MspInit+0x64>)
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d128      	bne.n	8003310 <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80032be:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80032c2:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80032c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80032ca:	61da      	str	r2, [r3, #28]
 80032cc:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ce:	4813      	ldr	r0, [pc, #76]	; (800331c <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032de:	2300      	movs	r3, #0
 80032e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f7fe fbba 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f4:	a902      	add	r1, sp, #8
 80032f6:	4809      	ldr	r0, [pc, #36]	; (800331c <HAL_CAN_MspInit+0x68>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fa:	f7fe fbaf 	bl	8001a5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <HAL_CAN_MspInit+0x6c>)
 8003300:	6853      	ldr	r3, [r2, #4]
 8003302:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003306:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800330a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003310:	b007      	add	sp, #28
 8003312:	f85d fb04 	ldr.w	pc, [sp], #4
 8003316:	bf00      	nop
 8003318:	40006400 	.word	0x40006400
 800331c:	40010c00 	.word	0x40010c00
 8003320:	40010000 	.word	0x40010000

08003324 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <MX_DMA_Init+0x2c>)
{
 8003326:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003328:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800332a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003334:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003336:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003340:	f7fe f9d6 	bl	80016f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003344:	200b      	movs	r0, #11
 8003346:	f7fe fa07 	bl	8001758 <HAL_NVIC_EnableIRQ>

}
 800334a:	b003      	add	sp, #12
 800334c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003350:	40021000 	.word	0x40021000

08003354 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <MX_GPIO_Init+0x64>)
{
 8003356:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003358:	699a      	ldr	r2, [r3, #24]
{
 800335a:	b088      	sub	sp, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003364:	4c15      	ldr	r4, [pc, #84]	; (80033bc <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003366:	f002 0220 	and.w	r2, r2, #32
 800336a:	9201      	str	r2, [sp, #4]
 800336c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003370:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	f042 0204 	orr.w	r2, r2, #4
 8003376:	619a      	str	r2, [r3, #24]
 8003378:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800337a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800337c:	f002 0204 	and.w	r2, r2, #4
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	619a      	str	r2, [r3, #24]
 800338c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800338e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003398:	f7fe fc40 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800339c:	2310      	movs	r3, #16
 800339e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a0:	2301      	movs	r3, #1
 80033a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2302      	movs	r3, #2
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80033aa:	a904      	add	r1, sp, #16
 80033ac:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80033b0:	f7fe fb54 	bl	8001a5c <HAL_GPIO_Init>

}
 80033b4:	b008      	add	sp, #32
 80033b6:	bd10      	pop	{r4, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010800 	.word	0x40010800

080033c0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80033c0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80033c2:	480d      	ldr	r0, [pc, #52]	; (80033f8 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 100000;
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <MX_I2C2_Init+0x3c>)
 80033c6:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8003404 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 80033ce:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033d2:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d4:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033d6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80033d8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033da:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80033dc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033de:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033e2:	f7fe fd1d 	bl	8001e20 <HAL_I2C_Init>
 80033e6:	b128      	cbz	r0, 80033f4 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80033e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80033ec:	2142      	movs	r1, #66	; 0x42
 80033ee:	4804      	ldr	r0, [pc, #16]	; (8003400 <MX_I2C2_Init+0x40>)
 80033f0:	f000 bb10 	b.w	8003a14 <_Error_Handler>
 80033f4:	bd08      	pop	{r3, pc}
 80033f6:	bf00      	nop
 80033f8:	2000016c 	.word	0x2000016c
 80033fc:	40005800 	.word	0x40005800
 8003400:	0800422e 	.word	0x0800422e
 8003404:	000186a0 	.word	0x000186a0

08003408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003408:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C2)
 800340a:	6802      	ldr	r2, [r0, #0]
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_I2C_MspInit+0x3c>)
 800340e:	429a      	cmp	r2, r3
 8003410:	d114      	bne.n	800343c <HAL_I2C_MspInit+0x34>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003412:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003416:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003418:	2312      	movs	r3, #18
 800341a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800341c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	a902      	add	r1, sp, #8
 8003420:	4809      	ldr	r0, [pc, #36]	; (8003448 <HAL_I2C_MspInit+0x40>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003422:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f7fe fb1a 	bl	8001a5c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_I2C_MspInit+0x44>)
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003430:	61da      	str	r2, [r3, #28]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800343c:	b007      	add	sp, #28
 800343e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003442:	bf00      	nop
 8003444:	40005800 	.word	0x40005800
 8003448:	40010c00 	.word	0x40010c00
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim1) {
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003452:	4298      	cmp	r0, r3
		tim1_overflow_counter++;
 8003454:	bf01      	itttt	eq
 8003456:	4a07      	ldreq	r2, [pc, #28]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003458:	6813      	ldreq	r3, [r2, #0]
 800345a:	3301      	addeq	r3, #1
 800345c:	6013      	streq	r3, [r2, #0]
	}
	if (htim == &htim2) {
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003460:	4298      	cmp	r0, r3
		tim2_overflow_counter++;
 8003462:	bf01      	itttt	eq
 8003464:	4a05      	ldreq	r2, [pc, #20]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003466:	6813      	ldreq	r3, [r2, #0]
 8003468:	3301      	addeq	r3, #1
 800346a:	6013      	streq	r3, [r2, #0]
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	2000048c 	.word	0x2000048c
 8003474:	20000098 	.word	0x20000098
 8003478:	200004cc 	.word	0x200004cc
 800347c:	200000a4 	.word	0x200000a4

08003480 <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
	if (hadc->Instance == ADC1) {
 8003480:	6802      	ldr	r2, [r0, #0]
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_ADC_ConvCpltCallback+0x28>)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003484:	b510      	push	{r4, lr}
	if (hadc->Instance == ADC1) {
 8003486:	429a      	cmp	r2, r3
 8003488:	d10d      	bne.n	80034a6 <HAL_ADC_ConvCpltCallback+0x26>
 800348a:	2200      	movs	r2, #0
			//converting ADC readings into length in mm

			/*    adc_reading     ------------> 4096 (full scale of 12 bit ADC)
			 *  measured_distance   ----------> 30 (3cm)
			 */
			measured_distance[i] =(uint8_t)(adc_reading[i] * (30) / (4096));
 800348c:	201e      	movs	r0, #30
 800348e:	4c07      	ldr	r4, [pc, #28]	; (80034ac <HAL_ADC_ConvCpltCallback+0x2c>)
 8003490:	4907      	ldr	r1, [pc, #28]	; (80034b0 <HAL_ADC_ConvCpltCallback+0x30>)
 8003492:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 8003496:	b29b      	uxth	r3, r3
 8003498:	4343      	muls	r3, r0
 800349a:	f3c3 3307 	ubfx	r3, r3, #12, #8
 800349e:	548b      	strb	r3, [r1, r2]
 80034a0:	3201      	adds	r2, #1
		for (i = 0; i < 4; i++) {
 80034a2:	2a04      	cmp	r2, #4
 80034a4:	d1f5      	bne.n	8003492 <HAL_ADC_ConvCpltCallback+0x12>
 80034a6:	bd10      	pop	{r4, pc}
 80034a8:	40012400 	.word	0x40012400
 80034ac:	20000058 	.word	0x20000058
 80034b0:	20000060 	.word	0x20000060
 80034b4:	00000000 	.word	0x00000000

080034b8 <HAL_TIM_IC_CaptureCallback>:
	static uint32_t tim1_ch1_capture = 0;
	static uint32_t tim1_ch2_capture = 0;
	static uint32_t tim1_ch3_capture = 0;
	static uint32_t tim1_ch4_capture = 0;
	static uint32_t tim2_ch1_capture = 0;
	if (htim == &htim2)
 80034b8:	4a8d      	ldr	r2, [pc, #564]	; (80036f0 <HAL_TIM_IC_CaptureCallback+0x238>)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80034ba:	b538      	push	{r3, r4, r5, lr}
	if (htim == &htim2)
 80034bc:	4290      	cmp	r0, r2
 80034be:	d131      	bne.n	8003524 <HAL_TIM_IC_CaptureCallback+0x6c>
	{
		if (htim->Channel == 1)
 80034c0:	7f01      	ldrb	r1, [r0, #28]
 80034c2:	2901      	cmp	r1, #1
 80034c4:	d12d      	bne.n	8003522 <HAL_TIM_IC_CaptureCallback+0x6a>
		{
			tim2_ch1_last_capture = tim2_ch1_capture;
 80034c6:	4c8b      	ldr	r4, [pc, #556]	; (80036f4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80034c8:	4d8b      	ldr	r5, [pc, #556]	; (80036f8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	602b      	str	r3, [r5, #0]
			tim2_ch1_capture = HAL_TIM_ReadCapturedValue(&htim2, 1);
 80034ce:	f7ff fbeb 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
			no_counts[4]=((tim2_ch1_capture + (tim2_overflow_counter * 6400)) - tim2_ch1_last_capture);
 80034d2:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
			tim2_ch1_capture = HAL_TIM_ReadCapturedValue(&htim2, 1);
 80034d6:	6020      	str	r0, [r4, #0]
			no_counts[4]=((tim2_ch1_capture + (tim2_overflow_counter * 6400)) - tim2_ch1_last_capture);
 80034d8:	4c88      	ldr	r4, [pc, #544]	; (80036fc <HAL_TIM_IC_CaptureCallback+0x244>)
 80034da:	682a      	ldr	r2, [r5, #0]
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	fb01 0003 	mla	r0, r1, r3, r0
 80034e2:	4b87      	ldr	r3, [pc, #540]	; (8003700 <HAL_TIM_IC_CaptureCallback+0x248>)
 80034e4:	1a80      	subs	r0, r0, r2
 80034e6:	6118      	str	r0, [r3, #16]
			Trev[4] = no_counts[4] * (1/(double)72000.0) * 12;
 80034e8:	f7fc ff74 	bl	80003d4 <__aeabi_ui2d>
 80034ec:	a37a      	add	r3, pc, #488	; (adr r3, 80036d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f7fc ffe5 	bl	80004c0 <__aeabi_dmul>
 80034f6:	2200      	movs	r2, #0
 80034f8:	4b82      	ldr	r3, [pc, #520]	; (8003704 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80034fa:	f7fc ffe1 	bl	80004c0 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4981      	ldr	r1, [pc, #516]	; (8003708 <HAL_TIM_IC_CaptureCallback+0x250>)
			d1.Data.speed[4] = (1/Trev[4]) * 60;   //rpm
 8003504:	2000      	movs	r0, #0
			Trev[4] = no_counts[4] * (1/(double)72000.0) * 12;
 8003506:	e9c1 2308 	strd	r2, r3, [r1, #32]
			d1.Data.speed[4] = (1/Trev[4]) * 60;   //rpm
 800350a:	4980      	ldr	r1, [pc, #512]	; (800370c <HAL_TIM_IC_CaptureCallback+0x254>)
 800350c:	f7fd f902 	bl	8000714 <__aeabi_ddiv>
 8003510:	4b7f      	ldr	r3, [pc, #508]	; (8003710 <HAL_TIM_IC_CaptureCallback+0x258>)
 8003512:	2200      	movs	r2, #0
 8003514:	f7fc ffd4 	bl	80004c0 <__aeabi_dmul>
 8003518:	4b7e      	ldr	r3, [pc, #504]	; (8003714 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800351a:	e9c3 0124 	strd	r0, r1, [r3, #144]	; 0x90
			tim1_ch4_last_capture = tim1_ch4_capture;
			tim1_ch4_capture = HAL_TIM_ReadCapturedValue(&htim1, 8);
			no_counts[3] =  ((tim1_ch4_capture + (tim1_overflow_counter * 6400)) - tim1_ch4_last_capture);
			Trev[3] = no_counts[3] * (1/(double)72000.0) * 4;
			d1.Data.speed[3] = (1/Trev[3]) * (3.14 * 0.065) * ((double)5.0/18);
			tim1_overflow_counter = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	bd38      	pop	{r3, r4, r5, pc}
	else if (htim == &htim1)
 8003524:	4a7c      	ldr	r2, [pc, #496]	; (8003718 <HAL_TIM_IC_CaptureCallback+0x260>)
 8003526:	4290      	cmp	r0, r2
 8003528:	d1fb      	bne.n	8003522 <HAL_TIM_IC_CaptureCallback+0x6a>
		if (htim->Channel == 1)
 800352a:	7f01      	ldrb	r1, [r0, #28]
 800352c:	2901      	cmp	r1, #1
 800352e:	d132      	bne.n	8003596 <HAL_TIM_IC_CaptureCallback+0xde>
			tim1_ch1_last_capture = tim1_ch1_capture;
 8003530:	4c7a      	ldr	r4, [pc, #488]	; (800371c <HAL_TIM_IC_CaptureCallback+0x264>)
 8003532:	4d7b      	ldr	r5, [pc, #492]	; (8003720 <HAL_TIM_IC_CaptureCallback+0x268>)
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	602b      	str	r3, [r5, #0]
			tim1_ch1_capture = HAL_TIM_ReadCapturedValue(&htim1, 1);
 8003538:	f7ff fbb6 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
			no_counts[0]=((tim1_ch1_capture + (tim1_overflow_counter * 6400)) - tim1_ch1_last_capture);
 800353c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
			tim1_ch1_capture = HAL_TIM_ReadCapturedValue(&htim1, 1);
 8003540:	6020      	str	r0, [r4, #0]
			no_counts[0]=((tim1_ch1_capture + (tim1_overflow_counter * 6400)) - tim1_ch1_last_capture);
 8003542:	4c78      	ldr	r4, [pc, #480]	; (8003724 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8003544:	682a      	ldr	r2, [r5, #0]
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	fb01 0003 	mla	r0, r1, r3, r0
 800354c:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_TIM_IC_CaptureCallback+0x248>)
 800354e:	1a80      	subs	r0, r0, r2
 8003550:	6018      	str	r0, [r3, #0]
			Trev[0] = no_counts[0] * (1/(double)72000.0) * 4;
 8003552:	f7fc ff3f 	bl	80003d4 <__aeabi_ui2d>
 8003556:	a360      	add	r3, pc, #384	; (adr r3, 80036d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fc ffb0 	bl	80004c0 <__aeabi_dmul>
 8003560:	2200      	movs	r2, #0
 8003562:	4b71      	ldr	r3, [pc, #452]	; (8003728 <HAL_TIM_IC_CaptureCallback+0x270>)
 8003564:	f7fc ffac 	bl	80004c0 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4966      	ldr	r1, [pc, #408]	; (8003708 <HAL_TIM_IC_CaptureCallback+0x250>)
			d1.Data.speed[0] = (1/Trev[0]) * (3.14 * 0.065) * ((double)5.0/18);
 800356e:	2000      	movs	r0, #0
			Trev[0] = no_counts[0] * (1/(double)72000.0) * 4;
 8003570:	e9c1 2300 	strd	r2, r3, [r1]
			d1.Data.speed[0] = (1/Trev[0]) * (3.14 * 0.065) * ((double)5.0/18);
 8003574:	4965      	ldr	r1, [pc, #404]	; (800370c <HAL_TIM_IC_CaptureCallback+0x254>)
 8003576:	f7fd f8cd 	bl	8000714 <__aeabi_ddiv>
 800357a:	a359      	add	r3, pc, #356	; (adr r3, 80036e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fc ff9e 	bl	80004c0 <__aeabi_dmul>
 8003584:	a358      	add	r3, pc, #352	; (adr r3, 80036e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc ff99 	bl	80004c0 <__aeabi_dmul>
 800358e:	4b61      	ldr	r3, [pc, #388]	; (8003714 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8003590:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
 8003594:	e7c3      	b.n	800351e <HAL_TIM_IC_CaptureCallback+0x66>
		else if (htim->Channel == 2)
 8003596:	2902      	cmp	r1, #2
 8003598:	d132      	bne.n	8003600 <HAL_TIM_IC_CaptureCallback+0x148>
			tim1_ch2_last_capture = tim1_ch2_capture;
 800359a:	4c64      	ldr	r4, [pc, #400]	; (800372c <HAL_TIM_IC_CaptureCallback+0x274>)
 800359c:	4d64      	ldr	r5, [pc, #400]	; (8003730 <HAL_TIM_IC_CaptureCallback+0x278>)
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	602b      	str	r3, [r5, #0]
			tim1_ch2_capture = HAL_TIM_ReadCapturedValue(&htim1, 2);
 80035a2:	f7ff fb81 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
			no_counts[1]=((tim1_ch2_capture + (tim1_overflow_counter * 6400)) - tim1_ch2_last_capture);
 80035a6:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
			tim1_ch2_capture = HAL_TIM_ReadCapturedValue(&htim1, 2);
 80035aa:	6020      	str	r0, [r4, #0]
			no_counts[1]=((tim1_ch2_capture + (tim1_overflow_counter * 6400)) - tim1_ch2_last_capture);
 80035ac:	4c5d      	ldr	r4, [pc, #372]	; (8003724 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80035ae:	682a      	ldr	r2, [r5, #0]
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	fb01 0003 	mla	r0, r1, r3, r0
 80035b6:	4b52      	ldr	r3, [pc, #328]	; (8003700 <HAL_TIM_IC_CaptureCallback+0x248>)
 80035b8:	1a80      	subs	r0, r0, r2
 80035ba:	6058      	str	r0, [r3, #4]
			Trev[1] = no_counts[1] * (1/(double)72000.0) * 4;
 80035bc:	f7fc ff0a 	bl	80003d4 <__aeabi_ui2d>
 80035c0:	a345      	add	r3, pc, #276	; (adr r3, 80036d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fc ff7b 	bl	80004c0 <__aeabi_dmul>
 80035ca:	2200      	movs	r2, #0
 80035cc:	4b56      	ldr	r3, [pc, #344]	; (8003728 <HAL_TIM_IC_CaptureCallback+0x270>)
 80035ce:	f7fc ff77 	bl	80004c0 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	494c      	ldr	r1, [pc, #304]	; (8003708 <HAL_TIM_IC_CaptureCallback+0x250>)
			d1.Data.speed[1] = (1/Trev[1]) * (3.14 * 0.065) * ((double)5.0/18);
 80035d8:	2000      	movs	r0, #0
			Trev[1] = no_counts[1] * (1/(double)72000.0) * 4;
 80035da:	e9c1 2302 	strd	r2, r3, [r1, #8]
			d1.Data.speed[1] = (1/Trev[1]) * (3.14 * 0.065) * ((double)5.0/18);
 80035de:	494b      	ldr	r1, [pc, #300]	; (800370c <HAL_TIM_IC_CaptureCallback+0x254>)
 80035e0:	f7fd f898 	bl	8000714 <__aeabi_ddiv>
 80035e4:	a33e      	add	r3, pc, #248	; (adr r3, 80036e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f7fc ff69 	bl	80004c0 <__aeabi_dmul>
 80035ee:	a33e      	add	r3, pc, #248	; (adr r3, 80036e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fc ff64 	bl	80004c0 <__aeabi_dmul>
 80035f8:	4b46      	ldr	r3, [pc, #280]	; (8003714 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80035fa:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
 80035fe:	e78e      	b.n	800351e <HAL_TIM_IC_CaptureCallback+0x66>
		else if (htim->Channel == 4)
 8003600:	2904      	cmp	r1, #4
 8003602:	d132      	bne.n	800366a <HAL_TIM_IC_CaptureCallback+0x1b2>
			tim1_ch3_last_capture = tim1_ch3_capture;
 8003604:	4c4b      	ldr	r4, [pc, #300]	; (8003734 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8003606:	4d4c      	ldr	r5, [pc, #304]	; (8003738 <HAL_TIM_IC_CaptureCallback+0x280>)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	602b      	str	r3, [r5, #0]
			tim1_ch3_capture = HAL_TIM_ReadCapturedValue(&htim1, 4);
 800360c:	f7ff fb4c 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
			no_counts[2] =((tim1_ch3_capture + (tim1_overflow_counter * 6400)) - tim1_ch3_last_capture);
 8003610:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
			tim1_ch3_capture = HAL_TIM_ReadCapturedValue(&htim1, 4);
 8003614:	6020      	str	r0, [r4, #0]
			no_counts[2] =((tim1_ch3_capture + (tim1_overflow_counter * 6400)) - tim1_ch3_last_capture);
 8003616:	4c43      	ldr	r4, [pc, #268]	; (8003724 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8003618:	682a      	ldr	r2, [r5, #0]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	fb01 0003 	mla	r0, r1, r3, r0
 8003620:	4b37      	ldr	r3, [pc, #220]	; (8003700 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003622:	1a80      	subs	r0, r0, r2
 8003624:	6098      	str	r0, [r3, #8]
			Trev[2] = no_counts[2] * (1/(double)72000.0) * 4;
 8003626:	f7fc fed5 	bl	80003d4 <__aeabi_ui2d>
 800362a:	a32b      	add	r3, pc, #172	; (adr r3, 80036d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f7fc ff46 	bl	80004c0 <__aeabi_dmul>
 8003634:	2200      	movs	r2, #0
 8003636:	4b3c      	ldr	r3, [pc, #240]	; (8003728 <HAL_TIM_IC_CaptureCallback+0x270>)
 8003638:	f7fc ff42 	bl	80004c0 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4931      	ldr	r1, [pc, #196]	; (8003708 <HAL_TIM_IC_CaptureCallback+0x250>)
			d1.Data.speed[2] = (1/Trev[2]) * (3.14 * 0.065) * ((double)5.0/18);
 8003642:	2000      	movs	r0, #0
			Trev[2] = no_counts[2] * (1/(double)72000.0) * 4;
 8003644:	e9c1 2304 	strd	r2, r3, [r1, #16]
			d1.Data.speed[2] = (1/Trev[2]) * (3.14 * 0.065) * ((double)5.0/18);
 8003648:	4930      	ldr	r1, [pc, #192]	; (800370c <HAL_TIM_IC_CaptureCallback+0x254>)
 800364a:	f7fd f863 	bl	8000714 <__aeabi_ddiv>
 800364e:	a324      	add	r3, pc, #144	; (adr r3, 80036e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fc ff34 	bl	80004c0 <__aeabi_dmul>
 8003658:	a323      	add	r3, pc, #140	; (adr r3, 80036e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f7fc ff2f 	bl	80004c0 <__aeabi_dmul>
 8003662:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8003664:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
 8003668:	e759      	b.n	800351e <HAL_TIM_IC_CaptureCallback+0x66>
		else if (htim->Channel == 8)
 800366a:	2908      	cmp	r1, #8
 800366c:	f47f af59 	bne.w	8003522 <HAL_TIM_IC_CaptureCallback+0x6a>
			tim1_ch4_last_capture = tim1_ch4_capture;
 8003670:	4c32      	ldr	r4, [pc, #200]	; (800373c <HAL_TIM_IC_CaptureCallback+0x284>)
 8003672:	4d33      	ldr	r5, [pc, #204]	; (8003740 <HAL_TIM_IC_CaptureCallback+0x288>)
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	602b      	str	r3, [r5, #0]
			tim1_ch4_capture = HAL_TIM_ReadCapturedValue(&htim1, 8);
 8003678:	f7ff fb16 	bl	8002ca8 <HAL_TIM_ReadCapturedValue>
			no_counts[3] =  ((tim1_ch4_capture + (tim1_overflow_counter * 6400)) - tim1_ch4_last_capture);
 800367c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
			tim1_ch4_capture = HAL_TIM_ReadCapturedValue(&htim1, 8);
 8003680:	6020      	str	r0, [r4, #0]
			no_counts[3] =  ((tim1_ch4_capture + (tim1_overflow_counter * 6400)) - tim1_ch4_last_capture);
 8003682:	4c28      	ldr	r4, [pc, #160]	; (8003724 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8003684:	682a      	ldr	r2, [r5, #0]
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	fb01 0003 	mla	r0, r1, r3, r0
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <HAL_TIM_IC_CaptureCallback+0x248>)
 800368e:	1a80      	subs	r0, r0, r2
 8003690:	60d8      	str	r0, [r3, #12]
			Trev[3] = no_counts[3] * (1/(double)72000.0) * 4;
 8003692:	f7fc fe9f 	bl	80003d4 <__aeabi_ui2d>
 8003696:	a310      	add	r3, pc, #64	; (adr r3, 80036d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f7fc ff10 	bl	80004c0 <__aeabi_dmul>
 80036a0:	2200      	movs	r2, #0
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <HAL_TIM_IC_CaptureCallback+0x270>)
 80036a4:	f7fc ff0c 	bl	80004c0 <__aeabi_dmul>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4916      	ldr	r1, [pc, #88]	; (8003708 <HAL_TIM_IC_CaptureCallback+0x250>)
			d1.Data.speed[3] = (1/Trev[3]) * (3.14 * 0.065) * ((double)5.0/18);
 80036ae:	2000      	movs	r0, #0
			Trev[3] = no_counts[3] * (1/(double)72000.0) * 4;
 80036b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			d1.Data.speed[3] = (1/Trev[3]) * (3.14 * 0.065) * ((double)5.0/18);
 80036b4:	4915      	ldr	r1, [pc, #84]	; (800370c <HAL_TIM_IC_CaptureCallback+0x254>)
 80036b6:	f7fd f82d 	bl	8000714 <__aeabi_ddiv>
 80036ba:	a309      	add	r3, pc, #36	; (adr r3, 80036e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f7fc fefe 	bl	80004c0 <__aeabi_dmul>
 80036c4:	a308      	add	r3, pc, #32	; (adr r3, 80036e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f7fc fef9 	bl	80004c0 <__aeabi_dmul>
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80036d0:	e9c3 0122 	strd	r0, r1, [r3, #136]	; 0x88
 80036d4:	e723      	b.n	800351e <HAL_TIM_IC_CaptureCallback+0x66>
 80036d6:	bf00      	nop
 80036d8:	5a912e32 	.word	0x5a912e32
 80036dc:	3eed208a 	.word	0x3eed208a
 80036e0:	e48e8a72 	.word	0xe48e8a72
 80036e4:	3fca1ff2 	.word	0x3fca1ff2
 80036e8:	71c71c72 	.word	0x71c71c72
 80036ec:	3fd1c71c 	.word	0x3fd1c71c
 80036f0:	200004cc 	.word	0x200004cc
 80036f4:	2000009c 	.word	0x2000009c
 80036f8:	200000a0 	.word	0x200000a0
 80036fc:	200000a4 	.word	0x200000a4
 8003700:	20000064 	.word	0x20000064
 8003704:	40280000 	.word	0x40280000
 8003708:	20000030 	.word	0x20000030
 800370c:	3ff00000 	.word	0x3ff00000
 8003710:	404e0000 	.word	0x404e0000
 8003714:	200001c0 	.word	0x200001c0
 8003718:	2000048c 	.word	0x2000048c
 800371c:	20000078 	.word	0x20000078
 8003720:	2000007c 	.word	0x2000007c
 8003724:	20000098 	.word	0x20000098
 8003728:	40100000 	.word	0x40100000
 800372c:	20000080 	.word	0x20000080
 8003730:	20000084 	.word	0x20000084
 8003734:	20000088 	.word	0x20000088
 8003738:	2000008c 	.word	0x2000008c
 800373c:	20000090 	.word	0x20000090
 8003740:	20000094 	.word	0x20000094

08003744 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8003748:	b510      	push	{r4, lr}
 800374a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800374c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800374e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003750:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003752:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003754:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003756:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800375c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800375e:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003760:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003762:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003764:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003766:	f7fe fe33 	bl	80023d0 <HAL_RCC_OscConfig>
 800376a:	b100      	cbz	r0, 800376e <SystemClock_Config+0x2a>
 800376c:	e7fe      	b.n	800376c <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800376e:	230f      	movs	r3, #15
 8003770:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003772:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003776:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003778:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800377a:	4621      	mov	r1, r4
 800377c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800377e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003780:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003782:	f7fe ffed 	bl	8002760 <HAL_RCC_ClockConfig>
 8003786:	b100      	cbz	r0, 800378a <SystemClock_Config+0x46>
 8003788:	e7fe      	b.n	8003788 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800378e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003790:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003792:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003794:	f7ff f89e 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8003798:	4604      	mov	r4, r0
 800379a:	b100      	cbz	r0, 800379e <SystemClock_Config+0x5a>
 800379c:	e7fe      	b.n	800379c <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800379e:	f7ff f883 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80037a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80037aa:	f7fd ffe1 	bl	8001770 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80037ae:	2004      	movs	r0, #4
 80037b0:	f7fd fff4 	bl	800179c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80037b4:	4622      	mov	r2, r4
 80037b6:	4621      	mov	r1, r4
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	f7fd ff98 	bl	80016f0 <HAL_NVIC_SetPriority>
}
 80037c0:	b014      	add	sp, #80	; 0x50
 80037c2:	bd10      	pop	{r4, pc}

080037c4 <main>:
{
 80037c4:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 80037c6:	f7fd fb4f 	bl	8000e68 <HAL_Init>
  SystemClock_Config();
 80037ca:	f7ff ffbb 	bl	8003744 <SystemClock_Config>
  MX_GPIO_Init();
 80037ce:	f7ff fdc1 	bl	8003354 <MX_GPIO_Init>
  MX_DMA_Init();
 80037d2:	f7ff fda7 	bl	8003324 <MX_DMA_Init>
  MX_TIM1_Init();
 80037d6:	f000 fb57 	bl	8003e88 <MX_TIM1_Init>
  MX_TIM2_Init();
 80037da:	f000 fbc3 	bl	8003f64 <MX_TIM2_Init>
  MX_ADC1_Init();
 80037de:	f7ff fca5 	bl	800312c <MX_ADC1_Init>
  MX_TIM3_Init();
 80037e2:	f000 fc0d 	bl	8004000 <MX_TIM3_Init>
  MX_CAN_Init();
 80037e6:	f7ff fd3f 	bl	8003268 <MX_CAN_Init>
  MX_I2C2_Init();
 80037ea:	f7ff fde9 	bl	80033c0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80037ee:	f000 fa45 	bl	8003c7c <MX_SPI1_Init>
  HAL_CAN_Init(&hcan);
 80037f2:	487a      	ldr	r0, [pc, #488]	; (80039dc <main+0x218>)
 80037f4:	f7fd fe0d 	bl	8001412 <HAL_CAN_Init>
  HAL_SPI_Init(&hspi1);
 80037f8:	4879      	ldr	r0, [pc, #484]	; (80039e0 <main+0x21c>)
 80037fa:	f7ff f955 	bl	8002aa8 <HAL_SPI_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80037fe:	4879      	ldr	r0, [pc, #484]	; (80039e4 <main+0x220>)
 8003800:	f7ff f98d 	bl	8002b1e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003804:	4878      	ldr	r0, [pc, #480]	; (80039e8 <main+0x224>)
 8003806:	f7ff f98a 	bl	8002b1e <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800380a:	2100      	movs	r1, #0
 800380c:	4875      	ldr	r0, [pc, #468]	; (80039e4 <main+0x220>)
 800380e:	f7ff fc3d 	bl	800308c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8003812:	2104      	movs	r1, #4
 8003814:	4873      	ldr	r0, [pc, #460]	; (80039e4 <main+0x220>)
 8003816:	f7ff fc39 	bl	800308c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800381a:	2108      	movs	r1, #8
 800381c:	4871      	ldr	r0, [pc, #452]	; (80039e4 <main+0x220>)
 800381e:	f7ff fc35 	bl	800308c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8003822:	210c      	movs	r1, #12
 8003824:	486f      	ldr	r0, [pc, #444]	; (80039e4 <main+0x220>)
 8003826:	f7ff fc31 	bl	800308c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800382a:	2100      	movs	r1, #0
 800382c:	486e      	ldr	r0, [pc, #440]	; (80039e8 <main+0x224>)
 800382e:	f7ff fc2d 	bl	800308c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8003832:	486e      	ldr	r0, [pc, #440]	; (80039ec <main+0x228>)
 8003834:	f7ff f973 	bl	8002b1e <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_reading,4);
 8003838:	2204      	movs	r2, #4
 800383a:	496d      	ldr	r1, [pc, #436]	; (80039f0 <main+0x22c>)
 800383c:	486d      	ldr	r0, [pc, #436]	; (80039f4 <main+0x230>)
 800383e:	f7fd fcb7 	bl	80011b0 <HAL_ADC_Start_DMA>
  MPU6050_Init(&hi2c2, MPU6050_ADDRESS_AD0LOW, FULLSCALE_250, FULLSCALE_2g, SAMPLERATE_1KHz,&mpu1);
 8003842:	2307      	movs	r3, #7
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	2300      	movs	r3, #0
 8003848:	4d6b      	ldr	r5, [pc, #428]	; (80039f8 <main+0x234>)
 800384a:	461a      	mov	r2, r3
 800384c:	9501      	str	r5, [sp, #4]
 800384e:	21d0      	movs	r1, #208	; 0xd0
 8003850:	486a      	ldr	r0, [pc, #424]	; (80039fc <main+0x238>)
 8003852:	f000 f8e1 	bl	8003a18 <MPU6050_Init>
	  TxMessage1.Data[0] =((uint16_t)((mpu1.accelerometer_x+2)*100))>>8;//mpu acc max is 2g
 8003856:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 800385a:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8003a0c <main+0x248>
	  TxMessage1.Data[0] =((uint16_t)((mpu1.gyroscope_x)+250))>>8;//mpu gyro
 800385e:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003a10 <main+0x24c>
	  MPU6050_ReadRawData(&hi2c2,MPU6050_ADDRESS_AD0LOW,&mpu1);
 8003862:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <main+0x234>)
 8003864:	21d0      	movs	r1, #208	; 0xd0
 8003866:	4865      	ldr	r0, [pc, #404]	; (80039fc <main+0x238>)
 8003868:	f000 f974 	bl	8003b54 <MPU6050_ReadRawData>
	  TxMessage1.StdId = 2000;
 800386c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003870:	4c63      	ldr	r4, [pc, #396]	; (8003a00 <main+0x23c>)
	  hcan.pTxMsg = &TxMessage1;
 8003872:	4e5a      	ldr	r6, [pc, #360]	; (80039dc <main+0x218>)
	  TxMessage1.StdId = 2000;
 8003874:	6023      	str	r3, [r4, #0]
	  TxMessage1.RTR = CAN_RTR_DATA;
 8003876:	2300      	movs	r3, #0
 8003878:	60e3      	str	r3, [r4, #12]
	  TxMessage1.IDE = CAN_ID_STD;
 800387a:	60a3      	str	r3, [r4, #8]
	  TxMessage1.DLC = 7;
 800387c:	2307      	movs	r3, #7
	  TxMessage1.Data[0] =d1.Data.speed[0];//spped
 800387e:	4f61      	ldr	r7, [pc, #388]	; (8003a04 <main+0x240>)
	  TxMessage1.DLC = 7;
 8003880:	6123      	str	r3, [r4, #16]
	  hcan.pTxMsg = &TxMessage1;
 8003882:	6334      	str	r4, [r6, #48]	; 0x30
	  TxMessage1.Data[0] =d1.Data.speed[0];//spped
 8003884:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003890:	f7fd f828 	bl	80008e4 <__aeabi_d2uiz>
	  TxMessage1.Data[1] =d1.Data.speed[1];//speed
 8003894:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
	  TxMessage1.Data[0] =d1.Data.speed[0];//spped
 8003898:	7520      	strb	r0, [r4, #20]
	  TxMessage1.Data[1] =d1.Data.speed[1];//speed
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038a2:	f7fd f81f 	bl	80008e4 <__aeabi_d2uiz>
 80038a6:	7560      	strb	r0, [r4, #21]
	  TxMessage1.Data[2] =d1.Data.speed[2];//speed
 80038a8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038ac:	f7fd f81a 	bl	80008e4 <__aeabi_d2uiz>
 80038b0:	75a0      	strb	r0, [r4, #22]
	  TxMessage1.Data[3] =d1.Data.speed[3];//speed
 80038b2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80038b6:	f7fd f815 	bl	80008e4 <__aeabi_d2uiz>
	  TxMessage1.Data[4] =(uint8_t)(d1.Data.speed[0] + d1.Data.speed[1])/2;//avg
 80038ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	  TxMessage1.Data[3] =d1.Data.speed[3];//speed
 80038be:	75e0      	strb	r0, [r4, #23]
	  TxMessage1.Data[4] =(uint8_t)(d1.Data.speed[0] + d1.Data.speed[1])/2;//avg
 80038c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038c4:	f7fc fc4a 	bl	800015c <__adddf3>
 80038c8:	f7fd f80c 	bl	80008e4 <__aeabi_d2uiz>
 80038cc:	f3c0 0046 	ubfx	r0, r0, #1, #7
 80038d0:	7620      	strb	r0, [r4, #24]
	  TxMessage1.Data[5] =((uint16_t)(d1.Data.speed[4]))>>8;//most byte rpm
 80038d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80038d6:	f7fd f805 	bl	80008e4 <__aeabi_d2uiz>
 80038da:	b280      	uxth	r0, r0
 80038dc:	0a03      	lsrs	r3, r0, #8
	  TxMessage1.Data[6] =((uint16_t)(d1.Data.speed[4]));//least byte rpm
 80038de:	76a0      	strb	r0, [r4, #26]
	  HAL_CAN_Transmit(&hcan, 10);
 80038e0:	210a      	movs	r1, #10
 80038e2:	4630      	mov	r0, r6
	  TxMessage1.Data[5] =((uint16_t)(d1.Data.speed[4]))>>8;//most byte rpm
 80038e4:	7663      	strb	r3, [r4, #25]
	  HAL_CAN_Transmit(&hcan, 10);
 80038e6:	f7fd fe21 	bl	800152c <HAL_CAN_Transmit>
	  HAL_Delay(1000);
 80038ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ee:	f7fd fadf 	bl	8000eb0 <HAL_Delay>
	  TxMessage1.StdId = 1998;
 80038f2:	f240 73ce 	movw	r3, #1998	; 0x7ce
 80038f6:	6023      	str	r3, [r4, #0]
	  TxMessage1.DLC = 4;
 80038f8:	2304      	movs	r3, #4
 80038fa:	6123      	str	r3, [r4, #16]
	  TxMessage1.Data[0] =measured_distance[0];//sus
 80038fc:	4b42      	ldr	r3, [pc, #264]	; (8003a08 <main+0x244>)
	  HAL_CAN_Transmit(&hcan, 10);
 80038fe:	210a      	movs	r1, #10
	  TxMessage1.Data[0] =measured_distance[0];//sus
 8003900:	781a      	ldrb	r2, [r3, #0]
	  HAL_CAN_Transmit(&hcan, 10);
 8003902:	4630      	mov	r0, r6
	  TxMessage1.Data[0] =measured_distance[0];//sus
 8003904:	7522      	strb	r2, [r4, #20]
	  TxMessage1.Data[1] =measured_distance[1];//sus
 8003906:	785a      	ldrb	r2, [r3, #1]
	  TxMessage1.DLC = 6;
 8003908:	2706      	movs	r7, #6
	  TxMessage1.Data[1] =measured_distance[1];//sus
 800390a:	7562      	strb	r2, [r4, #21]
	  TxMessage1.Data[2] =measured_distance[2];//sus
 800390c:	789a      	ldrb	r2, [r3, #2]
	  TxMessage1.Data[3] =measured_distance[3];//sus
 800390e:	78db      	ldrb	r3, [r3, #3]
	  TxMessage1.Data[2] =measured_distance[2];//sus
 8003910:	75a2      	strb	r2, [r4, #22]
	  TxMessage1.Data[3] =measured_distance[3];//sus
 8003912:	75e3      	strb	r3, [r4, #23]
	  HAL_CAN_Transmit(&hcan, 10);
 8003914:	f7fd fe0a 	bl	800152c <HAL_CAN_Transmit>
	  HAL_Delay(1000);
 8003918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800391c:	f7fd fac8 	bl	8000eb0 <HAL_Delay>
	  TxMessage1.StdId = 2002;
 8003920:	f240 73d2 	movw	r3, #2002	; 0x7d2
	  TxMessage1.Data[0] =((uint16_t)((mpu1.accelerometer_x+2)*100))>>8;//mpu acc max is 2g
 8003924:	4651      	mov	r1, sl
	  TxMessage1.StdId = 2002;
 8003926:	6023      	str	r3, [r4, #0]
	  TxMessage1.Data[0] =((uint16_t)((mpu1.accelerometer_x+2)*100))>>8;//mpu acc max is 2g
 8003928:	68e8      	ldr	r0, [r5, #12]
	  TxMessage1.DLC = 6;
 800392a:	6127      	str	r7, [r4, #16]
	  TxMessage1.Data[0] =((uint16_t)((mpu1.accelerometer_x+2)*100))>>8;//mpu acc max is 2g
 800392c:	f7fd f800 	bl	8000930 <__addsf3>
 8003930:	4649      	mov	r1, r9
 8003932:	f7fd f905 	bl	8000b40 <__aeabi_fmul>
 8003936:	f7fd fa53 	bl	8000de0 <__aeabi_f2uiz>
 800393a:	b280      	uxth	r0, r0
 800393c:	0a03      	lsrs	r3, r0, #8
 800393e:	7523      	strb	r3, [r4, #20]
	  TxMessage1.Data[1] =((uint16_t)((mpu1.accelerometer_x+2)*100));
 8003940:	7560      	strb	r0, [r4, #21]
	  TxMessage1.Data[2] =((uint16_t)((mpu1.accelerometer_y+2)*100))>>8;//mpu
 8003942:	4651      	mov	r1, sl
 8003944:	6928      	ldr	r0, [r5, #16]
 8003946:	f7fc fff3 	bl	8000930 <__addsf3>
 800394a:	4649      	mov	r1, r9
 800394c:	f7fd f8f8 	bl	8000b40 <__aeabi_fmul>
 8003950:	f7fd fa46 	bl	8000de0 <__aeabi_f2uiz>
 8003954:	b280      	uxth	r0, r0
 8003956:	0a03      	lsrs	r3, r0, #8
 8003958:	75a3      	strb	r3, [r4, #22]
	  TxMessage1.Data[3] =((uint16_t)((mpu1.accelerometer_y+2)*100));
 800395a:	75e0      	strb	r0, [r4, #23]
	  TxMessage1.Data[4] =((uint16_t)((mpu1.accelerometer_z+2)*100))>>8;//mpu
 800395c:	4651      	mov	r1, sl
 800395e:	6968      	ldr	r0, [r5, #20]
 8003960:	f7fc ffe6 	bl	8000930 <__addsf3>
 8003964:	4649      	mov	r1, r9
 8003966:	f7fd f8eb 	bl	8000b40 <__aeabi_fmul>
 800396a:	f7fd fa39 	bl	8000de0 <__aeabi_f2uiz>
 800396e:	b280      	uxth	r0, r0
 8003970:	0a03      	lsrs	r3, r0, #8
	  TxMessage1.Data[5] =((uint16_t)((mpu1.accelerometer_z+2)*100));
 8003972:	7660      	strb	r0, [r4, #25]
	  HAL_CAN_Transmit(&hcan, 10);
 8003974:	210a      	movs	r1, #10
 8003976:	4630      	mov	r0, r6
	  TxMessage1.Data[4] =((uint16_t)((mpu1.accelerometer_z+2)*100))>>8;//mpu
 8003978:	7623      	strb	r3, [r4, #24]
	  HAL_CAN_Transmit(&hcan, 10);
 800397a:	f7fd fdd7 	bl	800152c <HAL_CAN_Transmit>
	  HAL_Delay(1000);
 800397e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003982:	f7fd fa95 	bl	8000eb0 <HAL_Delay>
	  TxMessage1.StdId = 2003;
 8003986:	f240 73d3 	movw	r3, #2003	; 0x7d3
	  TxMessage1.Data[0] =((uint16_t)((mpu1.gyroscope_x)+250))>>8;//mpu gyro
 800398a:	4641      	mov	r1, r8
	  TxMessage1.StdId = 2003;
 800398c:	6023      	str	r3, [r4, #0]
	  TxMessage1.Data[0] =((uint16_t)((mpu1.gyroscope_x)+250))>>8;//mpu gyro
 800398e:	6828      	ldr	r0, [r5, #0]
	  TxMessage1.DLC = 6;
 8003990:	6127      	str	r7, [r4, #16]
	  TxMessage1.Data[0] =((uint16_t)((mpu1.gyroscope_x)+250))>>8;//mpu gyro
 8003992:	f7fc ffcd 	bl	8000930 <__addsf3>
 8003996:	f7fd fa23 	bl	8000de0 <__aeabi_f2uiz>
 800399a:	b280      	uxth	r0, r0
 800399c:	0a03      	lsrs	r3, r0, #8
 800399e:	7523      	strb	r3, [r4, #20]
	  TxMessage1.Data[2] =((uint16_t)((mpu1.gyroscope_y)+250))>>8;//mpu
 80039a0:	4641      	mov	r1, r8
	  TxMessage1.Data[1] =((uint16_t)((mpu1.gyroscope_x)+250));
 80039a2:	7560      	strb	r0, [r4, #21]
	  TxMessage1.Data[2] =((uint16_t)((mpu1.gyroscope_y)+250))>>8;//mpu
 80039a4:	6868      	ldr	r0, [r5, #4]
 80039a6:	f7fc ffc3 	bl	8000930 <__addsf3>
 80039aa:	f7fd fa19 	bl	8000de0 <__aeabi_f2uiz>
 80039ae:	b280      	uxth	r0, r0
 80039b0:	0a03      	lsrs	r3, r0, #8
 80039b2:	75a3      	strb	r3, [r4, #22]
	  TxMessage1.Data[4] =((uint16_t)((mpu1.gyroscope_z)+250))>>8;//mpu
 80039b4:	4641      	mov	r1, r8
	  TxMessage1.Data[3] =((uint16_t)((mpu1.gyroscope_y)+250));
 80039b6:	75e0      	strb	r0, [r4, #23]
	  TxMessage1.Data[4] =((uint16_t)((mpu1.gyroscope_z)+250))>>8;//mpu
 80039b8:	68a8      	ldr	r0, [r5, #8]
 80039ba:	f7fc ffb9 	bl	8000930 <__addsf3>
 80039be:	f7fd fa0f 	bl	8000de0 <__aeabi_f2uiz>
 80039c2:	b280      	uxth	r0, r0
 80039c4:	0a03      	lsrs	r3, r0, #8
	  TxMessage1.Data[5] =((uint16_t)((mpu1.gyroscope_z)+250));
 80039c6:	7660      	strb	r0, [r4, #25]
	  HAL_CAN_Transmit(&hcan, 10);
 80039c8:	210a      	movs	r1, #10
 80039ca:	4630      	mov	r0, r6
	  TxMessage1.Data[4] =((uint16_t)((mpu1.gyroscope_z)+250))>>8;//mpu
 80039cc:	7623      	strb	r3, [r4, #24]
	  HAL_CAN_Transmit(&hcan, 10);
 80039ce:	f7fd fdad 	bl	800152c <HAL_CAN_Transmit>
	  HAL_Delay(1000);
 80039d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039d6:	f7fd fa6b 	bl	8000eb0 <HAL_Delay>
 80039da:	e742      	b.n	8003862 <main+0x9e>
 80039dc:	20000128 	.word	0x20000128
 80039e0:	200003f4 	.word	0x200003f4
 80039e4:	2000048c 	.word	0x2000048c
 80039e8:	200004cc 	.word	0x200004cc
 80039ec:	2000044c 	.word	0x2000044c
 80039f0:	20000058 	.word	0x20000058
 80039f4:	200000b4 	.word	0x200000b4
 80039f8:	200003dc 	.word	0x200003dc
 80039fc:	2000016c 	.word	0x2000016c
 8003a00:	200003c0 	.word	0x200003c0
 8003a04:	200001c0 	.word	0x200001c0
 8003a08:	20000060 	.word	0x20000060
 8003a0c:	42c80000 	.word	0x42c80000
 8003a10:	437a0000 	.word	0x437a0000

08003a14 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003a14:	e7fe      	b.n	8003a14 <_Error_Handler>
	...

08003a18 <MPU6050_Init>:
	              MPU6050_I2CAddress address,
				  MPU6050_GyroFS gyro_FS,
				  MPU6050_AccelFS accel_FS,
				  MPU6050_SamplingRate sampling_rate,
				  MPU6050_Readings* mpu)
{
 8003a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	uint8_t data_buffer[2];
	/*wake up MPU from sleep mode*/
	data_buffer[0]=MPU6050_PWR_MGMT_1;
	data_buffer[1]=SLEEPMODE_OFF;
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a1c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
{
 8003a20:	461e      	mov	r6, r3
	data_buffer[0]=MPU6050_PWR_MGMT_1;
 8003a22:	236b      	movs	r3, #107	; 0x6b
	data_buffer[1]=SLEEPMODE_OFF;
 8003a24:	f04f 0800 	mov.w	r8, #0
{
 8003a28:	b085      	sub	sp, #20
 8003a2a:	4617      	mov	r7, r2
	data_buffer[0]=MPU6050_PWR_MGMT_1;
 8003a2c:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a30:	aa03      	add	r2, sp, #12
 8003a32:	2302      	movs	r3, #2
 8003a34:	9500      	str	r5, [sp, #0]
 8003a36:	460c      	mov	r4, r1
{
 8003a38:	4681      	mov	r9, r0
	data_buffer[1]=SLEEPMODE_OFF;
 8003a3a:	f88d 800d 	strb.w	r8, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a3e:	f7fe fa6f 	bl	8001f20 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f7fd fa34 	bl	8000eb0 <HAL_Delay>

	data_buffer[0]=MPU6050_PWR_MGMT_2;
 8003a48:	236c      	movs	r3, #108	; 0x6c
	data_buffer[1]=ACC_GYRO_ENABLE;
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a4a:	aa03      	add	r2, sp, #12
 8003a4c:	4621      	mov	r1, r4
	data_buffer[0]=MPU6050_PWR_MGMT_2;
 8003a4e:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a52:	9500      	str	r5, [sp, #0]
 8003a54:	2302      	movs	r3, #2
 8003a56:	4648      	mov	r0, r9
	data_buffer[1]=ACC_GYRO_ENABLE;
 8003a58:	f88d 800d 	strb.w	r8, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a5c:	f7fe fa60 	bl	8001f20 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7fd fa25 	bl	8000eb0 <HAL_Delay>

	//temp_scale = WriteReg(MPUREG_ACCEL_CONFIG | 0x80, 0x00);
	//HAL_Delay(1);

	data_buffer[0]=MPU6050_CONFIG;
 8003a66:	231a      	movs	r3, #26
	data_buffer[1]=DLPF_CFG_188HZ;
 8003a68:	f04f 0801 	mov.w	r8, #1
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a6c:	aa03      	add	r2, sp, #12
 8003a6e:	4621      	mov	r1, r4
	data_buffer[0]=MPU6050_CONFIG;
 8003a70:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a74:	9500      	str	r5, [sp, #0]
 8003a76:	2302      	movs	r3, #2
 8003a78:	4648      	mov	r0, r9
	data_buffer[1]=DLPF_CFG_188HZ;
 8003a7a:	f88d 800d 	strb.w	r8, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a7e:	f7fe fa4f 	bl	8001f20 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8003a82:	4640      	mov	r0, r8
 8003a84:	f7fd fa14 	bl	8000eb0 <HAL_Delay>

	/*set full scale of gyroscope*/
	data_buffer[0]= MPU6050_GYRO_CONFIG;
 8003a88:	231b      	movs	r3, #27
	data_buffer[1]=gyro_FS;
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a8a:	aa03      	add	r2, sp, #12
 8003a8c:	4621      	mov	r1, r4
	data_buffer[0]= MPU6050_GYRO_CONFIG;
 8003a8e:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a92:	9500      	str	r5, [sp, #0]
 8003a94:	2302      	movs	r3, #2
 8003a96:	4648      	mov	r0, r9
	data_buffer[1]=gyro_FS;
 8003a98:	f88d 700d 	strb.w	r7, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003a9c:	f7fe fa40 	bl	8001f20 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	f7fd fa05 	bl	8000eb0 <HAL_Delay>

	/*set full scale of accelerometer*/
	data_buffer[0]= MPU6050_ACCEL_CONFIG;
 8003aa6:	231c      	movs	r3, #28
	data_buffer[1]=accel_FS;
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003aa8:	aa03      	add	r2, sp, #12
 8003aaa:	4621      	mov	r1, r4
	data_buffer[0]= MPU6050_ACCEL_CONFIG;
 8003aac:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003ab0:	9500      	str	r5, [sp, #0]
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	4648      	mov	r0, r9
	data_buffer[1]=accel_FS;
 8003ab6:	f88d 600d 	strb.w	r6, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003aba:	f7fe fa31 	bl	8001f20 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8003abe:	4640      	mov	r0, r8
 8003ac0:	f7fd f9f6 	bl	8000eb0 <HAL_Delay>

	/*select sampling rate*/
	data_buffer[0]=MPU6050_SMPLRT_DIV;
 8003ac4:	2319      	movs	r3, #25
 8003ac6:	f88d 300c 	strb.w	r3, [sp, #12]
	data_buffer[1]=sampling_rate;
 8003aca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003ace:	aa03      	add	r2, sp, #12
	data_buffer[1]=sampling_rate;
 8003ad0:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	9500      	str	r5, [sp, #0]
 8003ada:	4648      	mov	r0, r9
 8003adc:	f7fe fa20 	bl	8001f20 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	f7fd f9e5 	bl	8000eb0 <HAL_Delay>

	/*select multiplying factor that used to convert raw data to actual readings*/
	switch (gyro_FS)
 8003ae6:	2f08      	cmp	r7, #8
 8003ae8:	d012      	beq.n	8003b10 <MPU6050_Init+0xf8>
 8003aea:	d807      	bhi.n	8003afc <MPU6050_Init+0xe4>
 8003aec:	b167      	cbz	r7, 8003b08 <MPU6050_Init+0xf0>
			default:
				break;
		}

	/*select multiplying factor that used to convert raw data to actual readings*/
	switch (accel_FS)
 8003aee:	2e08      	cmp	r6, #8
 8003af0:	d01e      	beq.n	8003b30 <MPU6050_Init+0x118>
 8003af2:	d811      	bhi.n	8003b18 <MPU6050_Init+0x100>
 8003af4:	b1be      	cbz	r6, 8003b26 <MPU6050_Init+0x10e>
				accel_divider =  MPU6050_ACCE_DIVIDER_16;
				break;
			default:
				break;
		}
}
 8003af6:	b005      	add	sp, #20
 8003af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (gyro_FS)
 8003afc:	2f10      	cmp	r7, #16
 8003afe:	d009      	beq.n	8003b14 <MPU6050_Init+0xfc>
 8003b00:	2f18      	cmp	r7, #24
 8003b02:	d1f4      	bne.n	8003aee <MPU6050_Init+0xd6>
				gyro_divider =  MPU6050_GYRO_DIVIDER_2000;
 8003b04:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <MPU6050_Init+0x124>)
 8003b06:	e000      	b.n	8003b0a <MPU6050_Init+0xf2>
				gyro_divider = MPU6050_GYRO_DIVIDER_250;
 8003b08:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <MPU6050_Init+0x128>)
				gyro_divider =  MPU6050_GYRO_DIVIDER_2000;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <MPU6050_Init+0x12c>)
 8003b0c:	601a      	str	r2, [r3, #0]
				break;
 8003b0e:	e7ee      	b.n	8003aee <MPU6050_Init+0xd6>
				gyro_divider =  MPU6050_GYRO_DIVIDER_500;
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <MPU6050_Init+0x130>)
 8003b12:	e7fa      	b.n	8003b0a <MPU6050_Init+0xf2>
				gyro_divider =  MPU6050_GYRO_DIVIDER_1000;
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <MPU6050_Init+0x134>)
 8003b16:	e7f8      	b.n	8003b0a <MPU6050_Init+0xf2>
	switch (accel_FS)
 8003b18:	2e10      	cmp	r6, #16
 8003b1a:	d00c      	beq.n	8003b36 <MPU6050_Init+0x11e>
 8003b1c:	2e18      	cmp	r6, #24
 8003b1e:	d1ea      	bne.n	8003af6 <MPU6050_Init+0xde>
				accel_divider =  MPU6050_ACCE_DIVIDER_16;
 8003b20:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8003b24:	e001      	b.n	8003b2a <MPU6050_Init+0x112>
				accel_divider =  MPU6050_ACCE_DIVIDER_2;
 8003b26:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
				accel_divider =  MPU6050_ACCE_DIVIDER_16;
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <MPU6050_Init+0x138>)
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	e7e2      	b.n	8003af6 <MPU6050_Init+0xde>
				accel_divider =  MPU6050_ACCE_DIVIDER_4;
 8003b30:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8003b34:	e7f9      	b.n	8003b2a <MPU6050_Init+0x112>
				accel_divider =  MPU6050_ACCE_DIVIDER_8;
 8003b36:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8003b3a:	e7f6      	b.n	8003b2a <MPU6050_Init+0x112>
 8003b3c:	41833333 	.word	0x41833333
 8003b40:	43030000 	.word	0x43030000
 8003b44:	200000ac 	.word	0x200000ac
 8003b48:	42830000 	.word	0x42830000
 8003b4c:	42033333 	.word	0x42033333
 8003b50:	200000a8 	.word	0x200000a8

08003b54 <MPU6050_ReadRawData>:
					  MPU6050_I2CAddress address,
					  MPU6050_Readings* mpu)
{
    uint8_t data_buffer[7];
	/*read raw data of gyroscope*/
	data_buffer[0]=MPU6050_GYRO_XOUT_H;
 8003b54:	2343      	movs	r3, #67	; 0x43
{
 8003b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8003b5a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 8003b5e:	4682      	mov	sl, r0
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8003b60:	460f      	mov	r7, r1
{
 8003b62:	b085      	sub	sp, #20
	data_buffer[0]=MPU6050_GYRO_XOUT_H;
 8003b64:	f10d 0910 	add.w	r9, sp, #16
 8003b68:	f809 3d08 	strb.w	r3, [r9, #-8]!
{
 8003b6c:	4614      	mov	r4, r2
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8003b6e:	f8cd 8000 	str.w	r8, [sp]
 8003b72:	464a      	mov	r2, r9
 8003b74:	2301      	movs	r3, #1
 8003b76:	f7fe f9d3 	bl	8001f20 <HAL_I2C_Master_Transmit>
	//while(HAL_I2C_Master_Receive(hi2c,(uint16_t)address,&data_buffer[1],6,1000)!=HAL_OK);
	HAL_I2C_Master_Receive(hi2c,(uint16_t)address,&data_buffer[1],6,1000);
 8003b7a:	f10d 0209 	add.w	r2, sp, #9
 8003b7e:	4639      	mov	r1, r7
 8003b80:	f8cd 8000 	str.w	r8, [sp]
 8003b84:	2306      	movs	r3, #6
 8003b86:	4650      	mov	r0, sl
 8003b88:	f7fe faa0 	bl	80020cc <HAL_I2C_Master_Receive>
	int16_t raw_readings[3];
	raw_readings[0]=((int16_t)data_buffer[1]<<8)| data_buffer[2];
	raw_readings[1]=((int16_t)data_buffer[3]<<8)| data_buffer[4];
 8003b8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003b90:	f89d 600c 	ldrb.w	r6, [sp, #12]
	raw_readings[2]=((int16_t)data_buffer[5]<<8)| data_buffer[6];
 8003b94:	f89d 500e 	ldrb.w	r5, [sp, #14]
	raw_readings[1]=((int16_t)data_buffer[3]<<8)| data_buffer[4];
 8003b98:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	raw_readings[2]=((int16_t)data_buffer[5]<<8)| data_buffer[6];
 8003b9c:	f89d 300d 	ldrb.w	r3, [sp, #13]
	raw_readings[0]=((int16_t)data_buffer[1]<<8)| data_buffer[2];
 8003ba0:	f89d 000a 	ldrb.w	r0, [sp, #10]
	raw_readings[2]=((int16_t)data_buffer[5]<<8)| data_buffer[6];
 8003ba4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	mpu->gyroscope_x=(float)raw_readings[0]/gyro_divider;
 8003ba8:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <MPU6050_ReadRawData+0x120>)
	raw_readings[1]=((int16_t)data_buffer[3]<<8)| data_buffer[4];
 8003baa:	b236      	sxth	r6, r6
	mpu->gyroscope_x=(float)raw_readings[0]/gyro_divider;
 8003bac:	f8d3 b000 	ldr.w	fp, [r3]
	raw_readings[0]=((int16_t)data_buffer[1]<<8)| data_buffer[2];
 8003bb0:	f89d 3009 	ldrb.w	r3, [sp, #9]
	raw_readings[2]=((int16_t)data_buffer[5]<<8)| data_buffer[6];
 8003bb4:	b22d      	sxth	r5, r5
	raw_readings[0]=((int16_t)data_buffer[1]<<8)| data_buffer[2];
 8003bb6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	mpu->gyroscope_x=(float)raw_readings[0]/gyro_divider;
 8003bba:	b200      	sxth	r0, r0
 8003bbc:	f7fc ff6c 	bl	8000a98 <__aeabi_i2f>
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	f7fd f871 	bl	8000ca8 <__aeabi_fdiv>
 8003bc6:	6020      	str	r0, [r4, #0]
	mpu->gyroscope_y=(float)raw_readings[1]/gyro_divider;
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f7fc ff65 	bl	8000a98 <__aeabi_i2f>
 8003bce:	4659      	mov	r1, fp
 8003bd0:	f7fd f86a 	bl	8000ca8 <__aeabi_fdiv>
 8003bd4:	6060      	str	r0, [r4, #4]
	mpu->gyroscope_z=(float)raw_readings[2]/gyro_divider;
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f7fc ff5e 	bl	8000a98 <__aeabi_i2f>
 8003bdc:	4659      	mov	r1, fp
 8003bde:	f7fd f863 	bl	8000ca8 <__aeabi_fdiv>
 8003be2:	60a0      	str	r0, [r4, #8]
	HAL_Delay(20);
 8003be4:	2014      	movs	r0, #20
 8003be6:	f7fd f963 	bl	8000eb0 <HAL_Delay>

	/*read data of accelerometer*/
	data_buffer[0]=MPU6050_ACCEL_XOUT_H;
 8003bea:	233b      	movs	r3, #59	; 0x3b
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8003bec:	464a      	mov	r2, r9
	data_buffer[0]=MPU6050_ACCEL_XOUT_H;
 8003bee:	f88d 3008 	strb.w	r3, [sp, #8]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8003bf2:	4639      	mov	r1, r7
 8003bf4:	f8cd 8000 	str.w	r8, [sp]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	4650      	mov	r0, sl
 8003bfc:	f7fe f990 	bl	8001f20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c,(uint16_t)address,&data_buffer[1],6,1000);
 8003c00:	f10d 0209 	add.w	r2, sp, #9
 8003c04:	4639      	mov	r1, r7
 8003c06:	f8cd 8000 	str.w	r8, [sp]
 8003c0a:	2306      	movs	r3, #6
 8003c0c:	4650      	mov	r0, sl
 8003c0e:	f7fe fa5d 	bl	80020cc <HAL_I2C_Master_Receive>
	raw_readings[0]=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
	raw_readings[1]=(int16_t)(data_buffer[3]<<8)| data_buffer[4];
 8003c12:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003c16:	f89d 600c 	ldrb.w	r6, [sp, #12]
	raw_readings[2]=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
 8003c1a:	f89d 500e 	ldrb.w	r5, [sp, #14]
	raw_readings[1]=(int16_t)(data_buffer[3]<<8)| data_buffer[4];
 8003c1e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	raw_readings[2]=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
 8003c22:	f89d 300d 	ldrb.w	r3, [sp, #13]
	raw_readings[0]=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
 8003c26:	f89d 000a 	ldrb.w	r0, [sp, #10]
	raw_readings[2]=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
 8003c2a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	mpu->accelerometer_x=(float)raw_readings[0]/accel_divider;
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <MPU6050_ReadRawData+0x124>)
	raw_readings[1]=(int16_t)(data_buffer[3]<<8)| data_buffer[4];
 8003c30:	b236      	sxth	r6, r6
	mpu->accelerometer_x=(float)raw_readings[0]/accel_divider;
 8003c32:	681f      	ldr	r7, [r3, #0]
	raw_readings[0]=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
 8003c34:	f89d 3009 	ldrb.w	r3, [sp, #9]
	raw_readings[2]=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
 8003c38:	b22d      	sxth	r5, r5
	raw_readings[0]=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
 8003c3a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	mpu->accelerometer_x=(float)raw_readings[0]/accel_divider;
 8003c3e:	b200      	sxth	r0, r0
 8003c40:	f7fc ff2a 	bl	8000a98 <__aeabi_i2f>
 8003c44:	4639      	mov	r1, r7
 8003c46:	f7fd f82f 	bl	8000ca8 <__aeabi_fdiv>
 8003c4a:	60e0      	str	r0, [r4, #12]
	mpu->accelerometer_y=(float)raw_readings[1]/accel_divider;
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f7fc ff23 	bl	8000a98 <__aeabi_i2f>
 8003c52:	4639      	mov	r1, r7
 8003c54:	f7fd f828 	bl	8000ca8 <__aeabi_fdiv>
 8003c58:	6120      	str	r0, [r4, #16]
	mpu->accelerometer_z=(float)raw_readings[2]/accel_divider;
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f7fc ff1c 	bl	8000a98 <__aeabi_i2f>
 8003c60:	4639      	mov	r1, r7
 8003c62:	f7fd f821 	bl	8000ca8 <__aeabi_fdiv>
 8003c66:	6160      	str	r0, [r4, #20]
	HAL_Delay(20);
 8003c68:	2014      	movs	r0, #20
 8003c6a:	f7fd f921 	bl	8000eb0 <HAL_Delay>

}
 8003c6e:	b005      	add	sp, #20
 8003c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c74:	200000ac 	.word	0x200000ac
 8003c78:	200000a8 	.word	0x200000a8

08003c7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c7c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c7e:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Instance = SPI1;
 8003c82:	480e      	ldr	r0, [pc, #56]	; (8003cbc <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c86:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c8a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c8e:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c90:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c92:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c94:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c96:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c98:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003c9a:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c9c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c9e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ca2:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003ca4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8003ca6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ca8:	f7fe fefe 	bl	8002aa8 <HAL_SPI_Init>
 8003cac:	b128      	cbz	r0, 8003cba <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003cae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003cb2:	2145      	movs	r1, #69	; 0x45
 8003cb4:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <MX_SPI1_Init+0x48>)
 8003cb6:	f7ff bead 	b.w	8003a14 <_Error_Handler>
 8003cba:	bd08      	pop	{r3, pc}
 8003cbc:	200003f4 	.word	0x200003f4
 8003cc0:	40013000 	.word	0x40013000
 8003cc4:	0800423b 	.word	0x0800423b

08003cc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003cc8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8003cca:	6802      	ldr	r2, [r0, #0]
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <HAL_SPI_MspInit+0x60>)
{
 8003cce:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d126      	bne.n	8003d22 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cd4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003cd8:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cda:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ce0:	619a      	str	r2, [r3, #24]
 8003ce2:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce4:	4811      	ldr	r0, [pc, #68]	; (8003d2c <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
 8003cee:	23a0      	movs	r3, #160	; 0xa0
 8003cf0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfa:	f7fd feaf 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 8003cfe:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d00:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = SD_MISO_Pin;
 8003d02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d04:	2301      	movs	r3, #1
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8003d06:	a902      	add	r1, sp, #8
 8003d08:	4808      	ldr	r0, [pc, #32]	; (8003d2c <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d0c:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8003d0e:	f7fd fea5 	bl	8001a5c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003d12:	2023      	movs	r0, #35	; 0x23
 8003d14:	4622      	mov	r2, r4
 8003d16:	4621      	mov	r1, r4
 8003d18:	f7fd fcea 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003d1c:	2023      	movs	r0, #35	; 0x23
 8003d1e:	f7fd fd1b 	bl	8001758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d22:	b006      	add	sp, #24
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	bf00      	nop
 8003d28:	40013000 	.word	0x40013000
 8003d2c:	40010800 	.word	0x40010800

08003d30 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_MspInit+0x98>)
{
 8003d32:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d34:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d36:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	619a      	str	r2, [r3, #24]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	f002 0201 	and.w	r2, r2, #1
 8003d44:	9200      	str	r2, [sp, #0]
 8003d46:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d4e:	61da      	str	r2, [r3, #28]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d5a:	f7fd fcb7 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f06f 000b 	mvn.w	r0, #11
 8003d64:	4611      	mov	r1, r2
 8003d66:	f7fd fcc3 	bl	80016f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f06f 000a 	mvn.w	r0, #10
 8003d70:	4611      	mov	r1, r2
 8003d72:	f7fd fcbd 	bl	80016f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	f06f 0009 	mvn.w	r0, #9
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	f7fd fcb7 	bl	80016f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003d82:	2200      	movs	r2, #0
 8003d84:	f06f 0004 	mvn.w	r0, #4
 8003d88:	4611      	mov	r1, r2
 8003d8a:	f7fd fcb1 	bl	80016f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f06f 0003 	mvn.w	r0, #3
 8003d94:	4611      	mov	r1, r2
 8003d96:	f7fd fcab 	bl	80016f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f06f 0001 	mvn.w	r0, #1
 8003da0:	4611      	mov	r1, r2
 8003da2:	f7fd fca5 	bl	80016f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003da6:	2200      	movs	r2, #0
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	4611      	mov	r1, r2
 8003dae:	f7fd fc9f 	bl	80016f0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003db2:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <HAL_MspInit+0x9c>)
 8003db4:	6853      	ldr	r3, [r2, #4]
 8003db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dc0:	b003      	add	sp, #12
 8003dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40010000 	.word	0x40010000

08003dd0 <NMI_Handler>:
 8003dd0:	4770      	bx	lr

08003dd2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003dd2:	e7fe      	b.n	8003dd2 <HardFault_Handler>

08003dd4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003dd4:	e7fe      	b.n	8003dd4 <MemManage_Handler>

08003dd6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003dd6:	e7fe      	b.n	8003dd6 <BusFault_Handler>

08003dd8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003dd8:	e7fe      	b.n	8003dd8 <UsageFault_Handler>

08003dda <SVC_Handler>:
 8003dda:	4770      	bx	lr

08003ddc <DebugMon_Handler>:
 8003ddc:	4770      	bx	lr

08003dde <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003dde:	4770      	bx	lr

08003de0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003de0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de2:	f7fd f853 	bl	8000e8c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003dea:	f7fd bce4 	b.w	80017b6 <HAL_SYSTICK_IRQHandler>
	...

08003df0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <DMA1_Channel1_IRQHandler+0x8>)
 8003df2:	f7fd bd9f 	b.w	8001934 <HAL_DMA_IRQHandler>
 8003df6:	bf00      	nop
 8003df8:	200000e4 	.word	0x200000e4

08003dfc <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <ADC1_2_IRQHandler+0x8>)
 8003dfe:	f7fd b897 	b.w	8000f30 <HAL_ADC_IRQHandler>
 8003e02:	bf00      	nop
 8003e04:	200000b4 	.word	0x200000b4

08003e08 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e08:	4801      	ldr	r0, [pc, #4]	; (8003e10 <TIM1_CC_IRQHandler+0x8>)
 8003e0a:	f7fe bf73 	b.w	8002cf4 <HAL_TIM_IRQHandler>
 8003e0e:	bf00      	nop
 8003e10:	2000048c 	.word	0x2000048c

08003e14 <TIM1_UP_IRQHandler>:
 8003e14:	f7ff bff8 	b.w	8003e08 <TIM1_CC_IRQHandler>

08003e18 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e18:	4801      	ldr	r0, [pc, #4]	; (8003e20 <TIM2_IRQHandler+0x8>)
 8003e1a:	f7fe bf6b 	b.w	8002cf4 <HAL_TIM_IRQHandler>
 8003e1e:	bf00      	nop
 8003e20:	200004cc 	.word	0x200004cc

08003e24 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e24:	4801      	ldr	r0, [pc, #4]	; (8003e2c <TIM3_IRQHandler+0x8>)
 8003e26:	f7fe bf65 	b.w	8002cf4 <HAL_TIM_IRQHandler>
 8003e2a:	bf00      	nop
 8003e2c:	2000044c 	.word	0x2000044c

08003e30 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003e30:	4801      	ldr	r0, [pc, #4]	; (8003e38 <SPI1_IRQHandler+0x8>)
 8003e32:	f7fe bdc9 	b.w	80029c8 <HAL_SPI_IRQHandler>
 8003e36:	bf00      	nop
 8003e38:	200003f4 	.word	0x200003f4

08003e3c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <SystemInit+0x40>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <SystemInit+0x44>)
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e58:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e60:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003e68:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003e6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003e6e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <SystemInit+0x48>)
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	f8ff0000 	.word	0xf8ff0000
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <MX_TIM1_Init>:
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 999;
 8003e88:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Instance = TIM1;
 8003e8c:	4832      	ldr	r0, [pc, #200]	; (8003f58 <MX_TIM1_Init+0xd0>)
  htim1.Init.Prescaler = 999;
 8003e8e:	4a33      	ldr	r2, [pc, #204]	; (8003f5c <MX_TIM1_Init+0xd4>)
{
 8003e90:	b510      	push	{r4, lr}
  htim1.Init.Prescaler = 999;
 8003e92:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e96:	2300      	movs	r3, #0
  htim1.Init.Period = 6399;
 8003e98:	f641 02ff 	movw	r2, #6399	; 0x18ff
{
 8003e9c:	b08a      	sub	sp, #40	; 0x28
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 6399;
 8003ea0:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea2:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ea4:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ea8:	f7fe fffe 	bl	8002ea8 <HAL_TIM_Base_Init>
 8003eac:	b118      	cbz	r0, 8003eb6 <MX_TIM1_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003eae:	2145      	movs	r1, #69	; 0x45
 8003eb0:	482b      	ldr	r0, [pc, #172]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003eb2:	f7ff fdaf 	bl	8003a14 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eba:	a90a      	add	r1, sp, #40	; 0x28
 8003ebc:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ec0:	4825      	ldr	r0, [pc, #148]	; (8003f58 <MX_TIM1_Init+0xd0>)
 8003ec2:	f7fe fe38 	bl	8002b36 <HAL_TIM_ConfigClockSource>
 8003ec6:	b118      	cbz	r0, 8003ed0 <MX_TIM1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ec8:	214b      	movs	r1, #75	; 0x4b
 8003eca:	4825      	ldr	r0, [pc, #148]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003ecc:	f7ff fda2 	bl	8003a14 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003ed0:	4821      	ldr	r0, [pc, #132]	; (8003f58 <MX_TIM1_Init+0xd0>)
 8003ed2:	f7ff f803 	bl	8002edc <HAL_TIM_IC_Init>
 8003ed6:	b118      	cbz	r0, 8003ee0 <MX_TIM1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ed8:	2150      	movs	r1, #80	; 0x50
 8003eda:	4821      	ldr	r0, [pc, #132]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003edc:	f7ff fd9a 	bl	8003a14 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ee0:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ee2:	4669      	mov	r1, sp
 8003ee4:	481c      	ldr	r0, [pc, #112]	; (8003f58 <MX_TIM1_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ee6:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ee8:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eea:	f7ff f8fb 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003eee:	b118      	cbz	r0, 8003ef8 <MX_TIM1_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ef0:	2157      	movs	r1, #87	; 0x57
 8003ef2:	481b      	ldr	r0, [pc, #108]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003ef4:	f7ff fd8e 	bl	8003a14 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ef8:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003efa:	2200      	movs	r2, #0
 8003efc:	a906      	add	r1, sp, #24
 8003efe:	4816      	ldr	r0, [pc, #88]	; (8003f58 <MX_TIM1_Init+0xd0>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f00:	9406      	str	r4, [sp, #24]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f02:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f04:	9408      	str	r4, [sp, #32]
  sConfigIC.ICFilter = 0;
 8003f06:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f08:	f7ff f82c 	bl	8002f64 <HAL_TIM_IC_ConfigChannel>
 8003f0c:	b118      	cbz	r0, 8003f16 <MX_TIM1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f0e:	2160      	movs	r1, #96	; 0x60
 8003f10:	4813      	ldr	r0, [pc, #76]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003f12:	f7ff fd7f 	bl	8003a14 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003f16:	2204      	movs	r2, #4
 8003f18:	a906      	add	r1, sp, #24
 8003f1a:	480f      	ldr	r0, [pc, #60]	; (8003f58 <MX_TIM1_Init+0xd0>)
 8003f1c:	f7ff f822 	bl	8002f64 <HAL_TIM_IC_ConfigChannel>
 8003f20:	b118      	cbz	r0, 8003f2a <MX_TIM1_Init+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f22:	2165      	movs	r1, #101	; 0x65
 8003f24:	480e      	ldr	r0, [pc, #56]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003f26:	f7ff fd75 	bl	8003a14 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	a906      	add	r1, sp, #24
 8003f2e:	480a      	ldr	r0, [pc, #40]	; (8003f58 <MX_TIM1_Init+0xd0>)
 8003f30:	f7ff f818 	bl	8002f64 <HAL_TIM_IC_ConfigChannel>
 8003f34:	b118      	cbz	r0, 8003f3e <MX_TIM1_Init+0xb6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f36:	216a      	movs	r1, #106	; 0x6a
 8003f38:	4809      	ldr	r0, [pc, #36]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003f3a:	f7ff fd6b 	bl	8003a14 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003f3e:	220c      	movs	r2, #12
 8003f40:	a906      	add	r1, sp, #24
 8003f42:	4805      	ldr	r0, [pc, #20]	; (8003f58 <MX_TIM1_Init+0xd0>)
 8003f44:	f7ff f80e 	bl	8002f64 <HAL_TIM_IC_ConfigChannel>
 8003f48:	b118      	cbz	r0, 8003f52 <MX_TIM1_Init+0xca>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f4a:	216f      	movs	r1, #111	; 0x6f
 8003f4c:	4804      	ldr	r0, [pc, #16]	; (8003f60 <MX_TIM1_Init+0xd8>)
 8003f4e:	f7ff fd61 	bl	8003a14 <_Error_Handler>
  }

}
 8003f52:	b00a      	add	sp, #40	; 0x28
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	2000048c 	.word	0x2000048c
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	08004260 	.word	0x08004260

08003f64 <MX_TIM2_Init>:
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 999;
 8003f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f68:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim2.Instance = TIM2;
 8003f6c:	4822      	ldr	r0, [pc, #136]	; (8003ff8 <MX_TIM2_Init+0x94>)
{
 8003f6e:	b510      	push	{r4, lr}
  htim2.Init.Prescaler = 999;
 8003f70:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f74:	2300      	movs	r3, #0
  htim2.Init.Period = 6399;
 8003f76:	f641 02ff 	movw	r2, #6399	; 0x18ff
{
 8003f7a:	b08a      	sub	sp, #40	; 0x28
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 6399;
 8003f7e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f80:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f82:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f84:	f7fe ff90 	bl	8002ea8 <HAL_TIM_Base_Init>
 8003f88:	b118      	cbz	r0, 8003f92 <MX_TIM2_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f8a:	2182      	movs	r1, #130	; 0x82
 8003f8c:	481b      	ldr	r0, [pc, #108]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f8e:	f7ff fd41 	bl	8003a14 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f96:	a90a      	add	r1, sp, #40	; 0x28
 8003f98:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f9c:	4816      	ldr	r0, [pc, #88]	; (8003ff8 <MX_TIM2_Init+0x94>)
 8003f9e:	f7fe fdca 	bl	8002b36 <HAL_TIM_ConfigClockSource>
 8003fa2:	b118      	cbz	r0, 8003fac <MX_TIM2_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003fa4:	2188      	movs	r1, #136	; 0x88
 8003fa6:	4815      	ldr	r0, [pc, #84]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fa8:	f7ff fd34 	bl	8003a14 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003fac:	4812      	ldr	r0, [pc, #72]	; (8003ff8 <MX_TIM2_Init+0x94>)
 8003fae:	f7fe ff95 	bl	8002edc <HAL_TIM_IC_Init>
 8003fb2:	b118      	cbz	r0, 8003fbc <MX_TIM2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003fb4:	218d      	movs	r1, #141	; 0x8d
 8003fb6:	4811      	ldr	r0, [pc, #68]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fb8:	f7ff fd2c 	bl	8003a14 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fbc:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fbe:	4669      	mov	r1, sp
 8003fc0:	480d      	ldr	r0, [pc, #52]	; (8003ff8 <MX_TIM2_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc2:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc4:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fc6:	f7ff f88d 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fca:	b118      	cbz	r0, 8003fd4 <MX_TIM2_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003fcc:	2194      	movs	r1, #148	; 0x94
 8003fce:	480b      	ldr	r0, [pc, #44]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fd0:	f7ff fd20 	bl	8003a14 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003fd4:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	a906      	add	r1, sp, #24
 8003fda:	4807      	ldr	r0, [pc, #28]	; (8003ff8 <MX_TIM2_Init+0x94>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003fdc:	9406      	str	r4, [sp, #24]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003fde:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003fe0:	9408      	str	r4, [sp, #32]
  sConfigIC.ICFilter = 0;
 8003fe2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003fe4:	f7fe ffbe 	bl	8002f64 <HAL_TIM_IC_ConfigChannel>
 8003fe8:	b118      	cbz	r0, 8003ff2 <MX_TIM2_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003fea:	219d      	movs	r1, #157	; 0x9d
 8003fec:	4803      	ldr	r0, [pc, #12]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fee:	f7ff fd11 	bl	8003a14 <_Error_Handler>
  }

}
 8003ff2:	b00a      	add	sp, #40	; 0x28
 8003ff4:	bd10      	pop	{r4, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200004cc 	.word	0x200004cc
 8003ffc:	08004260 	.word	0x08004260

08004000 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
 8004002:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 8004004:	4817      	ldr	r0, [pc, #92]	; (8004064 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 71;
 8004006:	4918      	ldr	r1, [pc, #96]	; (8004068 <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000;
 8004008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.Prescaler = 71;
 800400c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004010:	2300      	movs	r3, #0
  htim3.Init.Period = 1000;
 8004012:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004014:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004016:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004018:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800401a:	f7fe ff45 	bl	8002ea8 <HAL_TIM_Base_Init>
 800401e:	b118      	cbz	r0, 8004028 <MX_TIM3_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004020:	21af      	movs	r1, #175	; 0xaf
 8004022:	4812      	ldr	r0, [pc, #72]	; (800406c <MX_TIM3_Init+0x6c>)
 8004024:	f7ff fcf6 	bl	8003a14 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800402c:	a906      	add	r1, sp, #24
 800402e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004032:	480c      	ldr	r0, [pc, #48]	; (8004064 <MX_TIM3_Init+0x64>)
 8004034:	f7fe fd7f 	bl	8002b36 <HAL_TIM_ConfigClockSource>
 8004038:	b118      	cbz	r0, 8004042 <MX_TIM3_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800403a:	21b5      	movs	r1, #181	; 0xb5
 800403c:	480b      	ldr	r0, [pc, #44]	; (800406c <MX_TIM3_Init+0x6c>)
 800403e:	f7ff fce9 	bl	8003a14 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004042:	2220      	movs	r2, #32
 8004044:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004046:	4669      	mov	r1, sp
 8004048:	4806      	ldr	r0, [pc, #24]	; (8004064 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800404a:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800404e:	f7ff f849 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004052:	b118      	cbz	r0, 800405c <MX_TIM3_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004054:	21bc      	movs	r1, #188	; 0xbc
 8004056:	4805      	ldr	r0, [pc, #20]	; (800406c <MX_TIM3_Init+0x6c>)
 8004058:	f7ff fcdc 	bl	8003a14 <_Error_Handler>
  }

}
 800405c:	b007      	add	sp, #28
 800405e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004062:	bf00      	nop
 8004064:	2000044c 	.word	0x2000044c
 8004068:	40000400 	.word	0x40000400
 800406c:	08004260 	.word	0x08004260

08004070 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004070:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM1)
 8004072:	6803      	ldr	r3, [r0, #0]
 8004074:	4a33      	ldr	r2, [pc, #204]	; (8004144 <HAL_TIM_Base_MspInit+0xd4>)
{
 8004076:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 8004078:	4293      	cmp	r3, r2
 800407a:	d126      	bne.n	80040ca <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_TIM_Base_MspInit+0xd8>)
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800407e:	2400      	movs	r4, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004080:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004082:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408c:	482f      	ldr	r0, [pc, #188]	; (800414c <HAL_TIM_Base_MspInit+0xdc>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800408e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004096:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800409a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800409c:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800409e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a2:	f7fd fcdb 	bl	8001a5c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80040a6:	4622      	mov	r2, r4
 80040a8:	4621      	mov	r1, r4
 80040aa:	2019      	movs	r0, #25
 80040ac:	f7fd fb20 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80040b0:	2019      	movs	r0, #25
 80040b2:	f7fd fb51 	bl	8001758 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80040b6:	201b      	movs	r0, #27
 80040b8:	4622      	mov	r2, r4
 80040ba:	4621      	mov	r1, r4
 80040bc:	f7fd fb18 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80040c0:	201b      	movs	r0, #27
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040c2:	f7fd fb49 	bl	8001758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80040c6:	b006      	add	sp, #24
 80040c8:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM2)
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ce:	d124      	bne.n	800411a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040d0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80040d4:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d6:	2400      	movs	r4, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	61da      	str	r2, [r3, #28]
 80040de:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e0:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ee:	4817      	ldr	r0, [pc, #92]	; (800414c <HAL_TIM_Base_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80040f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040f2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f6:	f7fd fcb1 	bl	8001a5c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80040fa:	4a15      	ldr	r2, [pc, #84]	; (8004150 <HAL_TIM_Base_MspInit+0xe0>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040fc:	201c      	movs	r0, #28
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80040fe:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004100:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800410a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410e:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004110:	4622      	mov	r2, r4
 8004112:	f7fd faed 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004116:	201c      	movs	r0, #28
 8004118:	e7d3      	b.n	80040c2 <HAL_TIM_Base_MspInit+0x52>
  else if(tim_baseHandle->Instance==TIM3)
 800411a:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <HAL_TIM_Base_MspInit+0xe4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d1d2      	bne.n	80040c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_TIM_Base_MspInit+0xd8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004122:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	f042 0202 	orr.w	r2, r2, #2
 800412a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800412c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800412e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004130:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	9302      	str	r3, [sp, #8]
 8004138:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800413a:	f7fd fad9 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800413e:	201d      	movs	r0, #29
 8004140:	e7bf      	b.n	80040c2 <HAL_TIM_Base_MspInit+0x52>
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40021000 	.word	0x40021000
 800414c:	40010800 	.word	0x40010800
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400

08004158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004158:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800415a:	e003      	b.n	8004164 <LoopCopyDataInit>

0800415c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800415e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004160:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004162:	3104      	adds	r1, #4

08004164 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004164:	480a      	ldr	r0, [pc, #40]	; (8004190 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004168:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800416a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800416c:	d3f6      	bcc.n	800415c <CopyDataInit>
  ldr r2, =_sbss
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004170:	e002      	b.n	8004178 <LoopFillZerobss>

08004172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004172:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004174:	f842 3b04 	str.w	r3, [r2], #4

08004178 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800417a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800417c:	d3f9      	bcc.n	8004172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800417e:	f7ff fe5d 	bl	8003e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004182:	f000 f80f 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004186:	f7ff fb1d 	bl	80037c4 <main>
  bx lr
 800418a:	4770      	bx	lr
  ldr r3, =_sidata
 800418c:	08004278 	.word	0x08004278
  ldr r0, =_sdata
 8004190:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004194:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8004198:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800419c:	2000050c 	.word	0x2000050c

080041a0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041a0:	e7fe      	b.n	80041a0 <CAN1_RX1_IRQHandler>
	...

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	2500      	movs	r5, #0
 80041a8:	4e0c      	ldr	r6, [pc, #48]	; (80041dc <__libc_init_array+0x38>)
 80041aa:	4c0d      	ldr	r4, [pc, #52]	; (80041e0 <__libc_init_array+0x3c>)
 80041ac:	1ba4      	subs	r4, r4, r6
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	42a5      	cmp	r5, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	f000 f81a 	bl	80041ec <_init>
 80041b8:	2500      	movs	r5, #0
 80041ba:	4e0a      	ldr	r6, [pc, #40]	; (80041e4 <__libc_init_array+0x40>)
 80041bc:	4c0a      	ldr	r4, [pc, #40]	; (80041e8 <__libc_init_array+0x44>)
 80041be:	1ba4      	subs	r4, r4, r6
 80041c0:	10a4      	asrs	r4, r4, #2
 80041c2:	42a5      	cmp	r5, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041cc:	4798      	blx	r3
 80041ce:	3501      	adds	r5, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041d6:	4798      	blx	r3
 80041d8:	3501      	adds	r5, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	08004270 	.word	0x08004270
 80041e0:	08004270 	.word	0x08004270
 80041e4:	08004270 	.word	0x08004270
 80041e8:	08004274 	.word	0x08004274

080041ec <_init>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr

080041f8 <_fini>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr
