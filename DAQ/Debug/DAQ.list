
DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080032b0  080032b0  000132b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000218  2000000c  08003314  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000224  08003314  00020224  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b5ef  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036f9  00000000  00000000  0003b624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008773  00000000  00000000  0003ed1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ac0  00000000  00000000  00047490  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001018  00000000  00000000  00047f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007b5c  00000000  00000000  00048f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000418c  00000000  00000000  00050ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054c50  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000020d8  00000000  00000000  00054ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003298 	.word	0x08003298

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003298 	.word	0x08003298

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_InitTick+0x3c>)
{
 8000988:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098a:	7818      	ldrb	r0, [r3, #0]
 800098c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000990:	fbb3 f3f0 	udiv	r3, r3, r0
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_InitTick+0x40>)
 8000996:	6810      	ldr	r0, [r2, #0]
 8000998:	fbb0 f0f3 	udiv	r0, r0, r3
 800099c:	f000 fac6 	bl	8000f2c <HAL_SYSTICK_Config>
 80009a0:	4604      	mov	r4, r0
 80009a2:	b958      	cbnz	r0, 80009bc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	2d0f      	cmp	r5, #15
 80009a6:	d809      	bhi.n	80009bc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	4602      	mov	r2, r0
 80009aa:	4629      	mov	r1, r5
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 fa7c 	bl	8000eac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_InitTick+0x44>)
 80009b6:	4620      	mov	r0, r4
 80009b8:	601d      	str	r5, [r3, #0]
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009bc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x20>)
{
 80009ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009da:	f000 fa55 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ffd0 	bl	8000984 <HAL_InitTick>
  HAL_MspInit();
 80009e4:	f002 fa0c 	bl	8002e00 <HAL_MspInit>
}
 80009e8:	2000      	movs	r0, #0
 80009ea:	bd08      	pop	{r3, pc}
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009f0:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <HAL_IncTick+0x10>)
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_IncTick+0x14>)
 80009f4:	6811      	ldr	r1, [r2, #0]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	440b      	add	r3, r1
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000064 	.word	0x20000064
 8000a04:	20000000 	.word	0x20000000

08000a08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a08:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <HAL_GetTick+0x8>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000064 	.word	0x20000064

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b538      	push	{r3, r4, r5, lr}
 8000a16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff6 	bl	8000a08 <HAL_GetTick>
 8000a1c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a20:	bf1e      	ittt	ne
 8000a22:	4b04      	ldrne	r3, [pc, #16]	; (8000a34 <HAL_Delay+0x20>)
 8000a24:	781b      	ldrbne	r3, [r3, #0]
 8000a26:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a28:	f7ff ffee 	bl	8000a08 <HAL_GetTick>
 8000a2c:	1b40      	subs	r0, r0, r5
 8000a2e:	4284      	cmp	r4, r0
 8000a30:	d8fa      	bhi.n	8000a28 <HAL_Delay+0x14>
  {
  }
}
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
 8000a34:	20000000 	.word	0x20000000

08000a38 <HAL_ADC_ConvCpltCallback>:
 8000a38:	4770      	bx	lr

08000a3a <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000a3c:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a40:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000a44:	d11b      	bne.n	8000a7e <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	6892      	ldr	r2, [r2, #8]
 8000a52:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000a56:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000a5a:	d10c      	bne.n	8000a76 <ADC_DMAConvCplt+0x3c>
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	b952      	cbnz	r2, 8000a76 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a6a:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a6c:	bf5e      	ittt	pl
 8000a6e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000a70:	f042 0201 	orrpl.w	r2, r2, #1
 8000a74:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_ADC_ConvCpltCallback>
 8000a7c:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4718      	bx	r3

08000a88 <HAL_ADC_ConvHalfCpltCallback>:
 8000a88:	4770      	bx	lr

08000a8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000a8a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000a8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000a8e:	f7ff fffb 	bl	8000a88 <HAL_ADC_ConvHalfCpltCallback>
 8000a92:	bd08      	pop	{r3, pc}

08000a94 <HAL_ADC_ErrorCallback>:
{
 8000a94:	4770      	bx	lr

08000a96 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a96:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000a98:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000a9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000aa2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000aaa:	f7ff fff3 	bl	8000a94 <HAL_ADC_ErrorCallback>
 8000aae:	bd08      	pop	{r3, pc}

08000ab0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000ab0:	2300      	movs	r3, #0
{ 
 8000ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000ab4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000ab6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d074      	beq.n	8000ba8 <HAL_ADC_ConfigChannel+0xf8>
 8000abe:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000ac0:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000ac2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000ac6:	2d06      	cmp	r5, #6
 8000ac8:	6802      	ldr	r2, [r0, #0]
 8000aca:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000ace:	680c      	ldr	r4, [r1, #0]
 8000ad0:	d825      	bhi.n	8000b1e <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ad2:	442b      	add	r3, r5
 8000ad4:	251f      	movs	r5, #31
 8000ad6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000ad8:	3b05      	subs	r3, #5
 8000ada:	409d      	lsls	r5, r3
 8000adc:	ea26 0505 	bic.w	r5, r6, r5
 8000ae0:	fa04 f303 	lsl.w	r3, r4, r3
 8000ae4:	432b      	orrs	r3, r5
 8000ae6:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ae8:	2c09      	cmp	r4, #9
 8000aea:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000aee:	688d      	ldr	r5, [r1, #8]
 8000af0:	d92f      	bls.n	8000b52 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000af2:	2607      	movs	r6, #7
 8000af4:	4423      	add	r3, r4
 8000af6:	68d1      	ldr	r1, [r2, #12]
 8000af8:	3b1e      	subs	r3, #30
 8000afa:	409e      	lsls	r6, r3
 8000afc:	ea21 0106 	bic.w	r1, r1, r6
 8000b00:	fa05 f303 	lsl.w	r3, r5, r3
 8000b04:	430b      	orrs	r3, r1
 8000b06:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b08:	f1a4 0310 	sub.w	r3, r4, #16
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d92b      	bls.n	8000b68 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000b1e:	2d0c      	cmp	r5, #12
 8000b20:	d80b      	bhi.n	8000b3a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b22:	442b      	add	r3, r5
 8000b24:	251f      	movs	r5, #31
 8000b26:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000b28:	3b23      	subs	r3, #35	; 0x23
 8000b2a:	409d      	lsls	r5, r3
 8000b2c:	ea26 0505 	bic.w	r5, r6, r5
 8000b30:	fa04 f303 	lsl.w	r3, r4, r3
 8000b34:	432b      	orrs	r3, r5
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	e7d6      	b.n	8000ae8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b3a:	442b      	add	r3, r5
 8000b3c:	251f      	movs	r5, #31
 8000b3e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000b40:	3b41      	subs	r3, #65	; 0x41
 8000b42:	409d      	lsls	r5, r3
 8000b44:	ea26 0505 	bic.w	r5, r6, r5
 8000b48:	fa04 f303 	lsl.w	r3, r4, r3
 8000b4c:	432b      	orrs	r3, r5
 8000b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b50:	e7ca      	b.n	8000ae8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b52:	2607      	movs	r6, #7
 8000b54:	6911      	ldr	r1, [r2, #16]
 8000b56:	4423      	add	r3, r4
 8000b58:	409e      	lsls	r6, r3
 8000b5a:	ea21 0106 	bic.w	r1, r1, r6
 8000b5e:	fa05 f303 	lsl.w	r3, r5, r3
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6113      	str	r3, [r2, #16]
 8000b66:	e7cf      	b.n	8000b08 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_ADC_ConfigChannel+0xfc>)
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d116      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b6e:	6893      	ldr	r3, [r2, #8]
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	d4cd      	bmi.n	8000b10 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b74:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b76:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b7c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b7e:	d1c7      	bne.n	8000b10 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_ADC_ConfigChannel+0x100>)
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <HAL_ADC_ConfigChannel+0x104>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	4353      	muls	r3, r2
            wait_loop_index--;
 8000b8e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000b90:	9b01      	ldr	r3, [sp, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0bc      	beq.n	8000b10 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000b96:	9b01      	ldr	r3, [sp, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	e7f8      	b.n	8000b8e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b9e:	f043 0320 	orr.w	r3, r3, #32
 8000ba2:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e7b4      	b.n	8000b12 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000ba8:	2302      	movs	r3, #2
 8000baa:	e7b5      	b.n	8000b18 <HAL_ADC_ConfigChannel+0x68>
 8000bac:	40012400 	.word	0x40012400
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	000f4240 	.word	0x000f4240

08000bb8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000bb8:	2300      	movs	r3, #0
{
 8000bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000bbc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bbe:	6803      	ldr	r3, [r0, #0]
{
 8000bc0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	07d2      	lsls	r2, r2, #31
 8000bc6:	d502      	bpl.n	8000bce <ADC_Enable+0x16>
  return HAL_OK;
 8000bc8:	2000      	movs	r0, #0
}
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	f042 0201 	orr.w	r2, r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <ADC_Enable+0x68>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <ADC_Enable+0x6c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000be0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000be2:	9b01      	ldr	r3, [sp, #4]
 8000be4:	b9c3      	cbnz	r3, 8000c18 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000be6:	f7ff ff0f 	bl	8000a08 <HAL_GetTick>
 8000bea:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	689d      	ldr	r5, [r3, #8]
 8000bf0:	f015 0501 	ands.w	r5, r5, #1
 8000bf4:	d1e8      	bne.n	8000bc8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000bf6:	f7ff ff07 	bl	8000a08 <HAL_GetTick>
 8000bfa:	1b80      	subs	r0, r0, r6
 8000bfc:	2802      	cmp	r0, #2
 8000bfe:	d9f5      	bls.n	8000bec <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000c02:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000c0e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c16:	e7d8      	b.n	8000bca <ADC_Enable+0x12>
      wait_loop_index--;
 8000c18:	9b01      	ldr	r3, [sp, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	e7e0      	b.n	8000be0 <ADC_Enable+0x28>
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	000f4240 	.word	0x000f4240

08000c28 <HAL_ADC_Start_DMA>:
{
 8000c28:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000c2c:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c2e:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <HAL_ADC_Start_DMA+0x108>)
 8000c30:	6802      	ldr	r2, [r0, #0]
{
 8000c32:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c34:	429a      	cmp	r2, r3
{
 8000c36:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c38:	d002      	beq.n	8000c40 <HAL_ADC_Start_DMA+0x18>
 8000c3a:	493e      	ldr	r1, [pc, #248]	; (8000d34 <HAL_ADC_Start_DMA+0x10c>)
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	d103      	bne.n	8000c48 <HAL_ADC_Start_DMA+0x20>
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000c46:	d16e      	bne.n	8000d26 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000c48:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d06c      	beq.n	8000d2a <HAL_ADC_Start_DMA+0x102>
 8000c50:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000c52:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000c54:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000c58:	f7ff ffae 	bl	8000bb8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d15d      	bne.n	8000d1e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000c62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c64:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000c66:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000c6c:	f020 0001 	bic.w	r0, r0, #1
 8000c70:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c74:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000c76:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c78:	d104      	bne.n	8000c84 <HAL_ADC_Start_DMA+0x5c>
 8000c7a:	4a2d      	ldr	r2, [pc, #180]	; (8000d30 <HAL_ADC_Start_DMA+0x108>)
 8000c7c:	6853      	ldr	r3, [r2, #4]
 8000c7e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000c82:	d13e      	bne.n	8000d02 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c8a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c8c:	684b      	ldr	r3, [r1, #4]
 8000c8e:	055a      	lsls	r2, r3, #21
 8000c90:	d505      	bpl.n	8000c9e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c9c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ca0:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ca2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ca6:	bf18      	it	ne
 8000ca8:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000caa:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cac:	bf18      	it	ne
 8000cae:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000cb2:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cbc:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cbe:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <HAL_ADC_Start_DMA+0x114>)
 8000cc2:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_ADC_Start_DMA+0x118>)
 8000cc6:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cc8:	f06f 0302 	mvn.w	r3, #2
 8000ccc:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cd0:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cdc:	4643      	mov	r3, r8
 8000cde:	f000 f981 	bl	8000fe4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000cea:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	bf0c      	ite	eq
 8000cf2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cf6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000cfa:	609a      	str	r2, [r3, #8]
}
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d08:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d0a:	6853      	ldr	r3, [r2, #4]
 8000d0c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d0e:	bf41      	itttt	mi
 8000d10:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000d12:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000d16:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000d1a:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000d1c:	e7bf      	b.n	8000c9e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000d24:	e7ea      	b.n	8000cfc <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000d26:	2601      	movs	r6, #1
 8000d28:	e7e8      	b.n	8000cfc <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000d2a:	2602      	movs	r6, #2
 8000d2c:	e7e6      	b.n	8000cfc <HAL_ADC_Start_DMA+0xd4>
 8000d2e:	bf00      	nop
 8000d30:	40012400 	.word	0x40012400
 8000d34:	40012800 	.word	0x40012800
 8000d38:	08000a3b 	.word	0x08000a3b
 8000d3c:	08000a8b 	.word	0x08000a8b
 8000d40:	08000a97 	.word	0x08000a97

08000d44 <ADC_ConversionStop_Disable>:
{
 8000d44:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d46:	6803      	ldr	r3, [r0, #0]
{
 8000d48:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	07d2      	lsls	r2, r2, #31
 8000d4e:	d401      	bmi.n	8000d54 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000d50:	2000      	movs	r0, #0
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	f022 0201 	bic.w	r2, r2, #1
 8000d5a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d5c:	f7ff fe54 	bl	8000a08 <HAL_GetTick>
 8000d60:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	07db      	lsls	r3, r3, #31
 8000d68:	d5f2      	bpl.n	8000d50 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d6a:	f7ff fe4d 	bl	8000a08 <HAL_GetTick>
 8000d6e:	1b40      	subs	r0, r0, r5
 8000d70:	2802      	cmp	r0, #2
 8000d72:	d9f6      	bls.n	8000d62 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d76:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d86:	bd38      	pop	{r3, r4, r5, pc}

08000d88 <HAL_ADC_Init>:
{
 8000d88:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d071      	beq.n	8000e74 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d92:	b923      	cbnz	r3, 8000d9e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000d94:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000d96:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000d9a:	f001 fcd9 	bl	8002750 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff ffd0 	bl	8000d44 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000da6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dac:	d164      	bne.n	8000e78 <HAL_ADC_Init+0xf0>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d162      	bne.n	8000e78 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000db2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000db4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000db8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000dba:	f023 0302 	bic.w	r3, r3, #2
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000dc2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dc4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000dc6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000dc8:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000dce:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dd2:	d038      	beq.n	8000e46 <HAL_ADC_Init+0xbe>
 8000dd4:	2901      	cmp	r1, #1
 8000dd6:	bf14      	ite	ne
 8000dd8:	4606      	movne	r6, r0
 8000dda:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dde:	6965      	ldr	r5, [r4, #20]
 8000de0:	2d01      	cmp	r5, #1
 8000de2:	d107      	bne.n	8000df4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d130      	bne.n	8000e4a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000de8:	69a3      	ldr	r3, [r4, #24]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000df0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000df4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000df6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000e00:	ea45 0506 	orr.w	r5, r5, r6
 8000e04:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000e06:	689e      	ldr	r6, [r3, #8]
 8000e08:	4d1d      	ldr	r5, [pc, #116]	; (8000e80 <HAL_ADC_Init+0xf8>)
 8000e0a:	ea05 0506 	and.w	r5, r5, r6
 8000e0e:	ea45 0502 	orr.w	r5, r5, r2
 8000e12:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e14:	d001      	beq.n	8000e1a <HAL_ADC_Init+0x92>
 8000e16:	2901      	cmp	r1, #1
 8000e18:	d120      	bne.n	8000e5c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e1a:	6921      	ldr	r1, [r4, #16]
 8000e1c:	3901      	subs	r1, #1
 8000e1e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000e20:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000e22:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000e26:	4329      	orrs	r1, r5
 8000e28:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e2a:	6899      	ldr	r1, [r3, #8]
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_ADC_Init+0xfc>)
 8000e2e:	400b      	ands	r3, r1
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d115      	bne.n	8000e60 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	2300      	movs	r3, #0
 8000e36:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e3a:	f023 0303 	bic.w	r3, r3, #3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e46:	460e      	mov	r6, r1
 8000e48:	e7c9      	b.n	8000dde <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e5a:	e7cb      	b.n	8000df4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	e7df      	b.n	8000e20 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000e60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e62:	f023 0312 	bic.w	r3, r3, #18
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
}
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e7e:	e7f9      	b.n	8000e74 <HAL_ADC_Init+0xec>
 8000e80:	ffe1f7fd 	.word	0xffe1f7fd
 8000e84:	ff1f0efe 	.word	0xff1f0efe

08000e88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e8a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e8e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e96:	041b      	lsls	r3, r3, #16
 8000e98:	0c1b      	lsrs	r3, r3, #16
 8000e9a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ea2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ea4:	60d3      	str	r3, [r2, #12]
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b530      	push	{r4, r5, lr}
 8000eb0:	68dc      	ldr	r4, [r3, #12]
 8000eb2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	bf28      	it	cs
 8000ec0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec8:	bf98      	it	ls
 8000eca:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	fa05 f303 	lsl.w	r3, r5, r3
 8000ed0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed4:	bf88      	it	hi
 8000ed6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4019      	ands	r1, r3
 8000eda:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	fa05 f404 	lsl.w	r4, r5, r4
 8000ee0:	3c01      	subs	r4, #1
 8000ee2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ee4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee6:	ea42 0201 	orr.w	r2, r2, r1
 8000eea:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	bfaf      	iteee	ge
 8000ef0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	4b06      	ldrlt	r3, [pc, #24]	; (8000f10 <HAL_NVIC_SetPriority+0x64>)
 8000ef6:	f000 000f 	andlt.w	r0, r0, #15
 8000efa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	bfa5      	ittet	ge
 8000efe:	b2d2      	uxtbge	r2, r2
 8000f00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f0a:	bd30      	pop	{r4, r5, pc}
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	e000ed14 	.word	0xe000ed14

08000f14 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f14:	2301      	movs	r3, #1
 8000f16:	0942      	lsrs	r2, r0, #5
 8000f18:	f000 001f 	and.w	r0, r0, #31
 8000f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8000f20:	4b01      	ldr	r3, [pc, #4]	; (8000f28 <HAL_NVIC_EnableIRQ+0x14>)
 8000f22:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f32:	d20a      	bcs.n	8000f4a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e010 	.word	0xe000e010
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f5a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	bf0c      	ite	eq
 8000f60:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f64:	f022 0204 	bicne.w	r2, r2, #4
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f70:	4770      	bx	lr

08000f72 <HAL_SYSTICK_IRQHandler>:
{
 8000f72:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f74:	f7ff fffc 	bl	8000f70 <HAL_SYSTICK_Callback>
 8000f78:	bd08      	pop	{r3, pc}
	...

08000f7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f7e:	b350      	cbz	r0, 8000fd6 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f80:	2214      	movs	r2, #20
 8000f82:	6801      	ldr	r1, [r0, #0]
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f86:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f88:	440b      	add	r3, r1
 8000f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000f94:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000f96:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000f98:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f9a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000f9e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fa2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	4323      	orrs	r3, r4
 8000fa8:	6904      	ldr	r4, [r0, #16]
 8000faa:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fac:	6944      	ldr	r4, [r0, #20]
 8000fae:	4323      	orrs	r3, r4
 8000fb0:	6984      	ldr	r4, [r0, #24]
 8000fb2:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb4:	69c4      	ldr	r4, [r0, #28]
 8000fb6:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000fb8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fba:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fbc:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000fbe:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000fc0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8000fc4:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000fc6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000fc8:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000fca:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fcc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fce:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fd6:	2001      	movs	r0, #1
}
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	bf00      	nop
 8000fdc:	bffdfff8 	.word	0xbffdfff8
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fe6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000fea:	2c01      	cmp	r4, #1
 8000fec:	d035      	beq.n	800105a <HAL_DMA_Start_IT+0x76>
 8000fee:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000ff4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff8:	42a5      	cmp	r5, r4
 8000ffa:	f04f 0600 	mov.w	r6, #0
 8000ffe:	f04f 0402 	mov.w	r4, #2
 8001002:	d128      	bne.n	8001056 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001004:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001008:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800100c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800100e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001010:	f026 0601 	bic.w	r6, r6, #1
 8001014:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001016:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001018:	40bd      	lsls	r5, r7
 800101a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800101c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800101e:	6843      	ldr	r3, [r0, #4]
 8001020:	6805      	ldr	r5, [r0, #0]
 8001022:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001024:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001026:	bf0b      	itete	eq
 8001028:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800102a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800102c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800102e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001030:	b14b      	cbz	r3, 8001046 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001038:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800103a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800103c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	602b      	str	r3, [r5, #0]
 8001044:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	f043 030a 	orr.w	r3, r3, #10
 8001054:	e7f0      	b.n	8001038 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001056:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800105a:	2002      	movs	r0, #2
}
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001060 <HAL_DMA_IRQHandler>:
{
 8001060:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001062:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001064:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001066:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001068:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800106a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800106c:	4095      	lsls	r5, r2
 800106e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001070:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001072:	d032      	beq.n	80010da <HAL_DMA_IRQHandler+0x7a>
 8001074:	074d      	lsls	r5, r1, #29
 8001076:	d530      	bpl.n	80010da <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800107c:	bf5e      	ittt	pl
 800107e:	681a      	ldrpl	r2, [r3, #0]
 8001080:	f022 0204 	bicpl.w	r2, r2, #4
 8001084:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001086:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <HAL_DMA_IRQHandler+0x120>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d019      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x60>
 800108c:	3214      	adds	r2, #20
 800108e:	4293      	cmp	r3, r2
 8001090:	d018      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x64>
 8001092:	3214      	adds	r2, #20
 8001094:	4293      	cmp	r3, r2
 8001096:	d017      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x68>
 8001098:	3214      	adds	r2, #20
 800109a:	4293      	cmp	r3, r2
 800109c:	d017      	beq.n	80010ce <HAL_DMA_IRQHandler+0x6e>
 800109e:	3214      	adds	r2, #20
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d017      	beq.n	80010d4 <HAL_DMA_IRQHandler+0x74>
 80010a4:	3214      	adds	r2, #20
 80010a6:	4293      	cmp	r3, r2
 80010a8:	bf0c      	ite	eq
 80010aa:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80010ae:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80010b2:	4a34      	ldr	r2, [pc, #208]	; (8001184 <HAL_DMA_IRQHandler+0x124>)
 80010b4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80010b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d05e      	beq.n	800117a <HAL_DMA_IRQHandler+0x11a>
}
 80010bc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80010be:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010c0:	2304      	movs	r3, #4
 80010c2:	e7f6      	b.n	80010b2 <HAL_DMA_IRQHandler+0x52>
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	e7f4      	b.n	80010b2 <HAL_DMA_IRQHandler+0x52>
 80010c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010cc:	e7f1      	b.n	80010b2 <HAL_DMA_IRQHandler+0x52>
 80010ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d2:	e7ee      	b.n	80010b2 <HAL_DMA_IRQHandler+0x52>
 80010d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010d8:	e7eb      	b.n	80010b2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010da:	2502      	movs	r5, #2
 80010dc:	4095      	lsls	r5, r2
 80010de:	4225      	tst	r5, r4
 80010e0:	d035      	beq.n	800114e <HAL_DMA_IRQHandler+0xee>
 80010e2:	078d      	lsls	r5, r1, #30
 80010e4:	d533      	bpl.n	800114e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	0694      	lsls	r4, r2, #26
 80010ea:	d406      	bmi.n	80010fa <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f022 020a 	bic.w	r2, r2, #10
 80010f2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80010f4:	2201      	movs	r2, #1
 80010f6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_DMA_IRQHandler+0x120>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d019      	beq.n	8001134 <HAL_DMA_IRQHandler+0xd4>
 8001100:	3214      	adds	r2, #20
 8001102:	4293      	cmp	r3, r2
 8001104:	d018      	beq.n	8001138 <HAL_DMA_IRQHandler+0xd8>
 8001106:	3214      	adds	r2, #20
 8001108:	4293      	cmp	r3, r2
 800110a:	d017      	beq.n	800113c <HAL_DMA_IRQHandler+0xdc>
 800110c:	3214      	adds	r2, #20
 800110e:	4293      	cmp	r3, r2
 8001110:	d017      	beq.n	8001142 <HAL_DMA_IRQHandler+0xe2>
 8001112:	3214      	adds	r2, #20
 8001114:	4293      	cmp	r3, r2
 8001116:	d017      	beq.n	8001148 <HAL_DMA_IRQHandler+0xe8>
 8001118:	3214      	adds	r2, #20
 800111a:	4293      	cmp	r3, r2
 800111c:	bf0c      	ite	eq
 800111e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001122:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_DMA_IRQHandler+0x124>)
 8001128:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800112a:	2300      	movs	r3, #0
 800112c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001130:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001132:	e7c1      	b.n	80010b8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001134:	2302      	movs	r3, #2
 8001136:	e7f6      	b.n	8001126 <HAL_DMA_IRQHandler+0xc6>
 8001138:	2320      	movs	r3, #32
 800113a:	e7f4      	b.n	8001126 <HAL_DMA_IRQHandler+0xc6>
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	e7f1      	b.n	8001126 <HAL_DMA_IRQHandler+0xc6>
 8001142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001146:	e7ee      	b.n	8001126 <HAL_DMA_IRQHandler+0xc6>
 8001148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114c:	e7eb      	b.n	8001126 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800114e:	2508      	movs	r5, #8
 8001150:	4095      	lsls	r5, r2
 8001152:	4225      	tst	r5, r4
 8001154:	d011      	beq.n	800117a <HAL_DMA_IRQHandler+0x11a>
 8001156:	0709      	lsls	r1, r1, #28
 8001158:	d50f      	bpl.n	800117a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	f021 010e 	bic.w	r1, r1, #14
 8001160:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001162:	2301      	movs	r3, #1
 8001164:	fa03 f202 	lsl.w	r2, r3, r2
 8001168:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800116a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800116c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001170:	2300      	movs	r3, #0
 8001172:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001176:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001178:	e79e      	b.n	80010b8 <HAL_DMA_IRQHandler+0x58>
}
 800117a:	bc70      	pop	{r4, r5, r6}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40020008 	.word	0x40020008
 8001184:	40020000 	.word	0x40020000

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800118c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800118e:	4616      	mov	r6, r2
 8001190:	4b65      	ldr	r3, [pc, #404]	; (8001328 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001192:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001338 <HAL_GPIO_Init+0x1b0>
 8001196:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800133c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800119a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80011a0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80011a8:	45a0      	cmp	r8, r4
 80011aa:	d17f      	bne.n	80012ac <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80011ac:	684d      	ldr	r5, [r1, #4]
 80011ae:	2d12      	cmp	r5, #18
 80011b0:	f000 80af 	beq.w	8001312 <HAL_GPIO_Init+0x18a>
 80011b4:	f200 8088 	bhi.w	80012c8 <HAL_GPIO_Init+0x140>
 80011b8:	2d02      	cmp	r5, #2
 80011ba:	f000 80a7 	beq.w	800130c <HAL_GPIO_Init+0x184>
 80011be:	d87c      	bhi.n	80012ba <HAL_GPIO_Init+0x132>
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	f000 808e 	beq.w	80012e2 <HAL_GPIO_Init+0x15a>
 80011c6:	2d01      	cmp	r5, #1
 80011c8:	f000 809e 	beq.w	8001308 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011cc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d0:	2cff      	cmp	r4, #255	; 0xff
 80011d2:	bf93      	iteet	ls
 80011d4:	4682      	movls	sl, r0
 80011d6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80011da:	3d08      	subhi	r5, #8
 80011dc:	f8d0 b000 	ldrls.w	fp, [r0]
 80011e0:	bf92      	itee	ls
 80011e2:	00b5      	lslls	r5, r6, #2
 80011e4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80011e8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ea:	fa09 f805 	lsl.w	r8, r9, r5
 80011ee:	ea2b 0808 	bic.w	r8, fp, r8
 80011f2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011f6:	bf88      	it	hi
 80011f8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011fc:	ea48 0505 	orr.w	r5, r8, r5
 8001200:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001204:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001208:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800120c:	d04e      	beq.n	80012ac <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800120e:	4d47      	ldr	r5, [pc, #284]	; (800132c <HAL_GPIO_Init+0x1a4>)
 8001210:	4f46      	ldr	r7, [pc, #280]	; (800132c <HAL_GPIO_Init+0x1a4>)
 8001212:	69ad      	ldr	r5, [r5, #24]
 8001214:	f026 0803 	bic.w	r8, r6, #3
 8001218:	f045 0501 	orr.w	r5, r5, #1
 800121c:	61bd      	str	r5, [r7, #24]
 800121e:	69bd      	ldr	r5, [r7, #24]
 8001220:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001224:	f005 0501 	and.w	r5, r5, #1
 8001228:	9501      	str	r5, [sp, #4]
 800122a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800122e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001232:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001234:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001238:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800123c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001240:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001244:	4d3a      	ldr	r5, [pc, #232]	; (8001330 <HAL_GPIO_Init+0x1a8>)
 8001246:	42a8      	cmp	r0, r5
 8001248:	d068      	beq.n	800131c <HAL_GPIO_Init+0x194>
 800124a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800124e:	42a8      	cmp	r0, r5
 8001250:	d066      	beq.n	8001320 <HAL_GPIO_Init+0x198>
 8001252:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001256:	42a8      	cmp	r0, r5
 8001258:	d064      	beq.n	8001324 <HAL_GPIO_Init+0x19c>
 800125a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800125e:	42a8      	cmp	r0, r5
 8001260:	bf0c      	ite	eq
 8001262:	2503      	moveq	r5, #3
 8001264:	2504      	movne	r5, #4
 8001266:	fa05 f50b 	lsl.w	r5, r5, fp
 800126a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800126e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001272:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001274:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001278:	bf14      	ite	ne
 800127a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800127c:	43a5      	biceq	r5, r4
 800127e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001280:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001282:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001286:	bf14      	ite	ne
 8001288:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800128a:	43a5      	biceq	r5, r4
 800128c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800128e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001294:	bf14      	ite	ne
 8001296:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001298:	43a5      	biceq	r5, r4
 800129a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800129c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80012a2:	bf14      	ite	ne
 80012a4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a6:	ea25 0404 	biceq.w	r4, r5, r4
 80012aa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012ac:	3601      	adds	r6, #1
 80012ae:	2e10      	cmp	r6, #16
 80012b0:	f47f af73 	bne.w	800119a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80012b4:	b003      	add	sp, #12
 80012b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80012ba:	2d03      	cmp	r5, #3
 80012bc:	d022      	beq.n	8001304 <HAL_GPIO_Init+0x17c>
 80012be:	2d11      	cmp	r5, #17
 80012c0:	d184      	bne.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c2:	68ca      	ldr	r2, [r1, #12]
 80012c4:	3204      	adds	r2, #4
          break;
 80012c6:	e781      	b.n	80011cc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80012c8:	4f1a      	ldr	r7, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x1ac>)
 80012ca:	42bd      	cmp	r5, r7
 80012cc:	d009      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012ce:	d812      	bhi.n	80012f6 <HAL_GPIO_Init+0x16e>
 80012d0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001340 <HAL_GPIO_Init+0x1b8>
 80012d4:	454d      	cmp	r5, r9
 80012d6:	d004      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012d8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80012dc:	454d      	cmp	r5, r9
 80012de:	f47f af75 	bne.w	80011cc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	688a      	ldr	r2, [r1, #8]
 80012e4:	b1c2      	cbz	r2, 8001318 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80012e8:	bf0c      	ite	eq
 80012ea:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80012ee:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f2:	2208      	movs	r2, #8
 80012f4:	e76a      	b.n	80011cc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80012f6:	4575      	cmp	r5, lr
 80012f8:	d0f3      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012fa:	4565      	cmp	r5, ip
 80012fc:	d0f1      	beq.n	80012e2 <HAL_GPIO_Init+0x15a>
 80012fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001344 <HAL_GPIO_Init+0x1bc>
 8001302:	e7eb      	b.n	80012dc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001304:	2200      	movs	r2, #0
 8001306:	e761      	b.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001308:	68ca      	ldr	r2, [r1, #12]
          break;
 800130a:	e75f      	b.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800130c:	68ca      	ldr	r2, [r1, #12]
 800130e:	3208      	adds	r2, #8
          break;
 8001310:	e75c      	b.n	80011cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001312:	68ca      	ldr	r2, [r1, #12]
 8001314:	320c      	adds	r2, #12
          break;
 8001316:	e759      	b.n	80011cc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001318:	2204      	movs	r2, #4
 800131a:	e757      	b.n	80011cc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131c:	2500      	movs	r5, #0
 800131e:	e7a2      	b.n	8001266 <HAL_GPIO_Init+0xde>
 8001320:	2501      	movs	r5, #1
 8001322:	e7a0      	b.n	8001266 <HAL_GPIO_Init+0xde>
 8001324:	2502      	movs	r5, #2
 8001326:	e79e      	b.n	8001266 <HAL_GPIO_Init+0xde>
 8001328:	40010400 	.word	0x40010400
 800132c:	40021000 	.word	0x40021000
 8001330:	40010800 	.word	0x40010800
 8001334:	10210000 	.word	0x10210000
 8001338:	10310000 	.word	0x10310000
 800133c:	10320000 	.word	0x10320000
 8001340:	10110000 	.word	0x10110000
 8001344:	10220000 	.word	0x10220000

08001348 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001348:	6802      	ldr	r2, [r0, #0]
 800134a:	6953      	ldr	r3, [r2, #20]
 800134c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001350:	d00d      	beq.n	800136e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001352:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001356:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001358:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800135a:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800135c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	2300      	movs	r3, #0
 8001360:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001362:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001366:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800136a:	2001      	movs	r0, #1
 800136c:	4770      	bx	lr
  }
  return HAL_OK;
 800136e:	4618      	mov	r0, r3
}
 8001370:	4770      	bx	lr

08001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001372:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001376:	4604      	mov	r4, r0
 8001378:	4617      	mov	r7, r2
 800137a:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800137c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001380:	b28e      	uxth	r6, r1
 8001382:	6825      	ldr	r5, [r4, #0]
 8001384:	f1b8 0f01 	cmp.w	r8, #1
 8001388:	bf0c      	ite	eq
 800138a:	696b      	ldreq	r3, [r5, #20]
 800138c:	69ab      	ldrne	r3, [r5, #24]
 800138e:	ea36 0303 	bics.w	r3, r6, r3
 8001392:	bf14      	ite	ne
 8001394:	2001      	movne	r0, #1
 8001396:	2000      	moveq	r0, #0
 8001398:	b908      	cbnz	r0, 800139e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800139a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800139e:	696b      	ldr	r3, [r5, #20]
 80013a0:	055a      	lsls	r2, r3, #21
 80013a2:	d512      	bpl.n	80013ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013a4:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80013a6:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ac:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013ae:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80013b2:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80013b4:	2304      	movs	r3, #4
 80013b6:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80013b8:	2300      	movs	r3, #0
      return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80013bc:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80013be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80013c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80013c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80013ca:	1c7b      	adds	r3, r7, #1
 80013cc:	d0d9      	beq.n	8001382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013ce:	b94f      	cbnz	r7, 80013e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80013d0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80013d2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80013d4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80013de:	2003      	movs	r0, #3
 80013e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013e4:	f7ff fb10 	bl	8000a08 <HAL_GetTick>
 80013e8:	eba0 0009 	sub.w	r0, r0, r9
 80013ec:	4287      	cmp	r7, r0
 80013ee:	d2c8      	bcs.n	8001382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80013f0:	e7ee      	b.n	80013d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080013f2 <I2C_WaitOnFlagUntilTimeout>:
{
 80013f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f6:	4604      	mov	r4, r0
 80013f8:	4690      	mov	r8, r2
 80013fa:	461f      	mov	r7, r3
 80013fc:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80013fe:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001402:	b28d      	uxth	r5, r1
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	f1b9 0f01 	cmp.w	r9, #1
 800140a:	bf0c      	ite	eq
 800140c:	695b      	ldreq	r3, [r3, #20]
 800140e:	699b      	ldrne	r3, [r3, #24]
 8001410:	ea35 0303 	bics.w	r3, r5, r3
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	4543      	cmp	r3, r8
 800141c:	d002      	beq.n	8001424 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800141e:	2000      	movs	r0, #0
}
 8001420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001424:	1c7b      	adds	r3, r7, #1
 8001426:	d0ed      	beq.n	8001404 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001428:	b95f      	cbnz	r7, 8001442 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800142a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800142c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800142e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001430:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001434:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001438:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800143a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800143e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001442:	f7ff fae1 	bl	8000a08 <HAL_GetTick>
 8001446:	1b80      	subs	r0, r0, r6
 8001448:	4287      	cmp	r7, r0
 800144a:	d2db      	bcs.n	8001404 <I2C_WaitOnFlagUntilTimeout+0x12>
 800144c:	e7ed      	b.n	800142a <I2C_WaitOnFlagUntilTimeout+0x38>

0800144e <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800144e:	b570      	push	{r4, r5, r6, lr}
 8001450:	4604      	mov	r4, r0
 8001452:	460d      	mov	r5, r1
 8001454:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	061b      	lsls	r3, r3, #24
 800145c:	d501      	bpl.n	8001462 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800145e:	2000      	movs	r0, #0
 8001460:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff ff70 	bl	8001348 <I2C_IsAcknowledgeFailed>
 8001468:	b9a8      	cbnz	r0, 8001496 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800146a:	1c6a      	adds	r2, r5, #1
 800146c:	d0f3      	beq.n	8001456 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800146e:	b965      	cbnz	r5, 800148a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001470:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001472:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800147a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800147c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800147e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001480:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001484:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001488:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800148a:	f7ff fabd 	bl	8000a08 <HAL_GetTick>
 800148e:	1b80      	subs	r0, r0, r6
 8001490:	4285      	cmp	r5, r0
 8001492:	d2e0      	bcs.n	8001456 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001494:	e7ec      	b.n	8001470 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001496:	2001      	movs	r0, #1
}
 8001498:	bd70      	pop	{r4, r5, r6, pc}

0800149a <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 800149a:	b570      	push	{r4, r5, r6, lr}
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014a2:	6820      	ldr	r0, [r4, #0]
 80014a4:	6943      	ldr	r3, [r0, #20]
 80014a6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80014aa:	d001      	beq.n	80014b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80014ac:	2000      	movs	r0, #0
}
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80014b0:	6942      	ldr	r2, [r0, #20]
 80014b2:	06d2      	lsls	r2, r2, #27
 80014b4:	d50b      	bpl.n	80014ce <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014b6:	f06f 0210 	mvn.w	r2, #16
 80014ba:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80014bc:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014be:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80014c4:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80014c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014ce:	b95d      	cbnz	r5, 80014e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014d2:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80014da:	2320      	movs	r3, #32
 80014dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80014e0:	2300      	movs	r3, #0
 80014e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014e8:	f7ff fa8e 	bl	8000a08 <HAL_GetTick>
 80014ec:	1b80      	subs	r0, r0, r6
 80014ee:	4285      	cmp	r5, r0
 80014f0:	d2d7      	bcs.n	80014a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80014f2:	e7ed      	b.n	80014d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080014f4 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80014f4:	b570      	push	{r4, r5, r6, lr}
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
 80014fa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d501      	bpl.n	8001508 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001504:	2000      	movs	r0, #0
 8001506:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff ff1d 	bl	8001348 <I2C_IsAcknowledgeFailed>
 800150e:	b9a8      	cbnz	r0, 800153c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001510:	1c6a      	adds	r2, r5, #1
 8001512:	d0f3      	beq.n	80014fc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001514:	b965      	cbnz	r5, 8001530 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001516:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001518:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001520:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001522:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001524:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001526:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800152a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800152e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001530:	f7ff fa6a 	bl	8000a08 <HAL_GetTick>
 8001534:	1b80      	subs	r0, r0, r6
 8001536:	4285      	cmp	r5, r0
 8001538:	d2e0      	bcs.n	80014fc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800153a:	e7ec      	b.n	8001516 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800153c:	2001      	movs	r0, #1
}
 800153e:	bd70      	pop	{r4, r5, r6, pc}

08001540 <HAL_I2C_Init>:
{
 8001540:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001542:	4604      	mov	r4, r0
 8001544:	b908      	cbnz	r0, 800154a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001546:	2001      	movs	r0, #1
 8001548:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800154e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001552:	b91b      	cbnz	r3, 800155c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001554:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001558:	f001 f9aa 	bl	80028b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800155c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800155e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001560:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001564:	6813      	ldr	r3, [r2, #0]
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800156c:	f000 fd32 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001570:	6863      	ldr	r3, [r4, #4]
 8001572:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <HAL_I2C_Init+0xf0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d830      	bhi.n	80015da <HAL_I2C_Init+0x9a>
 8001578:	4a2e      	ldr	r2, [pc, #184]	; (8001634 <HAL_I2C_Init+0xf4>)
 800157a:	4290      	cmp	r0, r2
 800157c:	d9e3      	bls.n	8001546 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800157e:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001580:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001582:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001586:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001588:	3201      	adds	r2, #1
 800158a:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_I2C_Init+0xf0>)
 800158e:	3801      	subs	r0, #1
 8001590:	4293      	cmp	r3, r2
 8001592:	d832      	bhi.n	80015fa <HAL_I2C_Init+0xba>
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fbb0 f0f3 	udiv	r0, r0, r3
 800159a:	1c43      	adds	r3, r0, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	bf38      	it	cc
 80015a4:	2304      	movcc	r3, #4
 80015a6:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015a8:	6a22      	ldr	r2, [r4, #32]
 80015aa:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ac:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80015b2:	68e2      	ldr	r2, [r4, #12]
 80015b4:	6923      	ldr	r3, [r4, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80015ba:	69a2      	ldr	r2, [r4, #24]
 80015bc:	6963      	ldr	r3, [r4, #20]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80015c2:	680b      	ldr	r3, [r1, #0]
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80015d8:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015da:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_I2C_Init+0xfc>)
 80015dc:	4290      	cmp	r0, r2
 80015de:	d9b2      	bls.n	8001546 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80015e0:	4d15      	ldr	r5, [pc, #84]	; (8001638 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80015e6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80015ea:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015ec:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80015ee:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015f0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80015f4:	fbb2 f2f5 	udiv	r2, r2, r5
 80015f8:	e7c6      	b.n	8001588 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015fa:	68a2      	ldr	r2, [r4, #8]
 80015fc:	b952      	cbnz	r2, 8001614 <HAL_I2C_Init+0xd4>
 80015fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001602:	fbb0 f0f3 	udiv	r0, r0, r3
 8001606:	1c43      	adds	r3, r0, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	b16b      	cbz	r3, 800162a <HAL_I2C_Init+0xea>
 800160e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001612:	e7c8      	b.n	80015a6 <HAL_I2C_Init+0x66>
 8001614:	2219      	movs	r2, #25
 8001616:	4353      	muls	r3, r2
 8001618:	fbb0 f0f3 	udiv	r0, r0, r3
 800161c:	1c43      	adds	r3, r0, #1
 800161e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001622:	b113      	cbz	r3, 800162a <HAL_I2C_Init+0xea>
 8001624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001628:	e7bd      	b.n	80015a6 <HAL_I2C_Init+0x66>
 800162a:	2301      	movs	r3, #1
 800162c:	e7bb      	b.n	80015a6 <HAL_I2C_Init+0x66>
 800162e:	bf00      	nop
 8001630:	000186a0 	.word	0x000186a0
 8001634:	001e847f 	.word	0x001e847f
 8001638:	000f4240 	.word	0x000f4240
 800163c:	003d08ff 	.word	0x003d08ff

08001640 <HAL_I2C_Master_Transmit>:
{
 8001640:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001644:	4604      	mov	r4, r0
 8001646:	461f      	mov	r7, r3
 8001648:	460d      	mov	r5, r1
 800164a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800164c:	f7ff f9dc 	bl	8000a08 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001650:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001654:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001656:	2b20      	cmp	r3, #32
 8001658:	d004      	beq.n	8001664 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800165a:	2502      	movs	r5, #2
}
 800165c:	4628      	mov	r0, r5
 800165e:	b004      	add	sp, #16
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001664:	9000      	str	r0, [sp, #0]
 8001666:	2319      	movs	r3, #25
 8001668:	2201      	movs	r2, #1
 800166a:	495d      	ldr	r1, [pc, #372]	; (80017e0 <HAL_I2C_Master_Transmit+0x1a0>)
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff fec0 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001672:	2800      	cmp	r0, #0
 8001674:	d1f1      	bne.n	800165a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001676:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800167a:	2b01      	cmp	r3, #1
 800167c:	d0ed      	beq.n	800165a <HAL_I2C_Master_Transmit+0x1a>
 800167e:	2301      	movs	r3, #1
 8001680:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800168a:	bf5e      	ittt	pl
 800168c:	681a      	ldrpl	r2, [r3, #0]
 800168e:	f042 0201 	orrpl.w	r2, r2, #1
 8001692:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800169c:	2221      	movs	r2, #33	; 0x21
 800169e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a2:	2210      	movs	r2, #16
 80016a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a8:	2200      	movs	r2, #0
 80016aa:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ac:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80016b0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b2:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80016b6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80016ba:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016be:	2a04      	cmp	r2, #4
 80016c0:	d004      	beq.n	80016cc <HAL_I2C_Master_Transmit+0x8c>
 80016c2:	2a01      	cmp	r2, #1
 80016c4:	d002      	beq.n	80016cc <HAL_I2C_Master_Transmit+0x8c>
 80016c6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80016ca:	d104      	bne.n	80016d6 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e002      	b.n	80016dc <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016d8:	2a12      	cmp	r2, #18
 80016da:	d0f7      	beq.n	80016cc <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016dc:	9600      	str	r6, [sp, #0]
 80016de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016e0:	2200      	movs	r2, #0
 80016e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fe83 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 80016ec:	bb28      	cbnz	r0, 800173a <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ee:	6923      	ldr	r3, [r4, #16]
 80016f0:	6822      	ldr	r2, [r4, #0]
 80016f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016f6:	d112      	bne.n	800171e <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016f8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80016fc:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016fe:	4633      	mov	r3, r6
 8001700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001702:	4938      	ldr	r1, [pc, #224]	; (80017e4 <HAL_I2C_Master_Transmit+0x1a4>)
 8001704:	4620      	mov	r0, r4
 8001706:	f7ff fe34 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800170a:	4605      	mov	r5, r0
 800170c:	b9a0      	cbnz	r0, 8001738 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	9003      	str	r0, [sp, #12]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	9203      	str	r2, [sp, #12]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	9303      	str	r3, [sp, #12]
 800171a:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 800171c:	e050      	b.n	80017c0 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800171e:	11eb      	asrs	r3, r5, #7
 8001720:	f003 0306 	and.w	r3, r3, #6
 8001724:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001728:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800172a:	492f      	ldr	r1, [pc, #188]	; (80017e8 <HAL_I2C_Master_Transmit+0x1a8>)
 800172c:	4633      	mov	r3, r6
 800172e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fe1e 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001736:	b148      	cbz	r0, 800174c <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001738:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800173a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800173c:	2b04      	cmp	r3, #4
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	d107      	bne.n	8001754 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001744:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001748:	2501      	movs	r5, #1
 800174a:	e787      	b.n	800165c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	b2ed      	uxtb	r5, r5
 8001750:	611d      	str	r5, [r3, #16]
 8001752:	e7d4      	b.n	80016fe <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001754:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001758:	2503      	movs	r5, #3
 800175a:	e77f      	b.n	800165c <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175c:	4632      	mov	r2, r6
 800175e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff fe74 	bl	800144e <I2C_WaitOnTXEFlagUntilTimeout>
 8001766:	b140      	cbz	r0, 800177a <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800176a:	2b04      	cmp	r3, #4
 800176c:	d1f4      	bne.n	8001758 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800176e:	6822      	ldr	r2, [r4, #0]
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e7e6      	b.n	8001748 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800177a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800177c:	6820      	ldr	r0, [r4, #0]
 800177e:	1c4b      	adds	r3, r1, #1
 8001780:	6263      	str	r3, [r4, #36]	; 0x24
 8001782:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001784:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001786:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001788:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800178a:	3b01      	subs	r3, #1
 800178c:	b29b      	uxth	r3, r3
 800178e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001790:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001792:	1e53      	subs	r3, r2, #1
 8001794:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001796:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001798:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800179a:	d50a      	bpl.n	80017b2 <HAL_I2C_Master_Transmit+0x172>
 800179c:	b14b      	cbz	r3, 80017b2 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800179e:	1c8b      	adds	r3, r1, #2
 80017a0:	6263      	str	r3, [r4, #36]	; 0x24
 80017a2:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80017a4:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017a6:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80017a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80017aa:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b2:	4632      	mov	r2, r6
 80017b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fe9c 	bl	80014f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d1d3      	bne.n	8001768 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80017c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ca      	bne.n	800175c <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017c6:	6821      	ldr	r1, [r4, #0]
 80017c8:	680a      	ldr	r2, [r1, #0]
 80017ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ce:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80017d0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80017d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80017de:	e73d      	b.n	800165c <HAL_I2C_Master_Transmit+0x1c>
 80017e0:	00100002 	.word	0x00100002
 80017e4:	00010002 	.word	0x00010002
 80017e8:	00010008 	.word	0x00010008

080017ec <HAL_I2C_Master_Receive>:
{
 80017ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017f0:	4604      	mov	r4, r0
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	4698      	mov	r8, r3
 80017f6:	460d      	mov	r5, r1
 80017f8:	4691      	mov	r9, r2
 80017fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80017fc:	f7ff f904 	bl	8000a08 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001800:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001804:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001806:	2b20      	cmp	r3, #32
 8001808:	d004      	beq.n	8001814 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800180a:	2502      	movs	r5, #2
}
 800180c:	4628      	mov	r0, r5
 800180e:	b009      	add	sp, #36	; 0x24
 8001810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001814:	9000      	str	r0, [sp, #0]
 8001816:	2319      	movs	r3, #25
 8001818:	2201      	movs	r2, #1
 800181a:	49a2      	ldr	r1, [pc, #648]	; (8001aa4 <HAL_I2C_Master_Receive+0x2b8>)
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fde8 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001822:	2800      	cmp	r0, #0
 8001824:	d1f1      	bne.n	800180a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001826:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800182a:	2b01      	cmp	r3, #1
 800182c:	d0ed      	beq.n	800180a <HAL_I2C_Master_Receive+0x1e>
 800182e:	2301      	movs	r3, #1
 8001830:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800183a:	bf5e      	ittt	pl
 800183c:	681a      	ldrpl	r2, [r3, #0]
 800183e:	f042 0201 	orrpl.w	r2, r2, #1
 8001842:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800184c:	2222      	movs	r2, #34	; 0x22
 800184e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001852:	2210      	movs	r2, #16
 8001854:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001858:	2200      	movs	r2, #0
 800185a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800185c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001860:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001864:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001866:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001868:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800186c:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800186e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001870:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001872:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001874:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001878:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800187a:	d004      	beq.n	8001886 <HAL_I2C_Master_Receive+0x9a>
 800187c:	2a01      	cmp	r2, #1
 800187e:	d002      	beq.n	8001886 <HAL_I2C_Master_Receive+0x9a>
 8001880:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001884:	d104      	bne.n	8001890 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e002      	b.n	8001896 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001890:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001892:	2a11      	cmp	r2, #17
 8001894:	d0f7      	beq.n	8001886 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001896:	9600      	str	r6, [sp, #0]
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff fda6 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d14d      	bne.n	8001946 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018aa:	6923      	ldr	r3, [r4, #16]
 80018ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	d139      	bne.n	8001928 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018b4:	f045 0501 	orr.w	r5, r5, #1
 80018b8:	b2ed      	uxtb	r5, r5
 80018ba:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018bc:	4633      	mov	r3, r6
 80018be:	463a      	mov	r2, r7
 80018c0:	4979      	ldr	r1, [pc, #484]	; (8001aa8 <HAL_I2C_Master_Receive+0x2bc>)
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff fd55 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018c8:	4605      	mov	r5, r0
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d13a      	bne.n	8001944 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 80018ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d069      	beq.n	80019aa <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 80018d6:	2a01      	cmp	r2, #1
 80018d8:	d17a      	bne.n	80019d0 <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	9504      	str	r5, [sp, #16]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	9204      	str	r2, [sp, #16]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	9204      	str	r2, [sp, #16]
 80018f0:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018fa:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001ab0 <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8001900:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001902:	2b00      	cmp	r3, #0
 8001904:	d05b      	beq.n	80019be <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001906:	2b03      	cmp	r3, #3
 8001908:	f200 80d4 	bhi.w	8001ab4 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 800190c:	2b01      	cmp	r3, #1
 800190e:	d17b      	bne.n	8001a08 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001910:	4632      	mov	r2, r6
 8001912:	4639      	mov	r1, r7
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff fdc0 	bl	800149a <I2C_WaitOnRXNEFlagUntilTimeout>
 800191a:	2800      	cmp	r0, #0
 800191c:	f000 8093 	beq.w	8001a46 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001922:	2b20      	cmp	r3, #32
 8001924:	d116      	bne.n	8001954 <HAL_I2C_Master_Receive+0x168>
 8001926:	e03e      	b.n	80019a6 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001928:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800192c:	f008 0806 	and.w	r8, r8, #6
 8001930:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001934:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001936:	495d      	ldr	r1, [pc, #372]	; (8001aac <HAL_I2C_Master_Receive+0x2c0>)
 8001938:	4633      	mov	r3, r6
 800193a:	463a      	mov	r2, r7
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff fd18 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001942:	b148      	cbz	r0, 8001958 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001944:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001948:	2b04      	cmp	r3, #4
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	d128      	bne.n	80019a2 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001950:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001954:	2501      	movs	r5, #1
 8001956:	e759      	b.n	800180c <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	b2ed      	uxtb	r5, r5
 800195c:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800195e:	463a      	mov	r2, r7
 8001960:	4633      	mov	r3, r6
 8001962:	4951      	ldr	r1, [pc, #324]	; (8001aa8 <HAL_I2C_Master_Receive+0x2bc>)
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fd04 	bl	8001372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800196a:	4602      	mov	r2, r0
 800196c:	2800      	cmp	r0, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	9007      	str	r0, [sp, #28]
 8001974:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001976:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001978:	9107      	str	r1, [sp, #28]
 800197a:	6999      	ldr	r1, [r3, #24]
 800197c:	9107      	str	r1, [sp, #28]
 800197e:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001986:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001988:	9600      	str	r6, [sp, #0]
 800198a:	463b      	mov	r3, r7
 800198c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001990:	f7ff fd2f 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001994:	2800      	cmp	r0, #0
 8001996:	d1d6      	bne.n	8001946 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800199e:	6113      	str	r3, [r2, #16]
 80019a0:	e78c      	b.n	80018bc <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 80019a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80019a6:	2503      	movs	r5, #3
 80019a8:	e730      	b.n	800180c <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019aa:	9503      	str	r5, [sp, #12]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	9203      	str	r2, [sp, #12]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	9203      	str	r2, [sp, #12]
 80019b4:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019bc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80019be:	2320      	movs	r3, #32
 80019c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80019ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80019ce:	e71d      	b.n	800180c <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80019d0:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80019d2:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80019d4:	d10e      	bne.n	80019f4 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80019d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	9505      	str	r5, [sp, #20]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	9205      	str	r2, [sp, #20]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	9205      	str	r2, [sp, #20]
 80019ea:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f2:	e781      	b.n	80018f8 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80019f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019f8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fa:	9506      	str	r5, [sp, #24]
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	9206      	str	r2, [sp, #24]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	9306      	str	r3, [sp, #24]
 8001a04:	9b06      	ldr	r3, [sp, #24]
 8001a06:	e779      	b.n	80018fc <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001a08:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	9600      	str	r6, [sp, #0]
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4641      	mov	r1, r8
 8001a14:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001a16:	d124      	bne.n	8001a62 <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a18:	f7ff fceb 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1c2      	bne.n	80019a6 <HAL_I2C_Master_Receive+0x1ba>
 8001a20:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	1c51      	adds	r1, r2, #1
 8001a32:	6261      	str	r1, [r4, #36]	; 0x24
 8001a34:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001a36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a44:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	6262      	str	r2, [r4, #36]	; 0x24
 8001a4c:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a4e:	6912      	ldr	r2, [r2, #16]
 8001a50:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001a52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001a60:	e74e      	b.n	8001900 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a62:	f7ff fcc6 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001a66:	4602      	mov	r2, r0
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d19c      	bne.n	80019a6 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001a6c:	6821      	ldr	r1, [r4, #0]
 8001a6e:	680b      	ldr	r3, [r1, #0]
 8001a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a74:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a76:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a7a:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a7c:	1c59      	adds	r1, r3, #1
 8001a7e:	6261      	str	r1, [r4, #36]	; 0x24
 8001a80:	6821      	ldr	r1, [r4, #0]
 8001a82:	6909      	ldr	r1, [r1, #16]
 8001a84:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001a86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a88:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a90:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	f7ff fcaa 	bl	80013f2 <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d0bf      	beq.n	8001a22 <HAL_I2C_Master_Receive+0x236>
 8001aa2:	e780      	b.n	80019a6 <HAL_I2C_Master_Receive+0x1ba>
 8001aa4:	00100002 	.word	0x00100002
 8001aa8:	00010002 	.word	0x00010002
 8001aac:	00010008 	.word	0x00010008
 8001ab0:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001ab4:	4632      	mov	r2, r6
 8001ab6:	4639      	mov	r1, r7
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff fcee 	bl	800149a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	f47f af2e 	bne.w	8001920 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	6262      	str	r2, [r4, #36]	; 0x24
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	6912      	ldr	r2, [r2, #16]
 8001ace:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001ad0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ad2:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ae0:	6953      	ldr	r3, [r2, #20]
 8001ae2:	075b      	lsls	r3, r3, #29
 8001ae4:	f57f af0c 	bpl.w	8001900 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aea:	1c59      	adds	r1, r3, #1
 8001aec:	6261      	str	r1, [r4, #36]	; 0x24
 8001aee:	e7ae      	b.n	8001a4e <HAL_I2C_Master_Receive+0x262>

08001af0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af0:	6803      	ldr	r3, [r0, #0]
{
 8001af2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	07db      	lsls	r3, r3, #31
{
 8001af8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	d410      	bmi.n	8001b1e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	079f      	lsls	r7, r3, #30
 8001b00:	d45e      	bmi.n	8001bc0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	682b      	ldr	r3, [r5, #0]
 8001b04:	0719      	lsls	r1, r3, #28
 8001b06:	f100 8095 	bmi.w	8001c34 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	075a      	lsls	r2, r3, #29
 8001b0e:	f100 80bf 	bmi.w	8001c90 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b12:	69ea      	ldr	r2, [r5, #28]
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	f040 812d 	bne.w	8001d74 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e014      	b.n	8001b48 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b1e:	4c90      	ldr	r4, [pc, #576]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b20:	6863      	ldr	r3, [r4, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d007      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2a:	6863      	ldr	r3, [r4, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
 8001b34:	6863      	ldr	r3, [r4, #4]
 8001b36:	03de      	lsls	r6, r3, #15
 8001b38:	d509      	bpl.n	8001b4e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	039c      	lsls	r4, r3, #14
 8001b3e:	d5dd      	bpl.n	8001afc <HAL_RCC_OscConfig+0xc>
 8001b40:	686b      	ldr	r3, [r5, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1da      	bne.n	8001afc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001b46:	2001      	movs	r0, #1
}
 8001b48:	b002      	add	sp, #8
 8001b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	686b      	ldr	r3, [r5, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d110      	bne.n	8001b78 <HAL_RCC_OscConfig+0x88>
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b5e:	f7fe ff53 	bl	8000a08 <HAL_GetTick>
 8001b62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	0398      	lsls	r0, r3, #14
 8001b68:	d4c8      	bmi.n	8001afc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7fe ff4d 	bl	8000a08 <HAL_GetTick>
 8001b6e:	1b80      	subs	r0, r0, r6
 8001b70:	2864      	cmp	r0, #100	; 0x64
 8001b72:	d9f7      	bls.n	8001b64 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001b74:	2003      	movs	r0, #3
 8001b76:	e7e7      	b.n	8001b48 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	b99b      	cbnz	r3, 8001ba2 <HAL_RCC_OscConfig+0xb2>
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	6023      	str	r3, [r4, #0]
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b8a:	f7fe ff3d 	bl	8000a08 <HAL_GetTick>
 8001b8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	0399      	lsls	r1, r3, #14
 8001b94:	d5b2      	bpl.n	8001afc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b96:	f7fe ff37 	bl	8000a08 <HAL_GetTick>
 8001b9a:	1b80      	subs	r0, r0, r6
 8001b9c:	2864      	cmp	r0, #100	; 0x64
 8001b9e:	d9f7      	bls.n	8001b90 <HAL_RCC_OscConfig+0xa0>
 8001ba0:	e7e8      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	d103      	bne.n	8001bb2 <HAL_RCC_OscConfig+0xc2>
 8001baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bae:	6023      	str	r3, [r4, #0]
 8001bb0:	e7d1      	b.n	8001b56 <HAL_RCC_OscConfig+0x66>
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6023      	str	r3, [r4, #0]
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	e7cd      	b.n	8001b5c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc0:	4c67      	ldr	r4, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	6863      	ldr	r3, [r4, #4]
 8001bc4:	f013 0f0c 	tst.w	r3, #12
 8001bc8:	d007      	beq.n	8001bda <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bca:	6863      	ldr	r3, [r4, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d110      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x106>
 8001bd4:	6863      	ldr	r3, [r4, #4]
 8001bd6:	03da      	lsls	r2, r3, #15
 8001bd8:	d40d      	bmi.n	8001bf6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	079b      	lsls	r3, r3, #30
 8001bde:	d502      	bpl.n	8001be6 <HAL_RCC_OscConfig+0xf6>
 8001be0:	692b      	ldr	r3, [r5, #16]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d1af      	bne.n	8001b46 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	696a      	ldr	r2, [r5, #20]
 8001bea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bf2:	6023      	str	r3, [r4, #0]
 8001bf4:	e785      	b.n	8001b02 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf6:	692a      	ldr	r2, [r5, #16]
 8001bf8:	4b5a      	ldr	r3, [pc, #360]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	b16a      	cbz	r2, 8001c18 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c00:	f7fe ff02 	bl	8000a08 <HAL_GetTick>
 8001c04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	079f      	lsls	r7, r3, #30
 8001c0a:	d4ec      	bmi.n	8001be6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fefc 	bl	8000a08 <HAL_GetTick>
 8001c10:	1b80      	subs	r0, r0, r6
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d9f7      	bls.n	8001c06 <HAL_RCC_OscConfig+0x116>
 8001c16:	e7ad      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001c18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fef5 	bl	8000a08 <HAL_GetTick>
 8001c1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	0798      	lsls	r0, r3, #30
 8001c24:	f57f af6d 	bpl.w	8001b02 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c28:	f7fe feee 	bl	8000a08 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d9f6      	bls.n	8001c20 <HAL_RCC_OscConfig+0x130>
 8001c32:	e79f      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c34:	69aa      	ldr	r2, [r5, #24]
 8001c36:	4c4a      	ldr	r4, [pc, #296]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c38:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <HAL_RCC_OscConfig+0x278>)
 8001c3a:	b1da      	cbz	r2, 8001c74 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c40:	f7fe fee2 	bl	8000a08 <HAL_GetTick>
 8001c44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c48:	079b      	lsls	r3, r3, #30
 8001c4a:	d50d      	bpl.n	8001c68 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c50:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c58:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001c5a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001c5c:	9b01      	ldr	r3, [sp, #4]
 8001c5e:	1e5a      	subs	r2, r3, #1
 8001c60:	9201      	str	r2, [sp, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f9      	bne.n	8001c5a <HAL_RCC_OscConfig+0x16a>
 8001c66:	e750      	b.n	8001b0a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7fe fece 	bl	8000a08 <HAL_GetTick>
 8001c6c:	1b80      	subs	r0, r0, r6
 8001c6e:	2802      	cmp	r0, #2
 8001c70:	d9e9      	bls.n	8001c46 <HAL_RCC_OscConfig+0x156>
 8001c72:	e77f      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001c74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c76:	f7fe fec7 	bl	8000a08 <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c7e:	079f      	lsls	r7, r3, #30
 8001c80:	f57f af43 	bpl.w	8001b0a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7fe fec0 	bl	8000a08 <HAL_GetTick>
 8001c88:	1b80      	subs	r0, r0, r6
 8001c8a:	2802      	cmp	r0, #2
 8001c8c:	d9f6      	bls.n	8001c7c <HAL_RCC_OscConfig+0x18c>
 8001c8e:	e771      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c90:	4c33      	ldr	r4, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c92:	69e3      	ldr	r3, [r4, #28]
 8001c94:	00d8      	lsls	r0, r3, #3
 8001c96:	d424      	bmi.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001c98:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	69e3      	ldr	r3, [r4, #28]
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61e3      	str	r3, [r4, #28]
 8001ca2:	69e3      	ldr	r3, [r4, #28]
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	4e30      	ldr	r6, [pc, #192]	; (8001d70 <HAL_RCC_OscConfig+0x280>)
 8001cae:	6833      	ldr	r3, [r6, #0]
 8001cb0:	05d9      	lsls	r1, r3, #23
 8001cb2:	d518      	bpl.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb4:	68eb      	ldr	r3, [r5, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d126      	bne.n	8001d08 <HAL_RCC_OscConfig+0x218>
 8001cba:	6a23      	ldr	r3, [r4, #32]
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fea1 	bl	8000a08 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cca:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	6a23      	ldr	r3, [r4, #32]
 8001cce:	079b      	lsls	r3, r3, #30
 8001cd0:	d53f      	bpl.n	8001d52 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001cd2:	2f00      	cmp	r7, #0
 8001cd4:	f43f af1d 	beq.w	8001b12 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd8:	69e3      	ldr	r3, [r4, #28]
 8001cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cde:	61e3      	str	r3, [r4, #28]
 8001ce0:	e717      	b.n	8001b12 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	2700      	movs	r7, #0
 8001ce4:	e7e2      	b.n	8001cac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce6:	6833      	ldr	r3, [r6, #0]
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001cee:	f7fe fe8b 	bl	8000a08 <HAL_GetTick>
 8001cf2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	05da      	lsls	r2, r3, #23
 8001cf8:	d4dc      	bmi.n	8001cb4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7fe fe85 	bl	8000a08 <HAL_GetTick>
 8001cfe:	eba0 0008 	sub.w	r0, r0, r8
 8001d02:	2864      	cmp	r0, #100	; 0x64
 8001d04:	d9f6      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x204>
 8001d06:	e735      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d08:	b9ab      	cbnz	r3, 8001d36 <HAL_RCC_OscConfig+0x246>
 8001d0a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6223      	str	r3, [r4, #32]
 8001d16:	6a23      	ldr	r3, [r4, #32]
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d1e:	f7fe fe73 	bl	8000a08 <HAL_GetTick>
 8001d22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	6a23      	ldr	r3, [r4, #32]
 8001d26:	0798      	lsls	r0, r3, #30
 8001d28:	d5d3      	bpl.n	8001cd2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fe6d 	bl	8000a08 <HAL_GetTick>
 8001d2e:	1b80      	subs	r0, r0, r6
 8001d30:	4540      	cmp	r0, r8
 8001d32:	d9f7      	bls.n	8001d24 <HAL_RCC_OscConfig+0x234>
 8001d34:	e71e      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	6a23      	ldr	r3, [r4, #32]
 8001d3a:	d103      	bne.n	8001d44 <HAL_RCC_OscConfig+0x254>
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6223      	str	r3, [r4, #32]
 8001d42:	e7ba      	b.n	8001cba <HAL_RCC_OscConfig+0x1ca>
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6223      	str	r3, [r4, #32]
 8001d4a:	6a23      	ldr	r3, [r4, #32]
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	e7b6      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe fe59 	bl	8000a08 <HAL_GetTick>
 8001d56:	eba0 0008 	sub.w	r0, r0, r8
 8001d5a:	42b0      	cmp	r0, r6
 8001d5c:	d9b6      	bls.n	8001ccc <HAL_RCC_OscConfig+0x1dc>
 8001d5e:	e709      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	42420000 	.word	0x42420000
 8001d68:	42420480 	.word	0x42420480
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	4c22      	ldr	r4, [pc, #136]	; (8001e00 <HAL_RCC_OscConfig+0x310>)
 8001d76:	6863      	ldr	r3, [r4, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	f43f aee2 	beq.w	8001b46 <HAL_RCC_OscConfig+0x56>
 8001d82:	2300      	movs	r3, #0
 8001d84:	4e1f      	ldr	r6, [pc, #124]	; (8001e04 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d86:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d88:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8a:	d12b      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fe3c 	bl	8000a08 <HAL_GetTick>
 8001d90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	0199      	lsls	r1, r3, #6
 8001d96:	d41f      	bmi.n	8001dd8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d98:	6a2b      	ldr	r3, [r5, #32]
 8001d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001da0:	6862      	ldr	r2, [r4, #4]
 8001da2:	68a9      	ldr	r1, [r5, #8]
 8001da4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001da8:	430a      	orrs	r2, r1
 8001daa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001dae:	6862      	ldr	r2, [r4, #4]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001db6:	4313      	orrs	r3, r2
 8001db8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dba:	2301      	movs	r3, #1
 8001dbc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fe23 	bl	8000a08 <HAL_GetTick>
 8001dc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	019a      	lsls	r2, r3, #6
 8001dc8:	f53f aea7 	bmi.w	8001b1a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7fe fe1c 	bl	8000a08 <HAL_GetTick>
 8001dd0:	1b40      	subs	r0, r0, r5
 8001dd2:	2802      	cmp	r0, #2
 8001dd4:	d9f6      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2d4>
 8001dd6:	e6cd      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fe16 	bl	8000a08 <HAL_GetTick>
 8001ddc:	1bc0      	subs	r0, r0, r7
 8001dde:	2802      	cmp	r0, #2
 8001de0:	d9d7      	bls.n	8001d92 <HAL_RCC_OscConfig+0x2a2>
 8001de2:	e6c7      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001de4:	f7fe fe10 	bl	8000a08 <HAL_GetTick>
 8001de8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	019b      	lsls	r3, r3, #6
 8001dee:	f57f ae94 	bpl.w	8001b1a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe fe09 	bl	8000a08 <HAL_GetTick>
 8001df6:	1b40      	subs	r0, r0, r5
 8001df8:	2802      	cmp	r0, #2
 8001dfa:	d9f6      	bls.n	8001dea <HAL_RCC_OscConfig+0x2fa>
 8001dfc:	e6ba      	b.n	8001b74 <HAL_RCC_OscConfig+0x84>
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	42420060 	.word	0x42420060

08001e08 <HAL_RCC_GetSysClockFreq>:
{
 8001e08:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001e0c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e0e:	ac02      	add	r4, sp, #8
 8001e10:	f103 0510 	add.w	r5, r3, #16
 8001e14:	4622      	mov	r2, r4
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	6859      	ldr	r1, [r3, #4]
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	c203      	stmia	r2!, {r0, r1}
 8001e1e:	42ab      	cmp	r3, r5
 8001e20:	4614      	mov	r4, r2
 8001e22:	d1f7      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e24:	2301      	movs	r3, #1
 8001e26:	f88d 3004 	strb.w	r3, [sp, #4]
 8001e2a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001e2c:	4911      	ldr	r1, [pc, #68]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e2e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001e32:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e34:	f003 020c 	and.w	r2, r3, #12
 8001e38:	2a08      	cmp	r2, #8
 8001e3a:	d117      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e3c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001e40:	a806      	add	r0, sp, #24
 8001e42:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e44:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e46:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e4a:	d50c      	bpl.n	8001e66 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e4c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4e:	480a      	ldr	r0, [pc, #40]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e50:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e54:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e56:	aa06      	add	r2, sp, #24
 8001e58:	4413      	add	r3, r2
 8001e5a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e5e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001e62:	b007      	add	sp, #28
 8001e64:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x74>)
 8001e68:	4350      	muls	r0, r2
 8001e6a:	e7fa      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001e6e:	e7f8      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x5a>
 8001e70:	080032b0 	.word	0x080032b0
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	003d0900 	.word	0x003d0900

08001e80 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e80:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <HAL_RCC_ClockConfig+0x138>)
{
 8001e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e86:	6813      	ldr	r3, [r2, #0]
{
 8001e88:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	428b      	cmp	r3, r1
{
 8001e90:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e92:	d328      	bcc.n	8001ee6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	682a      	ldr	r2, [r5, #0]
 8001e96:	0791      	lsls	r1, r2, #30
 8001e98:	d432      	bmi.n	8001f00 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	07d2      	lsls	r2, r2, #31
 8001e9c:	d438      	bmi.n	8001f10 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e9e:	4a46      	ldr	r2, [pc, #280]	; (8001fb8 <HAL_RCC_ClockConfig+0x138>)
 8001ea0:	6813      	ldr	r3, [r2, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	429e      	cmp	r6, r3
 8001ea8:	d373      	bcc.n	8001f92 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eaa:	682a      	ldr	r2, [r5, #0]
 8001eac:	4c43      	ldr	r4, [pc, #268]	; (8001fbc <HAL_RCC_ClockConfig+0x13c>)
 8001eae:	f012 0f04 	tst.w	r2, #4
 8001eb2:	d179      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	0713      	lsls	r3, r2, #28
 8001eb6:	d506      	bpl.n	8001ec6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eb8:	6863      	ldr	r3, [r4, #4]
 8001eba:	692a      	ldr	r2, [r5, #16]
 8001ebc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ec0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ec4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec6:	f7ff ff9f 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001eca:	6863      	ldr	r3, [r4, #4]
 8001ecc:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_RCC_ClockConfig+0x140>)
 8001ece:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	40d8      	lsrs	r0, r3
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_ClockConfig+0x144>)
 8001ed8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7fe fd52 	bl	8000984 <HAL_InitTick>
  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
}
 8001ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	6813      	ldr	r3, [r2, #0]
 8001ee8:	f023 0307 	bic.w	r3, r3, #7
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	4299      	cmp	r1, r3
 8001ef8:	d0cc      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001efa:	2001      	movs	r0, #1
 8001efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f00:	492e      	ldr	r1, [pc, #184]	; (8001fbc <HAL_RCC_ClockConfig+0x13c>)
 8001f02:	68a8      	ldr	r0, [r5, #8]
 8001f04:	684b      	ldr	r3, [r1, #4]
 8001f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0a:	4303      	orrs	r3, r0
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e7c4      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	686a      	ldr	r2, [r5, #4]
 8001f12:	4c2a      	ldr	r4, [pc, #168]	; (8001fbc <HAL_RCC_ClockConfig+0x13c>)
 8001f14:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	d0ec      	beq.n	8001efa <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f20:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001f2e:	f7fe fd6b 	bl	8000a08 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001f34:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d114      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d0ac      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe fd60 	bl	8000a08 <HAL_GetTick>
 8001f48:	1bc0      	subs	r0, r0, r7
 8001f4a:	4540      	cmp	r0, r8
 8001f4c:	d9f5      	bls.n	8001f3a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001f4e:	2003      	movs	r0, #3
 8001f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f54:	2a02      	cmp	r2, #2
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f5c:	e7df      	b.n	8001f1e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	f013 0f02 	tst.w	r3, #2
 8001f62:	e7dc      	b.n	8001f1e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d10f      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f68:	6863      	ldr	r3, [r4, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d095      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7fe fd49 	bl	8000a08 <HAL_GetTick>
 8001f76:	1bc0      	subs	r0, r0, r7
 8001f78:	4540      	cmp	r0, r8
 8001f7a:	d9f5      	bls.n	8001f68 <HAL_RCC_ClockConfig+0xe8>
 8001f7c:	e7e7      	b.n	8001f4e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7e:	f7fe fd43 	bl	8000a08 <HAL_GetTick>
 8001f82:	1bc0      	subs	r0, r0, r7
 8001f84:	4540      	cmp	r0, r8
 8001f86:	d8e2      	bhi.n	8001f4e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	f013 0f0c 	tst.w	r3, #12
 8001f8e:	d1f6      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xfe>
 8001f90:	e785      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f023 0307 	bic.w	r3, r3, #7
 8001f98:	4333      	orrs	r3, r6
 8001f9a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	d1a9      	bne.n	8001efa <HAL_RCC_ClockConfig+0x7a>
 8001fa6:	e780      	b.n	8001eaa <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	68e9      	ldr	r1, [r5, #12]
 8001fac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6063      	str	r3, [r4, #4]
 8001fb4:	e77e      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x34>
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	080032da 	.word	0x080032da
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <HAL_RCC_GetHCLKFreq>:
}
 8001fc8:	4b01      	ldr	r3, [pc, #4]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fe2:	6810      	ldr	r0, [r2, #0]
}    
 8001fe4:	40d8      	lsrs	r0, r3
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	080032ea 	.word	0x080032ea
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ff4:	6803      	ldr	r3, [r0, #0]
{
 8001ff6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ffa:	07d9      	lsls	r1, r3, #31
{
 8001ffc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ffe:	d520      	bpl.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002000:	4c35      	ldr	r4, [pc, #212]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002002:	69e3      	ldr	r3, [r4, #28]
 8002004:	00da      	lsls	r2, r3, #3
 8002006:	d432      	bmi.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002008:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	69e3      	ldr	r3, [r4, #28]
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	61e3      	str	r3, [r4, #28]
 8002012:	69e3      	ldr	r3, [r4, #28]
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	4e2f      	ldr	r6, [pc, #188]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800201e:	6833      	ldr	r3, [r6, #0]
 8002020:	05db      	lsls	r3, r3, #23
 8002022:	d526      	bpl.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002024:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002026:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800202a:	d136      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800202c:	6a23      	ldr	r3, [r4, #32]
 800202e:	686a      	ldr	r2, [r5, #4]
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	4313      	orrs	r3, r2
 8002036:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002038:	b11f      	cbz	r7, 8002042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	69e3      	ldr	r3, [r4, #28]
 800203c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002040:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002042:	6828      	ldr	r0, [r5, #0]
 8002044:	0783      	lsls	r3, r0, #30
 8002046:	d506      	bpl.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800204a:	68a9      	ldr	r1, [r5, #8]
 800204c:	6853      	ldr	r3, [r2, #4]
 800204e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002052:	430b      	orrs	r3, r1
 8002054:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002056:	f010 0010 	ands.w	r0, r0, #16
 800205a:	d01b      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800205c:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800205e:	68e9      	ldr	r1, [r5, #12]
 8002060:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002062:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002064:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002068:	430b      	orrs	r3, r1
 800206a:	6053      	str	r3, [r2, #4]
 800206c:	e012      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2700      	movs	r7, #0
 8002070:	e7d4      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	6833      	ldr	r3, [r6, #0]
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800207a:	f7fe fcc5 	bl	8000a08 <HAL_GetTick>
 800207e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	6833      	ldr	r3, [r6, #0]
 8002082:	05d8      	lsls	r0, r3, #23
 8002084:	d4ce      	bmi.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe fcbf 	bl	8000a08 <HAL_GetTick>
 800208a:	eba0 0008 	sub.w	r0, r0, r8
 800208e:	2864      	cmp	r0, #100	; 0x64
 8002090:	d9f6      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002092:	2003      	movs	r0, #3
}
 8002094:	b002      	add	sp, #8
 8002096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800209a:	686a      	ldr	r2, [r5, #4]
 800209c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d0c3      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a4:	2001      	movs	r0, #1
 80020a6:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80020aa:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ac:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80020b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020b6:	07d9      	lsls	r1, r3, #31
 80020b8:	d5b8      	bpl.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80020ba:	f7fe fca5 	bl	8000a08 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80020c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	6a23      	ldr	r3, [r4, #32]
 80020c6:	079a      	lsls	r2, r3, #30
 80020c8:	d4b0      	bmi.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fc9d 	bl	8000a08 <HAL_GetTick>
 80020ce:	1b80      	subs	r0, r0, r6
 80020d0:	4540      	cmp	r0, r8
 80020d2:	d9f7      	bls.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80020d4:	e7dd      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42420440 	.word	0x42420440

080020e4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020e4:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80020e6:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
}
 80020f8:	4770      	bx	lr

080020fa <HAL_TIM_IC_MspInit>:
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002100:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002102:	2b01      	cmp	r3, #1
 8002104:	f04f 0302 	mov.w	r3, #2
 8002108:	d01c      	beq.n	8002144 <HAL_TIM_ConfigClockSource+0x48>
 800210a:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002110:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002112:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002116:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002118:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800211c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002120:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002122:	680a      	ldr	r2, [r1, #0]
 8002124:	2a40      	cmp	r2, #64	; 0x40
 8002126:	d079      	beq.n	800221c <HAL_TIM_ConfigClockSource+0x120>
 8002128:	d819      	bhi.n	800215e <HAL_TIM_ConfigClockSource+0x62>
 800212a:	2a10      	cmp	r2, #16
 800212c:	f000 8093 	beq.w	8002256 <HAL_TIM_ConfigClockSource+0x15a>
 8002130:	d80a      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x4c>
 8002132:	2a00      	cmp	r2, #0
 8002134:	f000 8089 	beq.w	800224a <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002138:	2301      	movs	r3, #1
 800213a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800213e:	2300      	movs	r3, #0
 8002140:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002144:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002146:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002148:	2a20      	cmp	r2, #32
 800214a:	f000 808a 	beq.w	8002262 <HAL_TIM_ConfigClockSource+0x166>
 800214e:	2a30      	cmp	r2, #48	; 0x30
 8002150:	d1f2      	bne.n	8002138 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002152:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002154:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002158:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800215c:	e036      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800215e:	2a70      	cmp	r2, #112	; 0x70
 8002160:	d036      	beq.n	80021d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002162:	d81b      	bhi.n	800219c <HAL_TIM_ConfigClockSource+0xa0>
 8002164:	2a50      	cmp	r2, #80	; 0x50
 8002166:	d042      	beq.n	80021ee <HAL_TIM_ConfigClockSource+0xf2>
 8002168:	2a60      	cmp	r2, #96	; 0x60
 800216a:	d1e5      	bne.n	8002138 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800216c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800216e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002170:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002174:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002176:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002178:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800217a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800217c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002184:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002188:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800218c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800218e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002190:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002192:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002196:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800219a:	e017      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800219c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80021a0:	d011      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xca>
 80021a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021a6:	d1c7      	bne.n	8002138 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a8:	688a      	ldr	r2, [r1, #8]
 80021aa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80021ac:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ae:	68c9      	ldr	r1, [r1, #12]
 80021b0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021ba:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021bc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c4:	e002      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	e7b3      	b.n	8002138 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021d0:	688a      	ldr	r2, [r1, #8]
 80021d2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80021d4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021d6:	68c9      	ldr	r1, [r1, #12]
 80021d8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021da:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021e2:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021e4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80021e6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80021ec:	e7ee      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ee:	684c      	ldr	r4, [r1, #4]
 80021f0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021f2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021f6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021fa:	f025 0501 	bic.w	r5, r5, #1
 80021fe:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002200:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002202:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002204:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002208:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800220c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800220e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002210:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002212:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002216:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800221a:	e7d7      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221c:	684c      	ldr	r4, [r1, #4]
 800221e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002220:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002222:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002224:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002228:	f025 0501 	bic.w	r5, r5, #1
 800222c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800222e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002230:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002232:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002236:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800223a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800223c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800223e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002240:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002244:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002248:	e7c0      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800224a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800224c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002250:	f042 0207 	orr.w	r2, r2, #7
 8002254:	e7ba      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002256:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002258:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800225c:	f042 0217 	orr.w	r2, r2, #23
 8002260:	e7b4      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002262:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002264:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002268:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800226c:	e7ae      	b.n	80021cc <HAL_TIM_ConfigClockSource+0xd0>

0800226e <HAL_TIM_OC_DelayElapsedCallback>:
 800226e:	4770      	bx	lr

08002270 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002270:	4770      	bx	lr

08002272 <HAL_TIM_TriggerCallback>:
 8002272:	4770      	bx	lr

08002274 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002274:	6803      	ldr	r3, [r0, #0]
{
 8002276:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002278:	691a      	ldr	r2, [r3, #16]
{
 800227a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800227c:	0791      	lsls	r1, r2, #30
 800227e:	d50e      	bpl.n	800229e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	0792      	lsls	r2, r2, #30
 8002284:	d50b      	bpl.n	800229e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002286:	f06f 0202 	mvn.w	r2, #2
 800228a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800228c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800228e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002290:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002292:	079b      	lsls	r3, r3, #30
 8002294:	d077      	beq.n	8002386 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002296:	f000 fc25 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	2300      	movs	r3, #0
 800229c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	0750      	lsls	r0, r2, #29
 80022a4:	d510      	bpl.n	80022c8 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	0751      	lsls	r1, r2, #29
 80022aa:	d50d      	bpl.n	80022c8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022ac:	f06f 0204 	mvn.w	r2, #4
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80022bc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022be:	d068      	beq.n	8002392 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80022c0:	f000 fc10 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c4:	2300      	movs	r3, #0
 80022c6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	0712      	lsls	r2, r2, #28
 80022ce:	d50f      	bpl.n	80022f0 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	0710      	lsls	r0, r2, #28
 80022d4:	d50c      	bpl.n	80022f0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022d6:	f06f 0208 	mvn.w	r2, #8
 80022da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022dc:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022de:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022e0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80022e4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e6:	d05a      	beq.n	800239e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80022e8:	f000 fbfc 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ec:	2300      	movs	r3, #0
 80022ee:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	06d2      	lsls	r2, r2, #27
 80022f6:	d510      	bpl.n	800231a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	06d0      	lsls	r0, r2, #27
 80022fc:	d50d      	bpl.n	800231a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022fe:	f06f 0210 	mvn.w	r2, #16
 8002302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002304:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002306:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002308:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002310:	d04b      	beq.n	80023aa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	f000 fbe7 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	2300      	movs	r3, #0
 8002318:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	07d1      	lsls	r1, r2, #31
 8002320:	d508      	bpl.n	8002334 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	07d2      	lsls	r2, r2, #31
 8002326:	d505      	bpl.n	8002334 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002328:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800232c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800232e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002330:	f000 fb8a 	bl	8002a48 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	0610      	lsls	r0, r2, #24
 800233a:	d508      	bpl.n	800234e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	0611      	lsls	r1, r2, #24
 8002340:	d505      	bpl.n	800234e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002342:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002346:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002348:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800234a:	f000 f9ae 	bl	80026aa <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	0652      	lsls	r2, r2, #25
 8002354:	d508      	bpl.n	8002368 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	0650      	lsls	r0, r2, #25
 800235a:	d505      	bpl.n	8002368 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800235c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002360:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002362:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002364:	f7ff ff85 	bl	8002272 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	0691      	lsls	r1, r2, #26
 800236e:	d522      	bpl.n	80023b6 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	0692      	lsls	r2, r2, #26
 8002374:	d51f      	bpl.n	80023b6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002376:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800237a:	4620      	mov	r0, r4
}
 800237c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002380:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002382:	f000 b991 	b.w	80026a8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	f7ff ff72 	bl	800226e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff ff70 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
 8002390:	e783      	b.n	800229a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	f7ff ff6c 	bl	800226e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ff6a 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
 800239c:	e792      	b.n	80022c4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	f7ff ff66 	bl	800226e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff ff64 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
 80023a8:	e7a0      	b.n	80022ec <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	f7ff ff60 	bl	800226e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ae:	4620      	mov	r0, r4
 80023b0:	f7ff ff5e 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
 80023b4:	e7af      	b.n	8002316 <HAL_TIM_IRQHandler+0xa2>
 80023b6:	bd10      	pop	{r4, pc}

080023b8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b8:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80023ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023bc:	4290      	cmp	r0, r2
 80023be:	d00a      	beq.n	80023d6 <TIM_Base_SetConfig+0x1e>
 80023c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023c4:	d007      	beq.n	80023d6 <TIM_Base_SetConfig+0x1e>
 80023c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80023ca:	4290      	cmp	r0, r2
 80023cc:	d003      	beq.n	80023d6 <TIM_Base_SetConfig+0x1e>
 80023ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d115      	bne.n	8002402 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80023d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023dc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <TIM_Base_SetConfig+0x6c>)
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d00a      	beq.n	80023fa <TIM_Base_SetConfig+0x42>
 80023e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023e8:	d007      	beq.n	80023fa <TIM_Base_SetConfig+0x42>
 80023ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80023ee:	4290      	cmp	r0, r2
 80023f0:	d003      	beq.n	80023fa <TIM_Base_SetConfig+0x42>
 80023f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023f6:	4290      	cmp	r0, r2
 80023f8:	d103      	bne.n	8002402 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002400:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002402:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002408:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800240a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240c:	688b      	ldr	r3, [r1, #8]
 800240e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002410:	680b      	ldr	r3, [r1, #0]
 8002412:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <TIM_Base_SetConfig+0x6c>)
 8002416:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002418:	bf04      	itt	eq
 800241a:	690b      	ldreq	r3, [r1, #16]
 800241c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800241e:	2301      	movs	r3, #1
 8002420:	6143      	str	r3, [r0, #20]
 8002422:	4770      	bx	lr
 8002424:	40012c00 	.word	0x40012c00

08002428 <HAL_TIM_Base_Init>:
{
 8002428:	b510      	push	{r4, lr}
  if(htim == NULL)
 800242a:	4604      	mov	r4, r0
 800242c:	b1a0      	cbz	r0, 8002458 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800242e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002432:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002436:	b91b      	cbnz	r3, 8002440 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002438:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800243c:	f000 fe70 	bl	8003120 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002440:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002442:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002448:	1d21      	adds	r1, r4, #4
 800244a:	f7ff ffb5 	bl	80023b8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800244e:	2301      	movs	r3, #1
  return HAL_OK;
 8002450:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002452:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002456:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002458:	2001      	movs	r0, #1
}
 800245a:	bd10      	pop	{r4, pc}

0800245c <HAL_TIM_IC_Init>:
{
 800245c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800245e:	4604      	mov	r4, r0
 8002460:	b1a0      	cbz	r0, 800248c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002462:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002466:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800246a:	b91b      	cbnz	r3, 8002474 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800246c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002470:	f7ff fe43 	bl	80020fa <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002474:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002476:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002478:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247c:	1d21      	adds	r1, r4, #4
 800247e:	f7ff ff9b 	bl	80023b8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002482:	2301      	movs	r3, #1
  return HAL_OK;
 8002484:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002486:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800248a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
}
 800248e:	bd10      	pop	{r4, pc}

08002490 <TIM_TI1_SetConfig>:
{
 8002490:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002492:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002494:	4e12      	ldr	r6, [pc, #72]	; (80024e0 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002496:	f024 0401 	bic.w	r4, r4, #1
 800249a:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800249c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800249e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80024a0:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80024a2:	d00a      	beq.n	80024ba <TIM_TI1_SetConfig+0x2a>
 80024a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024a8:	d007      	beq.n	80024ba <TIM_TI1_SetConfig+0x2a>
 80024aa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80024ae:	42b0      	cmp	r0, r6
 80024b0:	d003      	beq.n	80024ba <TIM_TI1_SetConfig+0x2a>
 80024b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80024b6:	42b0      	cmp	r0, r6
 80024b8:	d10f      	bne.n	80024da <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80024ba:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80024be:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80024c0:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80024c6:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80024cc:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80024d0:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80024d2:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80024d4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024d6:	6201      	str	r1, [r0, #32]
}
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80024da:	f044 0201 	orr.w	r2, r4, #1
 80024de:	e7ef      	b.n	80024c0 <TIM_TI1_SetConfig+0x30>
 80024e0:	40012c00 	.word	0x40012c00

080024e4 <HAL_TIM_IC_ConfigChannel>:
{
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80024e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80024ea:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80024ec:	2b01      	cmp	r3, #1
{
 80024ee:	460d      	mov	r5, r1
 80024f0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80024f4:	d019      	beq.n	800252a <HAL_TIM_IC_ConfigChannel+0x46>
 80024f6:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80024fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002500:	b9a2      	cbnz	r2, 800252c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002502:	68cb      	ldr	r3, [r1, #12]
 8002504:	6820      	ldr	r0, [r4, #0]
 8002506:	c906      	ldmia	r1, {r1, r2}
 8002508:	f7ff ffc2 	bl	8002490 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800250c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800250e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	f022 020c 	bic.w	r2, r2, #12
 8002516:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	430a      	orrs	r2, r1
 800251c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800251e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002520:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002526:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800252a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800252c:	2a04      	cmp	r2, #4
 800252e:	688e      	ldr	r6, [r1, #8]
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	c982      	ldmia	r1, {r1, r7}
 8002534:	68e8      	ldr	r0, [r5, #12]
 8002536:	d11f      	bne.n	8002578 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002538:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800253a:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800253c:	f022 0210 	bic.w	r2, r2, #16
 8002540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002542:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002544:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002546:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800254a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800254e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002550:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002554:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002556:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002558:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800255c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002560:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002564:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800256c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002574:	619e      	str	r6, [r3, #24]
 8002576:	e7d2      	b.n	800251e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002578:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800257a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 800257c:	d11c      	bne.n	80025b8 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800257e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002582:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002584:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002586:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002588:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 800258c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 800258e:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002590:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002592:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002596:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002598:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800259a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800259e:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80025a2:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80025a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80025a6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	f022 020c 	bic.w	r2, r2, #12
 80025ae:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025b4:	61de      	str	r6, [r3, #28]
 80025b6:	e7b2      	b.n	800251e <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025be:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80025c0:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80025c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 80025c6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80025c8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80025cc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80025d0:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80025d2:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80025d4:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80025d6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 80025da:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80025de:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 80025e0:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80025e2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025ea:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80025f2:	e7df      	b.n	80025b4 <HAL_TIM_IC_ConfigChannel+0xd0>

080025f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025f4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80025f6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025f8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80025fa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80025fc:	ea23 0304 	bic.w	r3, r3, r4
 8002600:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002602:	6a03      	ldr	r3, [r0, #32]
 8002604:	408a      	lsls	r2, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	6202      	str	r2, [r0, #32]
 800260a:	bd10      	pop	{r4, pc}

0800260c <HAL_TIM_IC_Start_IT>:
{
 800260c:	b510      	push	{r4, lr}
 800260e:	4604      	mov	r4, r0
  switch (Channel)
 8002610:	290c      	cmp	r1, #12
 8002612:	d80d      	bhi.n	8002630 <HAL_TIM_IC_Start_IT+0x24>
 8002614:	e8df f001 	tbb	[pc, r1]
 8002618:	0c0c0c07 	.word	0x0c0c0c07
 800261c:	0c0c0c17 	.word	0x0c0c0c17
 8002620:	0c0c0c1c 	.word	0x0c0c0c1c
 8002624:	21          	.byte	0x21
 8002625:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002626:	6802      	ldr	r2, [r0, #0]
 8002628:	68d3      	ldr	r3, [r2, #12]
 800262a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800262e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002630:	6820      	ldr	r0, [r4, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	f7ff ffde 	bl	80025f4 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002638:	6822      	ldr	r2, [r4, #0]
}
 800263a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800263c:	6813      	ldr	r3, [r2, #0]
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002646:	6802      	ldr	r2, [r0, #0]
 8002648:	68d3      	ldr	r3, [r2, #12]
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	e7ee      	b.n	800262e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002650:	6802      	ldr	r2, [r0, #0]
 8002652:	68d3      	ldr	r3, [r2, #12]
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	e7e9      	b.n	800262e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800265a:	6802      	ldr	r2, [r0, #0]
 800265c:	68d3      	ldr	r3, [r2, #12]
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	e7e4      	b.n	800262e <HAL_TIM_IC_Start_IT+0x22>

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002664:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002668:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800266a:	2b01      	cmp	r3, #1
 800266c:	f04f 0302 	mov.w	r3, #2
 8002670:	d018      	beq.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002672:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002676:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002678:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800267a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800267c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800267e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002682:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4322      	orrs	r2, r4
 8002688:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002690:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	430a      	orrs	r2, r1
 8002696:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002698:	2301      	movs	r3, #1
 800269a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800269e:	2300      	movs	r3, #0
 80026a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80026a4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80026a6:	bd10      	pop	{r4, pc}

080026a8 <HAL_TIMEx_CommutationCallback>:
 80026a8:	4770      	bx	lr

080026aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	4770      	bx	lr

080026ac <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80026ac:	4825      	ldr	r0, [pc, #148]	; (8002744 <MX_ADC1_Init+0x98>)
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <MX_ADC1_Init+0x9c>)
{
 80026b0:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 80026b2:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b8:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80026ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026be:	2400      	movs	r4, #0
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80026c0:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 80026c2:	2304      	movs	r3, #4
{
 80026c4:	b085      	sub	sp, #20
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026c6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026c8:	6144      	str	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026ca:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 80026cc:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026ce:	f7fe fb5b 	bl	8000d88 <HAL_ADC_Init>
 80026d2:	b118      	cbz	r0, 80026dc <MX_ADC1_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026d4:	2145      	movs	r1, #69	; 0x45
 80026d6:	481d      	ldr	r0, [pc, #116]	; (800274c <MX_ADC1_Init+0xa0>)
 80026d8:	f000 faa8 	bl	8002c2c <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026dc:	2501      	movs	r5, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026de:	a901      	add	r1, sp, #4
 80026e0:	4818      	ldr	r0, [pc, #96]	; (8002744 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_0;
 80026e2:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026e4:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026e6:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e8:	f7fe f9e2 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 80026ec:	b118      	cbz	r0, 80026f6 <MX_ADC1_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026ee:	214f      	movs	r1, #79	; 0x4f
 80026f0:	4816      	ldr	r0, [pc, #88]	; (800274c <MX_ADC1_Init+0xa0>)
 80026f2:	f000 fa9b 	bl	8002c2c <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026f6:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f8:	a901      	add	r1, sp, #4
 80026fa:	4812      	ldr	r0, [pc, #72]	; (8002744 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_1;
 80026fc:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026fe:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002700:	f7fe f9d6 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 8002704:	b118      	cbz	r0, 800270e <MX_ADC1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002706:	2158      	movs	r1, #88	; 0x58
 8002708:	4810      	ldr	r0, [pc, #64]	; (800274c <MX_ADC1_Init+0xa0>)
 800270a:	f000 fa8f 	bl	8002c2c <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 800270e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002710:	2403      	movs	r4, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002712:	a901      	add	r1, sp, #4
 8002714:	480b      	ldr	r0, [pc, #44]	; (8002744 <MX_ADC1_Init+0x98>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002716:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002718:	f7fe f9ca 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 800271c:	b118      	cbz	r0, 8002726 <MX_ADC1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800271e:	2161      	movs	r1, #97	; 0x61
 8002720:	480a      	ldr	r0, [pc, #40]	; (800274c <MX_ADC1_Init+0xa0>)
 8002722:	f000 fa83 	bl	8002c2c <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002726:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <MX_ADC1_Init+0x98>)
 800272a:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Channel = ADC_CHANNEL_3;
 800272e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002730:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002732:	f7fe f9bd 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 8002736:	b118      	cbz	r0, 8002740 <MX_ADC1_Init+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002738:	216a      	movs	r1, #106	; 0x6a
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <MX_ADC1_Init+0xa0>)
 800273c:	f000 fa76 	bl	8002c2c <_Error_Handler>
  }

}
 8002740:	b005      	add	sp, #20
 8002742:	bd30      	pop	{r4, r5, pc}
 8002744:	20000068 	.word	0x20000068
 8002748:	40012400 	.word	0x40012400
 800274c:	080032c0 	.word	0x080032c0

08002750 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002750:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002752:	6802      	ldr	r2, [r0, #0]
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_ADC_MspInit+0x74>)
{
 8002756:	b087      	sub	sp, #28
  if(adcHandle->Instance==ADC1)
 8002758:	429a      	cmp	r2, r3
{
 800275a:	4605      	mov	r5, r0
  if(adcHandle->Instance==ADC1)
 800275c:	d12f      	bne.n	80027be <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002762:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	4818      	ldr	r0, [pc, #96]	; (80027c8 <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	619a      	str	r2, [r3, #24]
 800276c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002778:	230f      	movs	r3, #15
 800277a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277c:	2303      	movs	r3, #3

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800277e:	4c13      	ldr	r4, [pc, #76]	; (80027cc <HAL_ADC_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002780:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f7fe fd01 	bl	8001188 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_ADC_MspInit+0x80>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002788:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 800278a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278c:	2300      	movs	r3, #0
 800278e:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002790:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279a:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800279c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a0:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027a2:	2320      	movs	r3, #32
 80027a4:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027aa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027ac:	f7fe fbe6 	bl	8000f7c <HAL_DMA_Init>
 80027b0:	b118      	cbz	r0, 80027ba <HAL_ADC_MspInit+0x6a>
    {
      _Error_Handler(__FILE__, __LINE__);
 80027b2:	2191      	movs	r1, #145	; 0x91
 80027b4:	4807      	ldr	r0, [pc, #28]	; (80027d4 <HAL_ADC_MspInit+0x84>)
 80027b6:	f000 fa39 	bl	8002c2c <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80027ba:	622c      	str	r4, [r5, #32]
 80027bc:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80027be:	b007      	add	sp, #28
 80027c0:	bd30      	pop	{r4, r5, pc}
 80027c2:	bf00      	nop
 80027c4:	40012400 	.word	0x40012400
 80027c8:	40010800 	.word	0x40010800
 80027cc:	20000098 	.word	0x20000098
 80027d0:	40020008 	.word	0x40020008
 80027d4:	080032c0 	.word	0x080032c0

080027d8 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <MX_DMA_Init+0x2c>)
{
 80027da:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027dc:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027de:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e8:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027ea:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027f4:	f7fe fb5a 	bl	8000eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027f8:	200b      	movs	r0, #11
 80027fa:	f7fe fb8b 	bl	8000f14 <HAL_NVIC_EnableIRQ>

}
 80027fe:	b003      	add	sp, #12
 8002800:	f85d fb04 	ldr.w	pc, [sp], #4
 8002804:	40021000 	.word	0x40021000

08002808 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_GPIO_Init+0x58>)
{
 800280a:	b500      	push	{lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800280c:	699a      	ldr	r2, [r3, #24]
{
 800280e:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = Bit1_Pin|Bit2_Pin|Bit3_Pin|Bit4_Pin 
                          |Bit5_Pin|Bit6_Pin|Bit7_Pin|Bit8_Pin 
                          |Bit9_Pin|Bit10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800281a:	f002 0220 	and.w	r2, r2, #32
 800281e:	9201      	str	r2, [sp, #4]
 8002820:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002824:	480f      	ldr	r0, [pc, #60]	; (8002864 <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	f042 0204 	orr.w	r2, r2, #4
 800282a:	619a      	str	r2, [r3, #24]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	f002 0204 	and.w	r2, r2, #4
 8002832:	9202      	str	r2, [sp, #8]
 8002834:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	f042 0208 	orr.w	r2, r2, #8
 800283c:	619a      	str	r2, [r3, #24]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	9303      	str	r3, [sp, #12]
 8002846:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = Bit1_Pin|Bit2_Pin|Bit3_Pin|Bit4_Pin 
 8002848:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800284c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284e:	2300      	movs	r3, #0
 8002850:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002854:	f7fe fc98 	bl	8001188 <HAL_GPIO_Init>

}
 8002858:	b009      	add	sp, #36	; 0x24
 800285a:	f85d fb04 	ldr.w	pc, [sp], #4
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40010c00 	.word	0x40010c00

08002868 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002868:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 400000;
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <MX_I2C2_Init+0x3c>)
 800286e:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80028ac <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 8002876:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800287a:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800287c:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800287e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002880:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002882:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002884:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002886:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002888:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800288a:	f7fe fe59 	bl	8001540 <HAL_I2C_Init>
 800288e:	b128      	cbz	r0, 800289c <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002894:	2142      	movs	r1, #66	; 0x42
 8002896:	4804      	ldr	r0, [pc, #16]	; (80028a8 <MX_I2C2_Init+0x40>)
 8002898:	f000 b9c8 	b.w	8002c2c <_Error_Handler>
 800289c:	bd08      	pop	{r3, pc}
 800289e:	bf00      	nop
 80028a0:	200000dc 	.word	0x200000dc
 80028a4:	40005800 	.word	0x40005800
 80028a8:	080032cd 	.word	0x080032cd
 80028ac:	00061a80 	.word	0x00061a80

080028b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C2)
 80028b2:	6802      	ldr	r2, [r0, #0]
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_I2C_MspInit+0x3c>)
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d114      	bne.n	80028e4 <HAL_I2C_MspInit+0x34>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c0:	2312      	movs	r3, #18
 80028c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c6:	a902      	add	r1, sp, #8
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <HAL_I2C_MspInit+0x40>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f7fe fc5c 	bl	8001188 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_I2C_MspInit+0x44>)
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028d8:	61da      	str	r2, [r3, #28]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80028e4:	b007      	add	sp, #28
 80028e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ea:	bf00      	nop
 80028ec:	40005800 	.word	0x40005800
 80028f0:	40010c00 	.word	0x40010c00
 80028f4:	40021000 	.word	0x40021000

080028f8 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80028fc:	b510      	push	{r4, lr}
 80028fe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002900:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002902:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002904:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002906:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002908:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800290a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002910:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002912:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002914:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002916:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002918:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800291a:	f7ff f8e9 	bl	8001af0 <HAL_RCC_OscConfig>
 800291e:	b100      	cbz	r0, 8002922 <SystemClock_Config+0x2a>
 8002920:	e7fe      	b.n	8002920 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002922:	230f      	movs	r3, #15
 8002924:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002926:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800292a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800292c:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800292e:	4621      	mov	r1, r4
 8002930:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002932:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002934:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002936:	f7ff faa3 	bl	8001e80 <HAL_RCC_ClockConfig>
 800293a:	b100      	cbz	r0, 800293e <SystemClock_Config+0x46>
 800293c:	e7fe      	b.n	800293c <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800293e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002942:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002944:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002946:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002948:	f7ff fb54 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 800294c:	4604      	mov	r4, r0
 800294e:	b100      	cbz	r0, 8002952 <SystemClock_Config+0x5a>
 8002950:	e7fe      	b.n	8002950 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002952:	f7ff fb39 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	fbb0 f0f3 	udiv	r0, r0, r3
 800295e:	f7fe fae5 	bl	8000f2c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002962:	2004      	movs	r0, #4
 8002964:	f7fe faf8 	bl	8000f58 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002968:	4622      	mov	r2, r4
 800296a:	4621      	mov	r1, r4
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f7fe fa9c 	bl	8000eac <HAL_NVIC_SetPriority>
}
 8002974:	b014      	add	sp, #80	; 0x50
 8002976:	bd10      	pop	{r4, pc}

08002978 <main>:
{
 8002978:	b507      	push	{r0, r1, r2, lr}
	HAL_TIM_Base_Start_IT(&htim2);                        /*TIMER 2 START COUNTING */
 800297a:	4828      	ldr	r0, [pc, #160]	; (8002a1c <main+0xa4>)
 800297c:	f7ff fbb2 	bl	80020e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2 , TIM_CHANNEL_1);
 8002980:	2100      	movs	r1, #0
 8002982:	4826      	ldr	r0, [pc, #152]	; (8002a1c <main+0xa4>)
 8002984:	f7ff fe42 	bl	800260c <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);                        /*TIMER 1 START COUNTING*/
 8002988:	4825      	ldr	r0, [pc, #148]	; (8002a20 <main+0xa8>)
 800298a:	f7ff fbab 	bl	80020e4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1 , TIM_CHANNEL_1);      /*START IC interrupt mode FOR CHANNEL 1*/
 800298e:	2100      	movs	r1, #0
 8002990:	4823      	ldr	r0, [pc, #140]	; (8002a20 <main+0xa8>)
 8002992:	f7ff fe3b 	bl	800260c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1 , TIM_CHANNEL_2);      /*START IC interrupt mode FOR CHANNEL 2*/
 8002996:	2104      	movs	r1, #4
 8002998:	4821      	ldr	r0, [pc, #132]	; (8002a20 <main+0xa8>)
 800299a:	f7ff fe37 	bl	800260c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1 , TIM_CHANNEL_3);      /*START IC interrupt mode FOR CHANNEL 3*/
 800299e:	2108      	movs	r1, #8
 80029a0:	481f      	ldr	r0, [pc, #124]	; (8002a20 <main+0xa8>)
 80029a2:	f7ff fe33 	bl	800260c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1 , TIM_CHANNEL_4);      /*START IC interrupt mode FOR CHANNEL 4*/
 80029a6:	210c      	movs	r1, #12
 80029a8:	481d      	ldr	r0, [pc, #116]	; (8002a20 <main+0xa8>)
 80029aa:	f7ff fe2f 	bl	800260c <HAL_TIM_IC_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 80029ae:	481d      	ldr	r0, [pc, #116]	; (8002a24 <main+0xac>)
 80029b0:	f7ff fb98 	bl	80020e4 <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_reading,4);
 80029b4:	2204      	movs	r2, #4
 80029b6:	491c      	ldr	r1, [pc, #112]	; (8002a28 <main+0xb0>)
 80029b8:	481c      	ldr	r0, [pc, #112]	; (8002a2c <main+0xb4>)
 80029ba:	f7fe f935 	bl	8000c28 <HAL_ADC_Start_DMA>
  HAL_Init();
 80029be:	f7fe f805 	bl	80009cc <HAL_Init>
  SystemClock_Config();
 80029c2:	f7ff ff99 	bl	80028f8 <SystemClock_Config>
  MX_GPIO_Init();
 80029c6:	f7ff ff1f 	bl	8002808 <MX_GPIO_Init>
  MX_DMA_Init();
 80029ca:	f7ff ff05 	bl	80027d8 <MX_DMA_Init>
  MX_ADC1_Init();
 80029ce:	f7ff fe6d 	bl	80026ac <MX_ADC1_Init>
  MX_TIM3_Init();
 80029d2:	f000 fb6d 	bl	80030b0 <MX_TIM3_Init>
  MX_I2C2_Init();
 80029d6:	f7ff ff47 	bl	8002868 <MX_I2C2_Init>
  MX_TIM1_Init();
 80029da:	f000 fab1 	bl	8002f40 <MX_TIM1_Init>
  MX_TIM2_Init();
 80029de:	f000 fb1b 	bl	8003018 <MX_TIM2_Init>
  MPU6050_Init(&hi2c2, MPU6050_ADDRESS_AD0LOW, FULLSCALE_250, FULLSCALE_2g, SAMPLERATE_8KHz);
 80029e2:	2300      	movs	r3, #0
 80029e4:	21d0      	movs	r1, #208	; 0xd0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4811      	ldr	r0, [pc, #68]	; (8002a30 <main+0xb8>)
 80029ec:	f000 f91f 	bl	8002c2e <MPU6050_Init>
	  MPU6050_ReadRawData(&hi2c2,MPU6050_ADDRESS_AD0LOW,&mpu1);
 80029f0:	4e10      	ldr	r6, [pc, #64]	; (8002a34 <main+0xbc>)
 80029f2:	4d0f      	ldr	r5, [pc, #60]	; (8002a30 <main+0xb8>)
	  steering_graycode_reading = inputReading();
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <main+0xc0>)
	  MPU6050_ReadRawData(&hi2c2,MPU6050_ADDRESS_AD0LOW,&mpu1);
 80029f6:	4632      	mov	r2, r6
 80029f8:	21d0      	movs	r1, #208	; 0xd0
 80029fa:	4628      	mov	r0, r5
 80029fc:	f000 f953 	bl	8002ca6 <MPU6050_ReadRawData>
	  steering_graycode_reading = inputReading();
 8002a00:	f000 f9ae 	bl	8002d60 <inputReading>
	  steering_decimal_reading = graytoDecimal(steering_graycode_reading,10);
 8002a04:	210a      	movs	r1, #10
	  steering_graycode_reading = inputReading();
 8002a06:	6020      	str	r0, [r4, #0]
	  steering_decimal_reading = graytoDecimal(steering_graycode_reading,10);
 8002a08:	f000 f9b6 	bl	8002d78 <graytoDecimal>
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <main+0xc4>)
 8002a0e:	6018      	str	r0, [r3, #0]
	  steering_final_reading = actualReading();
 8002a10:	f000 f9f0 	bl	8002df4 <actualReading>
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <main+0xc8>)
 8002a16:	6018      	str	r0, [r3, #0]
 8002a18:	e7ed      	b.n	80029f6 <main+0x7e>
 8002a1a:	bf00      	nop
 8002a1c:	200001e4 	.word	0x200001e4
 8002a20:	200001a4 	.word	0x200001a4
 8002a24:	20000164 	.word	0x20000164
 8002a28:	20000140 	.word	0x20000140
 8002a2c:	20000068 	.word	0x20000068
 8002a30:	200000dc 	.word	0x200000dc
 8002a34:	20000154 	.word	0x20000154
 8002a38:	20000150 	.word	0x20000150
 8002a3c:	2000014c 	.word	0x2000014c
 8002a40:	20000148 	.word	0x20000148
 8002a44:	00000000 	.word	0x00000000

08002a48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (htim->Instance == TIM1)
 8002a4c:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002a4e:	6803      	ldr	r3, [r0, #0]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10e      	bne.n	8002a72 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		Number_of_over_flows[0]++;
 8002a54:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	3201      	adds	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
		Number_of_over_flows[1]++;
 8002a5c:	785a      	ldrb	r2, [r3, #1]
 8002a5e:	3201      	adds	r2, #1
 8002a60:	705a      	strb	r2, [r3, #1]
		Number_of_over_flows[2]++;
 8002a62:	789a      	ldrb	r2, [r3, #2]
 8002a64:	3201      	adds	r2, #1
 8002a66:	709a      	strb	r2, [r3, #2]
		Number_of_over_flows[3]++;
 8002a68:	78da      	ldrb	r2, [r3, #3]
 8002a6a:	3201      	adds	r2, #1
 8002a6c:	70da      	strb	r2, [r3, #3]
 8002a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	if (htim->Instance == TIM2)
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a76:	d105      	bne.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		Number_of_over_flows[4]++;
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a7a:	7913      	ldrb	r3, [r2, #4]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	7113      	strb	r3, [r2, #4]
 8002a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	if(htim->Instance==TIM3)
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d119      	bne.n	8002abe <HAL_TIM_PeriodElapsedCallback+0x76>
			//converting ADC readings into length in mm
			/*
			*    adc_reading     ------------> 4095 (full scale of 12 bit ADC)
			*  measured_distance   ----------> 30   (3cm)
			*/
			measured_distance[i]=adc_reading[i]*(30)/(4095.0);
 8002a8a:	a70f      	add	r7, pc, #60	; (adr r7, 8002ac8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a8c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002a90:	2400      	movs	r4, #0
 8002a92:	f04f 081e 	mov.w	r8, #30
 8002a96:	4d11      	ldr	r5, [pc, #68]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a98:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002ae0 <HAL_TIM_PeriodElapsedCallback+0x98>
 8002a9c:	f839 0014 	ldrh.w	r0, [r9, r4, lsl #1]
 8002aa0:	fb08 f000 	mul.w	r0, r8, r0
 8002aa4:	f7fd fca6 	bl	80003f4 <__aeabi_i2d>
 8002aa8:	4632      	mov	r2, r6
 8002aaa:	463b      	mov	r3, r7
 8002aac:	f7fd fe32 	bl	8000714 <__aeabi_ddiv>
 8002ab0:	f7fd ff18 	bl	80008e4 <__aeabi_d2f>
 8002ab4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8002ab8:	3401      	adds	r4, #1
		for(i=0; i<4; i++)
 8002aba:	2c04      	cmp	r4, #4
 8002abc:	d1ee      	bne.n	8002a9c <HAL_TIM_PeriodElapsedCallback+0x54>
 8002abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ac2:	bf00      	nop
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	00000000 	.word	0x00000000
 8002acc:	40affe00 	.word	0x40affe00
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	20000028 	.word	0x20000028
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	20000130 	.word	0x20000130
 8002ae0:	20000140 	.word	0x20000140

08002ae4 <HAL_TIM_IC_CaptureCallback>:
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{

	if (htim->Instance == TIM1)
 8002ae4:	6803      	ldr	r3, [r0, #0]
 8002ae6:	4a49      	ldr	r2, [pc, #292]	; (8002c0c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d170      	bne.n	8002bce <HAL_TIM_IC_CaptureCallback+0xea>
	{
		if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)  // check if channel 1 is interrupted
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	0799      	lsls	r1, r3, #30
 8002af0:	d00f      	beq.n	8002b12 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			if (flag[0] == 0)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	d149      	bne.n	8002b8e <HAL_TIM_IC_CaptureCallback+0xaa>
			{
                Number_of_over_flows[0] = 0;
 8002afa:	4946      	ldr	r1, [pc, #280]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002afc:	700a      	strb	r2, [r1, #0]
                flag[0] = 1;
 8002afe:	2201      	movs	r2, #1
			}
			else if (flag[0] == 1)
			{
                updateCounter[0] = Number_of_over_flows[0];
                flag[0] = 0;
 8002b00:	701a      	strb	r2, [r3, #0]
			}
			g_old_capture_val[0] = g_capture_val[0];
 8002b02:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002b04:	4a45      	ldr	r2, [pc, #276]	; (8002c1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	6011      	str	r1, [r2, #0]
			g_capture_val[0] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8002b0a:	4a45      	ldr	r2, [pc, #276]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b10:	601a      	str	r2, [r3, #0]
		}

		if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)  // check if channel 2 is interrupted
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b1a:	d00f      	beq.n	8002b3c <HAL_TIM_IC_CaptureCallback+0x58>
		{
			if (flag[1] == 0)
 8002b1c:	4b3c      	ldr	r3, [pc, #240]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002b1e:	785a      	ldrb	r2, [r3, #1]
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	d13c      	bne.n	8002b9e <HAL_TIM_IC_CaptureCallback+0xba>
			{
				Number_of_over_flows[1] = 0;
 8002b24:	493b      	ldr	r1, [pc, #236]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002b26:	704a      	strb	r2, [r1, #1]
				flag[1] = 1;
 8002b28:	2201      	movs	r2, #1
			}
			else if (flag[1] == 1)
			{
				updateCounter[1] = Number_of_over_flows[1];
				flag[1] = 0;
 8002b2a:	705a      	strb	r2, [r3, #1]
			}
			g_old_capture_val[1] = g_capture_val[1];
 8002b2c:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	6051      	str	r1, [r2, #4]
			g_capture_val[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002b34:	4a3a      	ldr	r2, [pc, #232]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b3a:	605a      	str	r2, [r3, #4]
		}

		if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)  // check if channel 3 is interrupted
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	079a      	lsls	r2, r3, #30
 8002b42:	d00f      	beq.n	8002b64 <HAL_TIM_IC_CaptureCallback+0x80>
		{
			if (flag[2] == 0)
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002b46:	789a      	ldrb	r2, [r3, #2]
 8002b48:	2a00      	cmp	r2, #0
 8002b4a:	d130      	bne.n	8002bae <HAL_TIM_IC_CaptureCallback+0xca>
			{
				Number_of_over_flows[2] = 0;
 8002b4c:	4931      	ldr	r1, [pc, #196]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002b4e:	708a      	strb	r2, [r1, #2]
				flag[2] = 1;
 8002b50:	2201      	movs	r2, #1
			}
			else if (flag[2] == 1)
			{
				updateCounter[2] = Number_of_over_flows[2];
				flag[2] = 0;
 8002b52:	709a      	strb	r2, [r3, #2]
			}
			g_old_capture_val[2] = g_capture_val[2];
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002b56:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	6091      	str	r1, [r2, #8]
			g_capture_val[2] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_3);
 8002b5c:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b62:	609a      	str	r2, [r3, #8]
		}

		if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)  // check if channel 4 is interrupted
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002b6c:	d044      	beq.n	8002bf8 <HAL_TIM_IC_CaptureCallback+0x114>
		{

			if (flag[3] == 0)
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002b70:	78da      	ldrb	r2, [r3, #3]
 8002b72:	bb22      	cbnz	r2, 8002bbe <HAL_TIM_IC_CaptureCallback+0xda>
			{
				Number_of_over_flows[3] = 0;
 8002b74:	4927      	ldr	r1, [pc, #156]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002b76:	70ca      	strb	r2, [r1, #3]
				flag[3] = 1;
 8002b78:	2201      	movs	r2, #1
			}
			else if (flag[3] == 1)
			{
				updateCounter[3] = Number_of_over_flows[3];
				flag[3] = 0;
 8002b7a:	70da      	strb	r2, [r3, #3]
			}
			g_old_capture_val[3] = g_capture_val[3];
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002b7e:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002b80:	68d9      	ldr	r1, [r3, #12]
 8002b82:	60d1      	str	r1, [r2, #12]
			g_capture_val[3] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_4);
 8002b84:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	4770      	bx	lr
			else if (flag[0] == 1)
 8002b8e:	2a01      	cmp	r2, #1
 8002b90:	d1b7      	bne.n	8002b02 <HAL_TIM_IC_CaptureCallback+0x1e>
                updateCounter[0] = Number_of_over_flows[0];
 8002b92:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002b94:	7811      	ldrb	r1, [r2, #0]
 8002b96:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002b98:	7011      	strb	r1, [r2, #0]
                flag[0] = 0;
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	e7b0      	b.n	8002b00 <HAL_TIM_IC_CaptureCallback+0x1c>
			else if (flag[1] == 1)
 8002b9e:	2a01      	cmp	r2, #1
 8002ba0:	d1c4      	bne.n	8002b2c <HAL_TIM_IC_CaptureCallback+0x48>
				updateCounter[1] = Number_of_over_flows[1];
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002ba4:	7851      	ldrb	r1, [r2, #1]
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002ba8:	7051      	strb	r1, [r2, #1]
				flag[1] = 0;
 8002baa:	2200      	movs	r2, #0
 8002bac:	e7bd      	b.n	8002b2a <HAL_TIM_IC_CaptureCallback+0x46>
			else if (flag[2] == 1)
 8002bae:	2a01      	cmp	r2, #1
 8002bb0:	d1d0      	bne.n	8002b54 <HAL_TIM_IC_CaptureCallback+0x70>
				updateCounter[2] = Number_of_over_flows[2];
 8002bb2:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002bb4:	7891      	ldrb	r1, [r2, #2]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002bb8:	7091      	strb	r1, [r2, #2]
				flag[2] = 0;
 8002bba:	2200      	movs	r2, #0
 8002bbc:	e7c9      	b.n	8002b52 <HAL_TIM_IC_CaptureCallback+0x6e>
			else if (flag[3] == 1)
 8002bbe:	2a01      	cmp	r2, #1
 8002bc0:	d1dc      	bne.n	8002b7c <HAL_TIM_IC_CaptureCallback+0x98>
				updateCounter[3] = Number_of_over_flows[3];
 8002bc2:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002bc4:	78d1      	ldrb	r1, [r2, #3]
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002bc8:	70d1      	strb	r1, [r2, #3]
				flag[3] = 0;
 8002bca:	2200      	movs	r2, #0
 8002bcc:	e7d5      	b.n	8002b7a <HAL_TIM_IC_CaptureCallback+0x96>
		}
	}

	if (htim->Instance == TIM2)
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d111      	bne.n	8002bf8 <HAL_TIM_IC_CaptureCallback+0x114>
	{
		if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)  // check if channel 1 is interrupted
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	079b      	lsls	r3, r3, #30
 8002bd8:	d00e      	beq.n	8002bf8 <HAL_TIM_IC_CaptureCallback+0x114>
		{
			if (flag[4] == 0) {
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002bdc:	791a      	ldrb	r2, [r3, #4]
 8002bde:	b962      	cbnz	r2, 8002bfa <HAL_TIM_IC_CaptureCallback+0x116>
				Number_of_over_flows[4] = 0;
 8002be0:	490c      	ldr	r1, [pc, #48]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002be2:	710a      	strb	r2, [r1, #4]
				flag[4] = 1;
 8002be4:	2201      	movs	r2, #1
			}
			else if (flag[4] == 1)
			{
				updateCounter[4] = Number_of_over_flows[4];
				flag[4] = 0;
 8002be6:	711a      	strb	r2, [r3, #4]
			}
			g_old_capture_val[4] = g_capture_val[4];
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002bea:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	6111      	str	r1, [r2, #16]
			g_capture_val[4] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf6:	611a      	str	r2, [r3, #16]
 8002bf8:	4770      	bx	lr
			else if (flag[4] == 1)
 8002bfa:	2a01      	cmp	r2, #1
 8002bfc:	d1f4      	bne.n	8002be8 <HAL_TIM_IC_CaptureCallback+0x104>
				updateCounter[4] = Number_of_over_flows[4];
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002c00:	7911      	ldrb	r1, [r2, #4]
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002c04:	7111      	strb	r1, [r2, #4]
				flag[4] = 0;
 8002c06:	2200      	movs	r2, #0
 8002c08:	e7ed      	b.n	8002be6 <HAL_TIM_IC_CaptureCallback+0x102>
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	2000002d 	.word	0x2000002d
 8002c14:	20000028 	.word	0x20000028
 8002c18:	20000034 	.word	0x20000034
 8002c1c:	20000048 	.word	0x20000048
 8002c20:	200001a4 	.word	0x200001a4
 8002c24:	2000005c 	.word	0x2000005c
 8002c28:	200001e4 	.word	0x200001e4

08002c2c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002c2c:	e7fe      	b.n	8002c2c <_Error_Handler>

08002c2e <MPU6050_Init>:
void MPU6050_Init(I2C_HandleTypeDef *hi2c,
	              MPU6050_I2CAddress address,
				  MPU6050_GyroFS gyro_FS,
				  MPU6050_AccelFS accel_FS,
				  MPU6050_SamplingRate sampling_rate)
{
 8002c2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002c32:	461f      	mov	r7, r3

	uint8_t data_buffer[2];
	/*wake up MPU from sleep mode*/
	data_buffer[0]=MPU6050_PWR_MGMT_1;
 8002c34:	236b      	movs	r3, #107	; 0x6b
	data_buffer[1]=SLEEPMODE_OFF;
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c36:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	data_buffer[0]=MPU6050_PWR_MGMT_1;
 8002c3a:	f88d 300c 	strb.w	r3, [sp, #12]
	data_buffer[1]=SLEEPMODE_OFF;
 8002c3e:	2300      	movs	r3, #0
{
 8002c40:	4690      	mov	r8, r2
	data_buffer[1]=SLEEPMODE_OFF;
 8002c42:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c46:	aa03      	add	r2, sp, #12
 8002c48:	9500      	str	r5, [sp, #0]
 8002c4a:	2302      	movs	r3, #2
{
 8002c4c:	4606      	mov	r6, r0
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c4e:	460c      	mov	r4, r1
 8002c50:	f7fe fcf6 	bl	8001640 <HAL_I2C_Master_Transmit>

	/*set full scale of gyroscope*/
	data_buffer[0]= MPU6050_GYRO_CONFIG;
 8002c54:	231b      	movs	r3, #27
	data_buffer[1]=gyro_FS;
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c56:	aa03      	add	r2, sp, #12
	data_buffer[0]= MPU6050_GYRO_CONFIG;
 8002c58:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	9500      	str	r5, [sp, #0]
 8002c60:	2302      	movs	r3, #2
 8002c62:	4630      	mov	r0, r6
	data_buffer[1]=gyro_FS;
 8002c64:	f88d 800d 	strb.w	r8, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c68:	f7fe fcea 	bl	8001640 <HAL_I2C_Master_Transmit>

	/*set full scale of accelerometer*/
	data_buffer[0]= MPU6050_ACCEL_CONFIG;
 8002c6c:	231c      	movs	r3, #28
	data_buffer[1]=accel_FS;
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c6e:	aa03      	add	r2, sp, #12
	data_buffer[0]= MPU6050_ACCEL_CONFIG;
 8002c70:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c74:	4621      	mov	r1, r4
 8002c76:	9500      	str	r5, [sp, #0]
 8002c78:	2302      	movs	r3, #2
 8002c7a:	4630      	mov	r0, r6
	data_buffer[1]=accel_FS;
 8002c7c:	f88d 700d 	strb.w	r7, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c80:	f7fe fcde 	bl	8001640 <HAL_I2C_Master_Transmit>

	/*select sampling rate*/
	data_buffer[0]=MPU6050_SMPLRT_DIV;
 8002c84:	2319      	movs	r3, #25
 8002c86:	f88d 300c 	strb.w	r3, [sp, #12]
	data_buffer[1]=sampling_rate;
 8002c8a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c8e:	9500      	str	r5, [sp, #0]
	data_buffer[1]=sampling_rate;
 8002c90:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,2,1000);
 8002c94:	aa03      	add	r2, sp, #12
 8002c96:	2302      	movs	r3, #2
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	f7fe fcd0 	bl	8001640 <HAL_I2C_Master_Transmit>
}
 8002ca0:	b004      	add	sp, #16
 8002ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ca6 <MPU6050_ReadRawData>:

void MPU6050_ReadRawData(I2C_HandleTypeDef *hi2c,
					  MPU6050_I2CAddress address,
					  MPU6050_RawValues* mpu)
{
 8002ca6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t data_buffer[7];
	/*read data of gyroscope*/
	data_buffer[0]=MPU6050_GYRO_XOUT_H;
 8002caa:	2343      	movs	r3, #67	; 0x43
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8002cac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
{
 8002cb0:	4680      	mov	r8, r0
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8002cb2:	460d      	mov	r5, r1
{
 8002cb4:	4614      	mov	r4, r2
	data_buffer[0]=MPU6050_GYRO_XOUT_H;
 8002cb6:	af04      	add	r7, sp, #16
 8002cb8:	f807 3d08 	strb.w	r3, [r7, #-8]!
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8002cbc:	463a      	mov	r2, r7
 8002cbe:	9600      	str	r6, [sp, #0]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f7fe fcbd 	bl	8001640 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c,(uint16_t)address,&data_buffer[1],6,1000);
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f10d 0209 	add.w	r2, sp, #9
 8002ccc:	9600      	str	r6, [sp, #0]
 8002cce:	2306      	movs	r3, #6
 8002cd0:	4640      	mov	r0, r8
 8002cd2:	f7fe fd8b 	bl	80017ec <HAL_I2C_Master_Receive>
	mpu->gyroscope_x=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
 8002cd6:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002cda:	f89d 300a 	ldrb.w	r3, [sp, #10]
	mpu->gyroscope_y=(int16_t)(data_buffer[3]<<8)| data_buffer[4];
	mpu->gyroscope_z=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
	HAL_Delay(20);
 8002cde:	2014      	movs	r0, #20
	mpu->gyroscope_x=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
 8002ce0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ce4:	8023      	strh	r3, [r4, #0]
	mpu->gyroscope_y=(int16_t)(data_buffer[3]<<8)| data_buffer[4];
 8002ce6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002cea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002cf2:	8063      	strh	r3, [r4, #2]
	mpu->gyroscope_z=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
 8002cf4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002cf8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002cfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d00:	80a3      	strh	r3, [r4, #4]
	HAL_Delay(20);
 8002d02:	f7fd fe87 	bl	8000a14 <HAL_Delay>

	/*read data of accelerometer*/
	data_buffer[0]=MPU6050_ACCEL_XOUT_H;
 8002d06:	233b      	movs	r3, #59	; 0x3b
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8002d08:	463a      	mov	r2, r7
	data_buffer[0]=MPU6050_ACCEL_XOUT_H;
 8002d0a:	f88d 3008 	strb.w	r3, [sp, #8]
	HAL_I2C_Master_Transmit(hi2c,(uint16_t)address,data_buffer,1,1000);
 8002d0e:	4629      	mov	r1, r5
 8002d10:	9600      	str	r6, [sp, #0]
 8002d12:	2301      	movs	r3, #1
 8002d14:	4640      	mov	r0, r8
 8002d16:	f7fe fc93 	bl	8001640 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c,(uint16_t)address,&data_buffer[1],6,1000);
 8002d1a:	f10d 0209 	add.w	r2, sp, #9
 8002d1e:	4629      	mov	r1, r5
 8002d20:	9600      	str	r6, [sp, #0]
 8002d22:	2306      	movs	r3, #6
 8002d24:	4640      	mov	r0, r8
 8002d26:	f7fe fd61 	bl	80017ec <HAL_I2C_Master_Receive>
	mpu->accelerometer_x=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
 8002d2a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002d2e:	f89d 300a 	ldrb.w	r3, [sp, #10]
	mpu->accelerometer_y=(int16_t)(data_buffer[3]<<8)| data_buffer[4];
	mpu->accelerometer_z=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
	HAL_Delay(20);
 8002d32:	2014      	movs	r0, #20
	mpu->accelerometer_x=(int16_t)(data_buffer[1]<<8)| data_buffer[2];
 8002d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d38:	80e3      	strh	r3, [r4, #6]
	mpu->accelerometer_y=(int16_t)(data_buffer[3]<<8)| data_buffer[4];
 8002d3a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002d3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d46:	8123      	strh	r3, [r4, #8]
	mpu->accelerometer_z=(int16_t)(data_buffer[5]<<8)| data_buffer[6];
 8002d48:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002d4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002d50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d54:	8163      	strh	r3, [r4, #10]
	HAL_Delay(20);
 8002d56:	f7fd fe5d 	bl	8000a14 <HAL_Delay>
}
 8002d5a:	b004      	add	sp, #16
 8002d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d60 <inputReading>:
//functions definitions
uint32_t inputReading()
{
	uint32_t input=0;
	uint32_t value;
	value=GPIOB->IDR;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <inputReading+0x10>)
 8002d62:	6898      	ldr	r0, [r3, #8]
	}
		else
	{
		printf("moving CounterClockWise");
	} if used in lcd*/
	lastValue= input;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <inputReading+0x14>)
    input =value & 0x0000001111111111;
 8002d66:	f000 3011 	and.w	r0, r0, #286331153	; 0x11111111
	lastValue= input;
 8002d6a:	6018      	str	r0, [r3, #0]
	return input;
}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40010c00 	.word	0x40010c00
 8002d74:	20000160 	.word	0x20000160

08002d78 <graytoDecimal>:
uint32_t graytoDecimal(uint32_t graycode,int size)
{
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t Number;
	uint32_t gray[size];
 8002d7a:	008b      	lsls	r3, r1, #2
 8002d7c:	f103 020a 	add.w	r2, r3, #10
 8002d80:	f022 0207 	bic.w	r2, r2, #7
{
 8002d84:	af00      	add	r7, sp, #0
	uint32_t gray[size];
 8002d86:	ebad 0d02 	sub.w	sp, sp, r2
 8002d8a:	466d      	mov	r5, sp
	uint32_t binary[size];
 8002d8c:	ebad 0d02 	sub.w	sp, sp, r2
 8002d90:	466c      	mov	r4, sp
	for(int i=0;i<size;i++)
 8002d92:	2200      	movs	r2, #0
	{
		gray[size-1-i]=graycode%10 ;
 8002d94:	260a      	movs	r6, #10
 8002d96:	442b      	add	r3, r5
	for(int i=0;i<size;i++)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	f1a3 0304 	sub.w	r3, r3, #4
 8002d9e:	db0d      	blt.n	8002dbc <graytoDecimal+0x44>
		graycode/=10;
	}
    binary[0] = gray[0];
    for (int i = 1; i <size; i++)
 8002da0:	2201      	movs	r2, #1
    binary[0] = gray[0];
 8002da2:	682b      	ldr	r3, [r5, #0]
            {
            	binary[i] = 1;
            }
            else
            {
            	binary[i]=0;
 8002da4:	2000      	movs	r0, #0
    binary[0] = gray[0];
 8002da6:	6023      	str	r3, [r4, #0]
            	binary[i] = 1;
 8002da8:	4696      	mov	lr, r2
 8002daa:	4623      	mov	r3, r4
    for (int i = 1; i <size; i++)
 8002dac:	428a      	cmp	r2, r1
 8002dae:	db0d      	blt.n	8002dcc <graytoDecimal+0x54>
 8002db0:	2300      	movs	r3, #0
 8002db2:	4618      	mov	r0, r3
            }
        }
    }
    Number=0;
    for (int i=0;i<size;i++)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	db17      	blt.n	8002de8 <graytoDecimal+0x70>
            trial /= 10;
            decimalNumber += remainder*pow(2,i);
            i++;
        }*/
    return Number;
}
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gray[size-1-i]=graycode%10 ;
 8002dbc:	fbb0 fef6 	udiv	lr, r0, r6
 8002dc0:	fb06 001e 	mls	r0, r6, lr, r0
	for(int i=0;i<size;i++)
 8002dc4:	3201      	adds	r2, #1
		gray[size-1-i]=graycode%10 ;
 8002dc6:	6018      	str	r0, [r3, #0]
		graycode/=10;
 8002dc8:	4670      	mov	r0, lr
 8002dca:	e7e5      	b.n	8002d98 <graytoDecimal+0x20>
        if (gray[i] == 0)
 8002dcc:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 8002dd0:	b926      	cbnz	r6, 8002ddc <graytoDecimal+0x64>
            binary[i]= binary[i - 1];
 8002dd2:	681e      	ldr	r6, [r3, #0]
            	binary[i] = 1;
 8002dd4:	605e      	str	r6, [r3, #4]
    for (int i = 1; i <size; i++)
 8002dd6:	3201      	adds	r2, #1
 8002dd8:	3304      	adds	r3, #4
 8002dda:	e7e7      	b.n	8002dac <graytoDecimal+0x34>
            if(binary[i-1]==0)
 8002ddc:	681e      	ldr	r6, [r3, #0]
            	binary[i] = 1;
 8002dde:	2e00      	cmp	r6, #0
 8002de0:	bf14      	ite	ne
 8002de2:	4606      	movne	r6, r0
 8002de4:	4676      	moveq	r6, lr
 8002de6:	e7f5      	b.n	8002dd4 <graytoDecimal+0x5c>
    	Number|=binary[i];
 8002de8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i=0;i<size;i++)
 8002dec:	3301      	adds	r3, #1
    	Number|=binary[i];
 8002dee:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8002df2:	e7df      	b.n	8002db4 <graytoDecimal+0x3c>

08002df4 <actualReading>:
uint32_t actualReading(uint32_t steering_decimal_reading)
{
	return (steering_decimal_reading*360)/1024;
 8002df4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002df8:	4358      	muls	r0, r3
}
 8002dfa:	0a80      	lsrs	r0, r0, #10
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_MspInit+0x98>)
{
 8002e02:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e04:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e06:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	619a      	str	r2, [r3, #24]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	f002 0201 	and.w	r2, r2, #1
 8002e14:	9200      	str	r2, [sp, #0]
 8002e16:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e1e:	61da      	str	r2, [r3, #28]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2a:	f7fe f82d 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f06f 000b 	mvn.w	r0, #11
 8002e34:	4611      	mov	r1, r2
 8002e36:	f7fe f839 	bl	8000eac <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f06f 000a 	mvn.w	r0, #10
 8002e40:	4611      	mov	r1, r2
 8002e42:	f7fe f833 	bl	8000eac <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	f06f 0009 	mvn.w	r0, #9
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	f7fe f82d 	bl	8000eac <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	f06f 0004 	mvn.w	r0, #4
 8002e58:	4611      	mov	r1, r2
 8002e5a:	f7fe f827 	bl	8000eac <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f06f 0003 	mvn.w	r0, #3
 8002e64:	4611      	mov	r1, r2
 8002e66:	f7fe f821 	bl	8000eac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f06f 0001 	mvn.w	r0, #1
 8002e70:	4611      	mov	r1, r2
 8002e72:	f7fe f81b 	bl	8000eac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	f7fe f815 	bl	8000eac <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e82:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <HAL_MspInit+0x9c>)
 8002e84:	6853      	ldr	r3, [r2, #4]
 8002e86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e90:	b003      	add	sp, #12
 8002e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010000 	.word	0x40010000

08002ea0 <NMI_Handler>:
 8002ea0:	4770      	bx	lr

08002ea2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002ea2:	e7fe      	b.n	8002ea2 <HardFault_Handler>

08002ea4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002ea4:	e7fe      	b.n	8002ea4 <MemManage_Handler>

08002ea6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002ea6:	e7fe      	b.n	8002ea6 <BusFault_Handler>

08002ea8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002ea8:	e7fe      	b.n	8002ea8 <UsageFault_Handler>

08002eaa <SVC_Handler>:
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:
 8002eac:	4770      	bx	lr

08002eae <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002eae:	4770      	bx	lr

08002eb0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb2:	f7fd fd9d 	bl	80009f0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002eba:	f7fe b85a 	b.w	8000f72 <HAL_SYSTICK_IRQHandler>
	...

08002ec0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ec0:	4801      	ldr	r0, [pc, #4]	; (8002ec8 <DMA1_Channel1_IRQHandler+0x8>)
 8002ec2:	f7fe b8cd 	b.w	8001060 <HAL_DMA_IRQHandler>
 8002ec6:	bf00      	nop
 8002ec8:	20000098 	.word	0x20000098

08002ecc <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ecc:	4801      	ldr	r0, [pc, #4]	; (8002ed4 <TIM1_CC_IRQHandler+0x8>)
 8002ece:	f7ff b9d1 	b.w	8002274 <HAL_TIM_IRQHandler>
 8002ed2:	bf00      	nop
 8002ed4:	200001a4 	.word	0x200001a4

08002ed8 <TIM1_UP_IRQHandler>:
 8002ed8:	f7ff bff8 	b.w	8002ecc <TIM1_CC_IRQHandler>

08002edc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002edc:	4801      	ldr	r0, [pc, #4]	; (8002ee4 <TIM2_IRQHandler+0x8>)
 8002ede:	f7ff b9c9 	b.w	8002274 <HAL_TIM_IRQHandler>
 8002ee2:	bf00      	nop
 8002ee4:	200001e4 	.word	0x200001e4

08002ee8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ee8:	4801      	ldr	r0, [pc, #4]	; (8002ef0 <TIM3_IRQHandler+0x8>)
 8002eea:	f7ff b9c3 	b.w	8002274 <HAL_TIM_IRQHandler>
 8002eee:	bf00      	nop
 8002ef0:	20000164 	.word	0x20000164

08002ef4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <SystemInit+0x40>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <SystemInit+0x44>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f10:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f18:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f20:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f22:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f26:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <SystemInit+0x48>)
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	f8ff0000 	.word	0xf8ff0000
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <MX_TIM1_Init>:
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
 8002f40:	2347      	movs	r3, #71	; 0x47
  htim1.Instance = TIM1;
 8002f42:	4832      	ldr	r0, [pc, #200]	; (800300c <MX_TIM1_Init+0xcc>)
  htim1.Init.Prescaler = 71;
 8002f44:	4a32      	ldr	r2, [pc, #200]	; (8003010 <MX_TIM1_Init+0xd0>)
{
 8002f46:	b510      	push	{r4, lr}
  htim1.Init.Prescaler = 71;
 8002f48:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4c:	2300      	movs	r3, #0
  htim1.Init.Period = 65535;
 8002f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8002f52:	b08a      	sub	sp, #40	; 0x28
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f54:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8002f56:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f58:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f5a:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f5c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f5e:	f7ff fa63 	bl	8002428 <HAL_TIM_Base_Init>
 8002f62:	b118      	cbz	r0, 8002f6c <MX_TIM1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f64:	2145      	movs	r1, #69	; 0x45
 8002f66:	482b      	ldr	r0, [pc, #172]	; (8003014 <MX_TIM1_Init+0xd4>)
 8002f68:	f7ff fe60 	bl	8002c2c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f70:	a90a      	add	r1, sp, #40	; 0x28
 8002f72:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f76:	4825      	ldr	r0, [pc, #148]	; (800300c <MX_TIM1_Init+0xcc>)
 8002f78:	f7ff f8c0 	bl	80020fc <HAL_TIM_ConfigClockSource>
 8002f7c:	b118      	cbz	r0, 8002f86 <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f7e:	214b      	movs	r1, #75	; 0x4b
 8002f80:	4824      	ldr	r0, [pc, #144]	; (8003014 <MX_TIM1_Init+0xd4>)
 8002f82:	f7ff fe53 	bl	8002c2c <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002f86:	4821      	ldr	r0, [pc, #132]	; (800300c <MX_TIM1_Init+0xcc>)
 8002f88:	f7ff fa68 	bl	800245c <HAL_TIM_IC_Init>
 8002f8c:	b118      	cbz	r0, 8002f96 <MX_TIM1_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f8e:	2150      	movs	r1, #80	; 0x50
 8002f90:	4820      	ldr	r0, [pc, #128]	; (8003014 <MX_TIM1_Init+0xd4>)
 8002f92:	f7ff fe4b 	bl	8002c2c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f96:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f98:	4669      	mov	r1, sp
 8002f9a:	481c      	ldr	r0, [pc, #112]	; (800300c <MX_TIM1_Init+0xcc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f9c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f9e:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fa0:	f7ff fb60 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa4:	b118      	cbz	r0, 8002fae <MX_TIM1_Init+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fa6:	2157      	movs	r1, #87	; 0x57
 8002fa8:	481a      	ldr	r0, [pc, #104]	; (8003014 <MX_TIM1_Init+0xd4>)
 8002faa:	f7ff fe3f 	bl	8002c2c <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fae:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	a906      	add	r1, sp, #24
 8002fb4:	4815      	ldr	r0, [pc, #84]	; (800300c <MX_TIM1_Init+0xcc>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fb6:	9406      	str	r4, [sp, #24]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fb8:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fba:	9408      	str	r4, [sp, #32]
  sConfigIC.ICFilter = 0;
 8002fbc:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fbe:	f7ff fa91 	bl	80024e4 <HAL_TIM_IC_ConfigChannel>
 8002fc2:	b118      	cbz	r0, 8002fcc <MX_TIM1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fc4:	2160      	movs	r1, #96	; 0x60
 8002fc6:	4813      	ldr	r0, [pc, #76]	; (8003014 <MX_TIM1_Init+0xd4>)
 8002fc8:	f7ff fe30 	bl	8002c2c <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002fcc:	2204      	movs	r2, #4
 8002fce:	a906      	add	r1, sp, #24
 8002fd0:	480e      	ldr	r0, [pc, #56]	; (800300c <MX_TIM1_Init+0xcc>)
 8002fd2:	f7ff fa87 	bl	80024e4 <HAL_TIM_IC_ConfigChannel>
 8002fd6:	b118      	cbz	r0, 8002fe0 <MX_TIM1_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fd8:	2165      	movs	r1, #101	; 0x65
 8002fda:	480e      	ldr	r0, [pc, #56]	; (8003014 <MX_TIM1_Init+0xd4>)
 8002fdc:	f7ff fe26 	bl	8002c2c <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	a906      	add	r1, sp, #24
 8002fe4:	4809      	ldr	r0, [pc, #36]	; (800300c <MX_TIM1_Init+0xcc>)
 8002fe6:	f7ff fa7d 	bl	80024e4 <HAL_TIM_IC_ConfigChannel>
 8002fea:	b118      	cbz	r0, 8002ff4 <MX_TIM1_Init+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fec:	216a      	movs	r1, #106	; 0x6a
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <MX_TIM1_Init+0xd4>)
 8002ff0:	f7ff fe1c 	bl	8002c2c <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002ff4:	220c      	movs	r2, #12
 8002ff6:	a906      	add	r1, sp, #24
 8002ff8:	4804      	ldr	r0, [pc, #16]	; (800300c <MX_TIM1_Init+0xcc>)
 8002ffa:	f7ff fa73 	bl	80024e4 <HAL_TIM_IC_ConfigChannel>
 8002ffe:	b118      	cbz	r0, 8003008 <MX_TIM1_Init+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003000:	216f      	movs	r1, #111	; 0x6f
 8003002:	4804      	ldr	r0, [pc, #16]	; (8003014 <MX_TIM1_Init+0xd4>)
 8003004:	f7ff fe12 	bl	8002c2c <_Error_Handler>
  }

}
 8003008:	b00a      	add	sp, #40	; 0x28
 800300a:	bd10      	pop	{r4, pc}
 800300c:	200001a4 	.word	0x200001a4
 8003010:	40012c00 	.word	0x40012c00
 8003014:	080032f2 	.word	0x080032f2

08003018 <MX_TIM2_Init>:
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
 8003018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800301c:	2347      	movs	r3, #71	; 0x47
  htim2.Instance = TIM2;
 800301e:	4822      	ldr	r0, [pc, #136]	; (80030a8 <MX_TIM2_Init+0x90>)
{
 8003020:	b510      	push	{r4, lr}
  htim2.Init.Prescaler = 71;
 8003022:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003026:	2300      	movs	r3, #0
  htim2.Init.Period = 65535;
 8003028:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 800302c:	b08a      	sub	sp, #40	; 0x28
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8003030:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003032:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003034:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003036:	f7ff f9f7 	bl	8002428 <HAL_TIM_Base_Init>
 800303a:	b118      	cbz	r0, 8003044 <MX_TIM2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800303c:	2182      	movs	r1, #130	; 0x82
 800303e:	481b      	ldr	r0, [pc, #108]	; (80030ac <MX_TIM2_Init+0x94>)
 8003040:	f7ff fdf4 	bl	8002c2c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003048:	a90a      	add	r1, sp, #40	; 0x28
 800304a:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800304e:	4816      	ldr	r0, [pc, #88]	; (80030a8 <MX_TIM2_Init+0x90>)
 8003050:	f7ff f854 	bl	80020fc <HAL_TIM_ConfigClockSource>
 8003054:	b118      	cbz	r0, 800305e <MX_TIM2_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003056:	2188      	movs	r1, #136	; 0x88
 8003058:	4814      	ldr	r0, [pc, #80]	; (80030ac <MX_TIM2_Init+0x94>)
 800305a:	f7ff fde7 	bl	8002c2c <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800305e:	4812      	ldr	r0, [pc, #72]	; (80030a8 <MX_TIM2_Init+0x90>)
 8003060:	f7ff f9fc 	bl	800245c <HAL_TIM_IC_Init>
 8003064:	b118      	cbz	r0, 800306e <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003066:	218d      	movs	r1, #141	; 0x8d
 8003068:	4810      	ldr	r0, [pc, #64]	; (80030ac <MX_TIM2_Init+0x94>)
 800306a:	f7ff fddf 	bl	8002c2c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306e:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003070:	4669      	mov	r1, sp
 8003072:	480d      	ldr	r0, [pc, #52]	; (80030a8 <MX_TIM2_Init+0x90>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003074:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003076:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003078:	f7ff faf4 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 800307c:	b118      	cbz	r0, 8003086 <MX_TIM2_Init+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800307e:	2194      	movs	r1, #148	; 0x94
 8003080:	480a      	ldr	r0, [pc, #40]	; (80030ac <MX_TIM2_Init+0x94>)
 8003082:	f7ff fdd3 	bl	8002c2c <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003086:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003088:	2200      	movs	r2, #0
 800308a:	a906      	add	r1, sp, #24
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <MX_TIM2_Init+0x90>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800308e:	9406      	str	r4, [sp, #24]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003090:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003092:	9408      	str	r4, [sp, #32]
  sConfigIC.ICFilter = 0;
 8003094:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003096:	f7ff fa25 	bl	80024e4 <HAL_TIM_IC_ConfigChannel>
 800309a:	b118      	cbz	r0, 80030a4 <MX_TIM2_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800309c:	219d      	movs	r1, #157	; 0x9d
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <MX_TIM2_Init+0x94>)
 80030a0:	f7ff fdc4 	bl	8002c2c <_Error_Handler>
  }

}
 80030a4:	b00a      	add	sp, #40	; 0x28
 80030a6:	bd10      	pop	{r4, pc}
 80030a8:	200001e4 	.word	0x200001e4
 80030ac:	080032f2 	.word	0x080032f2

080030b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
 80030b2:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 80030b4:	4817      	ldr	r0, [pc, #92]	; (8003114 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 71;
 80030b6:	4918      	ldr	r1, [pc, #96]	; (8003118 <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000;
 80030b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.Prescaler = 71;
 80030bc:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c0:	2300      	movs	r3, #0
  htim3.Init.Period = 1000;
 80030c2:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c4:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030ca:	f7ff f9ad 	bl	8002428 <HAL_TIM_Base_Init>
 80030ce:	b118      	cbz	r0, 80030d8 <MX_TIM3_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030d0:	21af      	movs	r1, #175	; 0xaf
 80030d2:	4812      	ldr	r0, [pc, #72]	; (800311c <MX_TIM3_Init+0x6c>)
 80030d4:	f7ff fdaa 	bl	8002c2c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030dc:	a906      	add	r1, sp, #24
 80030de:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030e2:	480c      	ldr	r0, [pc, #48]	; (8003114 <MX_TIM3_Init+0x64>)
 80030e4:	f7ff f80a 	bl	80020fc <HAL_TIM_ConfigClockSource>
 80030e8:	b118      	cbz	r0, 80030f2 <MX_TIM3_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030ea:	21b5      	movs	r1, #181	; 0xb5
 80030ec:	480b      	ldr	r0, [pc, #44]	; (800311c <MX_TIM3_Init+0x6c>)
 80030ee:	f7ff fd9d 	bl	8002c2c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f2:	2220      	movs	r2, #32
 80030f4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030f6:	4669      	mov	r1, sp
 80030f8:	4806      	ldr	r0, [pc, #24]	; (8003114 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fa:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030fe:	f7ff fab1 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 8003102:	b118      	cbz	r0, 800310c <MX_TIM3_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003104:	21bc      	movs	r1, #188	; 0xbc
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_TIM3_Init+0x6c>)
 8003108:	f7ff fd90 	bl	8002c2c <_Error_Handler>
  }

}
 800310c:	b007      	add	sp, #28
 800310e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003112:	bf00      	nop
 8003114:	20000164 	.word	0x20000164
 8003118:	40000400 	.word	0x40000400
 800311c:	080032f2 	.word	0x080032f2

08003120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003120:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM1)
 8003122:	6803      	ldr	r3, [r0, #0]
 8003124:	4a32      	ldr	r2, [pc, #200]	; (80031f0 <HAL_TIM_Base_MspInit+0xd0>)
{
 8003126:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 8003128:	4293      	cmp	r3, r2
 800312a:	d125      	bne.n	8003178 <HAL_TIM_Base_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800312c:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <HAL_TIM_Base_MspInit+0xd4>)
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312e:	2400      	movs	r4, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003130:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003138:	619a      	str	r2, [r3, #24]
 800313a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	482e      	ldr	r0, [pc, #184]	; (80031f8 <HAL_TIM_Base_MspInit+0xd8>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003146:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800314c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f7fe f81a 	bl	8001188 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003154:	4622      	mov	r2, r4
 8003156:	4621      	mov	r1, r4
 8003158:	2019      	movs	r0, #25
 800315a:	f7fd fea7 	bl	8000eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800315e:	2019      	movs	r0, #25
 8003160:	f7fd fed8 	bl	8000f14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003164:	201b      	movs	r0, #27
 8003166:	4622      	mov	r2, r4
 8003168:	4621      	mov	r1, r4
 800316a:	f7fd fe9f 	bl	8000eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800316e:	201b      	movs	r0, #27
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003170:	f7fd fed0 	bl	8000f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003174:	b006      	add	sp, #24
 8003176:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM2)
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d124      	bne.n	80031c8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800317e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003182:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003184:	2400      	movs	r4, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	61da      	str	r2, [r3, #28]
 800318c:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	4816      	ldr	r0, [pc, #88]	; (80031f8 <HAL_TIM_Base_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800319e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f7fd fff0 	bl	8001188 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80031a8:	4a14      	ldr	r2, [pc, #80]	; (80031fc <HAL_TIM_Base_MspInit+0xdc>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031aa:	201c      	movs	r0, #28
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80031ac:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031ae:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80031b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031be:	4622      	mov	r2, r4
 80031c0:	f7fd fe74 	bl	8000eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c4:	201c      	movs	r0, #28
 80031c6:	e7d3      	b.n	8003170 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_TIM_Base_MspInit+0xe0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d1d2      	bne.n	8003174 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_TIM_Base_MspInit+0xd4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031d0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	f042 0202 	orr.w	r2, r2, #2
 80031d8:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031dc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031de:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	9302      	str	r3, [sp, #8]
 80031e6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031e8:	f7fd fe60 	bl	8000eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031ec:	201d      	movs	r0, #29
 80031ee:	e7bf      	b.n	8003170 <HAL_TIM_Base_MspInit+0x50>
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40010800 	.word	0x40010800
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400

08003204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003204:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003206:	e003      	b.n	8003210 <LoopCopyDataInit>

08003208 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800320a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800320c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800320e:	3104      	adds	r1, #4

08003210 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003210:	480a      	ldr	r0, [pc, #40]	; (800323c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003214:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003216:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003218:	d3f6      	bcc.n	8003208 <CopyDataInit>
  ldr r2, =_sbss
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800321c:	e002      	b.n	8003224 <LoopFillZerobss>

0800321e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003220:	f842 3b04 	str.w	r3, [r2], #4

08003224 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003226:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003228:	d3f9      	bcc.n	800321e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800322a:	f7ff fe63 	bl	8002ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800322e:	f000 f80f 	bl	8003250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003232:	f7ff fba1 	bl	8002978 <main>
  bx lr
 8003236:	4770      	bx	lr
  ldr r3, =_sidata
 8003238:	08003308 	.word	0x08003308
  ldr r0, =_sdata
 800323c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003240:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003244:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003248:	20000224 	.word	0x20000224

0800324c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800324c:	e7fe      	b.n	800324c <ADC1_2_IRQHandler>
	...

08003250 <__libc_init_array>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2500      	movs	r5, #0
 8003254:	4e0c      	ldr	r6, [pc, #48]	; (8003288 <__libc_init_array+0x38>)
 8003256:	4c0d      	ldr	r4, [pc, #52]	; (800328c <__libc_init_array+0x3c>)
 8003258:	1ba4      	subs	r4, r4, r6
 800325a:	10a4      	asrs	r4, r4, #2
 800325c:	42a5      	cmp	r5, r4
 800325e:	d109      	bne.n	8003274 <__libc_init_array+0x24>
 8003260:	f000 f81a 	bl	8003298 <_init>
 8003264:	2500      	movs	r5, #0
 8003266:	4e0a      	ldr	r6, [pc, #40]	; (8003290 <__libc_init_array+0x40>)
 8003268:	4c0a      	ldr	r4, [pc, #40]	; (8003294 <__libc_init_array+0x44>)
 800326a:	1ba4      	subs	r4, r4, r6
 800326c:	10a4      	asrs	r4, r4, #2
 800326e:	42a5      	cmp	r5, r4
 8003270:	d105      	bne.n	800327e <__libc_init_array+0x2e>
 8003272:	bd70      	pop	{r4, r5, r6, pc}
 8003274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003278:	4798      	blx	r3
 800327a:	3501      	adds	r5, #1
 800327c:	e7ee      	b.n	800325c <__libc_init_array+0xc>
 800327e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003282:	4798      	blx	r3
 8003284:	3501      	adds	r5, #1
 8003286:	e7f2      	b.n	800326e <__libc_init_array+0x1e>
 8003288:	08003300 	.word	0x08003300
 800328c:	08003300 	.word	0x08003300
 8003290:	08003300 	.word	0x08003300
 8003294:	08003304 	.word	0x08003304

08003298 <_init>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr

080032a4 <_fini>:
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	bf00      	nop
 80032a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032aa:	bc08      	pop	{r3}
 80032ac:	469e      	mov	lr, r3
 80032ae:	4770      	bx	lr
